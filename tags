!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ASSERT	mkfs/sfs_fs.h	131;"	d
ASSERT_MSG	mkfs/sfs_fs.h	124;"	d
BITMAP_FIRST_BYTE_MASK	mkfs/mkfs_lib.c	151;"	d	file:
BITS_PER_BYTE	mkfs/sfs_fs.h	165;"	d
BITS_PER_BYTE	sfs_fs.h	20;"	d
BLKDISCARD	mkfs/mkfs_format.c	40;"	d	file:
BLKSECDISCARD	mkfs/mkfs_format.c	43;"	d	file:
CC	mkfs/Makefile	/^CC = gcc$/;"	m
CFLAG	Makefile	/^CFLAG	= -I$(src)$/;"	m
CFLAG	mkfs/Makefile	/^CFLAG = -I.$/;"	m
DBG	mkfs/sfs_fs.h	152;"	d
DEFAULT_SECTORS_PER_BLOCK	mkfs/sfs_fs.h	240;"	d
DEFAULT_SECTORS_PER_BLOCK	sfs_fs.h	77;"	d
DEFAULT_SECTOR_SIZE	mkfs/sfs_fs.h	239;"	d
DEFAULT_SECTOR_SIZE	sfs_fs.h	76;"	d
DEF_ADDRS_PER_BLOCK	mkfs/sfs_fs.h	272;"	d
DEF_ADDRS_PER_BLOCK	sfs_fs.h	110;"	d
DEF_ADDRS_PER_INODE	mkfs/sfs_fs.h	270;"	d
DEF_ADDRS_PER_INODE	sfs_fs.h	107;"	d
DEF_APB_SHIFT	sfs_fs.h	111;"	d
DEF_IADDRS_PER_INODE	sfs_fs.h	108;"	d
DEF_NIDS_PER_INODE	mkfs/sfs_fs.h	271;"	d
DEF_SFS_N_BLOCKS	sfs_fs.h	109;"	d
DEPS	mkfs/Makefile	/^DEPS = sfs_fs.h mkfs.h$/;"	m
ERR_MSG	mkfs/sfs_fs.h	140;"	d
FIX_MSG	mkfs/sfs_fs.h	118;"	d
Indirect	super.c	/^} Indirect;$/;"	t	typeref:struct:__anon2	file:
KDIR	Makefile	/^KDIR	= \/lib\/modules\/$(shell uname -r)\/build$/;"	m
MAP_SIZE_ALIGN	mkfs/sfs_fs.h	330;"	d
MAP_SIZE_ALIGN	sfs_fs.h	170;"	d
MAX_PATH_LEN	mkfs/sfs_fs.h	167;"	d
MAX_PATH_LEN	sfs_fs.h	22;"	d
MOUNTED	mkfs/mkfs_lib.c	298;"	d	file:
MSG	mkfs/sfs_fs.h	145;"	d
NAME	Makefile	/^NAME	= sfs$/;"	m
NEW_ADDR	mkfs/sfs_fs.h	247;"	d
NEW_ADDR	sfs_fs.h	84;"	d
NULL_ADDR	mkfs/sfs_fs.h	246;"	d
NULL_ADDR	sfs_fs.h	83;"	d
OBJ	mkfs/Makefile	/^OBJ = mkfs_lib.o mkfs_io.o mkfs_format.o mkfs_main.o$/;"	m
PAGE_CACHE_SIZE	mkfs/sfs_fs.h	164;"	d
PAGE_CACHE_SIZE	sfs_fs.h	19;"	d
PAGE_SIZE	mkfs/sfs_fs.h	162;"	d
PAGE_SIZE	sfs_fs.h	17;"	d
PWD	Makefile	/^PWD	= $(shell pwd)$/;"	m
SBH_MAX_BH	sfs.h	84;"	d
SFS_BLKSIZE	mkfs/sfs_fs.h	241;"	d
SFS_BLKSIZE	sfs_fs.h	78;"	d
SFS_BLKSIZE_BITS	mkfs/sfs_fs.h	170;"	d
SFS_BLKSIZE_BITS	sfs_fs.h	25;"	d
SFS_BLOCK_ALIGN	mkfs/sfs_fs.h	244;"	d
SFS_BLOCK_ALIGN	sfs_fs.h	81;"	d
SFS_BLOCK_SIZE	mkfs/sfs_fs.h	243;"	d
SFS_BLOCK_SIZE	sfs.h	48;"	d
SFS_BLOCK_SIZE_BITS	sfs.h	49;"	d
SFS_BYTES_TO_BLK	mkfs/sfs_fs.h	169;"	d
SFS_BYTES_TO_BLK	sfs_fs.h	24;"	d
SFS_DENTRY_OFFSET	sfs_fs.h	166;"	d
SFS_DIND_BLOCK	sfs_fs.h	113;"	d
SFS_DIR	mkfs/sfs_fs.h	/^	SFS_DIR,$/;"	e	enum:__anon3
SFS_DIR	sfs_fs.h	/^        SFS_DIR,$/;"	e	enum:__anon1
SFS_DIR_PAD	mkfs/sfs_fs.h	311;"	d
SFS_DIR_PAD	sfs_fs.h	154;"	d
SFS_DIR_REC_LEN	mkfs/sfs_fs.h	313;"	d
SFS_DIR_REC_LEN	sfs_fs.h	156;"	d
SFS_DIR_ROUND	mkfs/sfs_fs.h	312;"	d
SFS_DIR_ROUND	sfs_fs.h	155;"	d
SFS_DM_I	sfs.h	/^static inline struct sfs_bmap_info *SFS_DM_I(struct sfs_sb_info *sbi)$/;"	f
SFS_GET_SB	sfs.h	43;"	d
SFS_I	sfs.h	/^static inline struct sfs_inode_info *SFS_I(struct inode *inode)$/;"	f
SFS_IMAP_BLK_OFFSET	mkfs/sfs_fs.h	328;"	d
SFS_IMAP_BLK_OFFSET	sfs_fs.h	168;"	d
SFS_IMAP_BYTE_OFFSET	mkfs/sfs_fs.h	329;"	d
SFS_IMAP_BYTE_OFFSET	sfs_fs.h	169;"	d
SFS_IM_I	sfs.h	/^static inline struct sfs_bmap_info *SFS_IM_I(struct sfs_sb_info *sbi)$/;"	f
SFS_IND_BLOCK	sfs_fs.h	112;"	d
SFS_INODE_SIZE	sfs.h	50;"	d
SFS_LOG_BLOCK_SIZE	sfs_fs.h	80;"	d
SFS_MAXNAME_LEN	sfs_fs.h	116;"	d
SFS_MAX_REC_LEN	mkfs/sfs_fs.h	314;"	d
SFS_MAX_REC_LEN	sfs_fs.h	157;"	d
SFS_NAME_LEN	mkfs/sfs_fs.h	274;"	d
SFS_NODE_RATIO	mkfs/sfs_fs.h	332;"	d
SFS_NODE_RATIO	sfs_fs.h	172;"	d
SFS_REG_FILE	mkfs/sfs_fs.h	/^	SFS_REG_FILE,$/;"	e	enum:__anon3
SFS_REG_FILE	sfs_fs.h	/^        SFS_REG_FILE,$/;"	e	enum:__anon1
SFS_ROOT_INO	mkfs/sfs_fs.h	249;"	d
SFS_ROOT_INO	sfs_fs.h	86;"	d
SFS_SB	sfs.h	/^static inline struct sfs_sb_info *SFS_SB(struct super_block *sb)$/;"	f
SFS_SECTOR_SIZE	mkfs/sfs_fs.h	242;"	d
SFS_SECTOR_SIZE	sfs_fs.h	79;"	d
SFS_SUPER_MAGIC	mkfs/sfs_fs.h	166;"	d
SFS_SUPER_MAGIC	sfs_fs.h	21;"	d
SFS_SUPER_OFFSET	mkfs/sfs_fs.h	238;"	d
SFS_SUPER_OFFSET	sfs_fs.h	75;"	d
SFS_TIND_BLOCK	sfs_fs.h	114;"	d
SFS_TOOLS_DATE	mkfs/mkfs.h	17;"	d
SFS_TOOLS_VERSION	mkfs/mkfs.h	16;"	d
SFS_UNKNOWN	mkfs/sfs_fs.h	/^	SFS_UNKNOWN,$/;"	e	enum:__anon3
SFS_UNKNOWN	sfs_fs.h	/^        SFS_UNKNOWN,$/;"	e	enum:__anon1
_GNU_SOURCE	mkfs/mkfs_format.c	15;"	d	file:
_LARGEFILE64_SOURCE	mkfs/mkfs.h	9;"	d
_LARGEFILE64_SOURCE	mkfs/mkfs_format.c	12;"	d	file:
_LARGEFILE64_SOURCE	mkfs/mkfs_io.c	9;"	d	file:
_LARGEFILE64_SOURCE	mkfs/mkfs_main.c	9;"	d	file:
_LARGEFILE_SOURCE	mkfs/mkfs_format.c	9;"	d	file:
_MFKS_H	mkfs/mkfs.h	12;"	d
_SFS_FS_H	mkfs/sfs_fs.h	10;"	d
_SFS_FS_H	sfs_fs.h	10;"	d
_SFS_H	sfs.h	10;"	d
__USE_GNU	mkfs/mkfs_lib.c	38;"	d	file:
__check_offset	mkfs/mkfs_io.c	/^static int __check_offset(__u64 *offset)$/;"	f	file:
__ffs	mkfs/mkfs_lib.c	/^static inline __u64 __ffs(__u8 word)$/;"	f	file:
__le16	mkfs/sfs_fs.h	/^typedef u16	__le16;$/;"	t
__le32	mkfs/sfs_fs.h	/^typedef u32	__le32;$/;"	t
__le64	mkfs/sfs_fs.h	/^typedef u64	__le64;$/;"	t
__le8	mkfs/sfs_fs.h	/^typedef u8	__le8;$/;"	t
__round_mask	mkfs/sfs_fs.h	223;"	d
__u16	mkfs/sfs_fs.h	/^typedef u16	__u16;$/;"	t
__u32	mkfs/sfs_fs.h	/^typedef u32	__u32;$/;"	t
__u64	mkfs/sfs_fs.h	/^typedef u64	__u64;$/;"	t
__u8	mkfs/sfs_fs.h	/^typedef u8	__u8;$/;"	t
_find_next_bit_le	mkfs/mkfs_lib.c	/^static __u64 _find_next_bit_le(const __u8 *addr, __u64 nbits, __u64 start, char invert)$/;"	f	file:
add_chain	super.c	/^static inline void add_chain(Indirect *p, struct buffer_head *bh, __le32 *v)$/;"	f	file:
addr	mkfs/sfs_fs.h	/^	__le32 addr[DEF_ADDRS_PER_BLOCK];       \/* array of data block address *\/$/;"	m	struct:indirect_node
addr	sfs_fs.h	/^        __le32 addr[DEF_ADDRS_PER_BLOCK];       \/* array of data block address *\/$/;"	m	struct:indirect_node
b_sbh	sfs.h	/^	struct sfs_buffer_head b_sbh;$/;"	m	struct:sfs_bmap_info	typeref:struct:sfs_bmap_info::sfs_buffer_head
b_start_lookup	sfs.h	/^	unsigned int b_start_lookup;$/;"	m	struct:sfs_bmap_info
bh	sfs.h	/^	struct buffer_head *bh[SBH_MAX_BH];$/;"	m	struct:sfs_buffer_head	typeref:struct:sfs_buffer_head::buffer_head
bh	super.c	/^	struct buffer_head *bh;$/;"	m	struct:__anon2	typeref:struct:__anon2::buffer_head	file:
bits_in_byte	mkfs/mkfs_lib.c	/^static const int bits_in_byte[256] = {$/;"	v	file:
blkcnt_data	sfs.h	/^        unsigned int blkcnt_data;$/;"	m	struct:sfs_sb_info
blkcnt_dmap	sfs.h	/^        unsigned int blkcnt_dmap;$/;"	m	struct:sfs_sb_info
blkcnt_imap	sfs.h	/^        unsigned int blkcnt_imap;$/;"	m	struct:sfs_sb_info
blkcnt_inode	sfs.h	/^        unsigned int blkcnt_inode;$/;"	m	struct:sfs_sb_info
block_count	mkfs/sfs_fs.h	/^	__le64 block_count;             \/* total # of user blocks *\/$/;"	m	struct:sfs_super_block
block_count	sfs_fs.h	/^        __le64 block_count;             \/* total # of user blocks *\/$/;"	m	struct:sfs_super_block
block_count_data	mkfs/sfs_fs.h	/^	__le32 block_count_data;        \/* # of blocks for data *\/$/;"	m	struct:sfs_super_block
block_count_data	sfs_fs.h	/^        __le32 block_count_data;        \/* # of blocks for data *\/$/;"	m	struct:sfs_super_block
block_count_dmap	mkfs/sfs_fs.h	/^	__le32 block_count_dmap;        \/* # of blocks for data bmap *\/$/;"	m	struct:sfs_super_block
block_count_dmap	sfs_fs.h	/^        __le32 block_count_dmap;        \/* # of blocks for data bmap *\/$/;"	m	struct:sfs_super_block
block_count_imap	mkfs/sfs_fs.h	/^	__le32 block_count_imap;        \/* # of blocks for inode bmap *\/$/;"	m	struct:sfs_super_block
block_count_imap	sfs_fs.h	/^        __le32 block_count_imap;        \/* # of blocks for inode bmap *\/$/;"	m	struct:sfs_super_block
block_count_inodes	mkfs/sfs_fs.h	/^	__le32 block_count_inodes;      \/* # of blocks for inode *\/$/;"	m	struct:sfs_super_block
block_count_inodes	sfs_fs.h	/^        __le32 block_count_inodes;      \/* # of blocks for inode *\/$/;"	m	struct:sfs_super_block
block_size	mkfs/sfs_fs.h	/^	__le32 block_size;		\/* block size in bytes *\/$/;"	m	struct:sfs_super_block
block_size	sfs_fs.h	/^        __le32 block_size;		\/* block size in bytes *\/$/;"	m	struct:sfs_super_block
block_t	mkfs/sfs_fs.h	/^typedef u32	block_t;$/;"	t
book	mkfs/sfs_fs.h	/^typedef u8	book;$/;"	t
bswap_16	mkfs/sfs_fs.h	/^static inline u_int16_t bswap_16(u_int16_t val)$/;"	f
bswap_32	mkfs/sfs_fs.h	/^static inline u_int32_t bswap_32(u_int32_t val)$/;"	f
bswap_64	mkfs/sfs_fs.h	/^static inline u_int64_t bswap_64(u_int64_t val)$/;"	f
c	mkfs/mkfs.h	/^struct sfs_configuration c;$/;"	v	typeref:struct:sfs_configuration
count	sfs.h	/^	unsigned int count;$/;"	m	struct:sfs_buffer_head
cpu_to_le16	mkfs/sfs_fs.h	103;"	d
cpu_to_le16	mkfs/sfs_fs.h	96;"	d
cpu_to_le32	mkfs/sfs_fs.h	104;"	d
cpu_to_le32	mkfs/sfs_fs.h	97;"	d
cpu_to_le64	mkfs/sfs_fs.h	105;"	d
cpu_to_le64	mkfs/sfs_fs.h	98;"	d
data_blkaddr	mkfs/sfs_fs.h	/^	__le32 data_blkaddr;            \/* start block address of data *\/$/;"	m	struct:sfs_super_block
data_blkaddr	sfs.h	/^        unsigned int data_blkaddr;$/;"	m	struct:sfs_sb_info
data_blkaddr	sfs_fs.h	/^        __le32 data_blkaddr;            \/* start block address of data *\/$/;"	m	struct:sfs_super_block
dbg_lv	mkfs/sfs_fs.h	/^	int dbg_lv;$/;"	m	struct:sfs_configuration
dbg_lv	sfs_fs.h	/^	int dbg_lv;$/;"	m	struct:sfs_configuration
dentry	mkfs/sfs_fs.h	/^	struct sfs_dir_entry dentry[255];$/;"	m	struct:sfs_dentry_block	typeref:struct:sfs_dentry_block::sfs_dir_entry
destroy_inode_cache	super.c	/^static void destroy_inode_cache(void)$/;"	f	file:
dev_write	mkfs/mkfs_io.c	/^int dev_write(void *buf, __u64 offset, size_t len)$/;"	f
dev_write_block	mkfs/mkfs_io.c	/^int dev_write_block(void *buf, __u64 blk_addr)$/;"	f
dm_i	sfs.h	/^	struct sfs_bmap_info *dm_i;$/;"	m	struct:sfs_sb_info	typeref:struct:sfs_sb_info::sfs_bmap_info
dmap_blkaddr	mkfs/sfs_fs.h	/^	__le32 dmap_blkaddr;            \/* start block address of data bmap *\/$/;"	m	struct:sfs_super_block
dmap_blkaddr	sfs.h	/^        unsigned int dmap_blkaddr;$/;"	m	struct:sfs_sb_info
dmap_blkaddr	sfs_fs.h	/^        __le32 dmap_blkaddr;            \/* start block address of data bmap *\/$/;"	m	struct:sfs_super_block
end_blkaddr	mkfs/sfs_fs.h	/^	u_int64_t end_blkaddr;$/;"	m	struct:sfs_configuration
end_blkaddr	sfs_fs.h	/^	u_int64_t end_blkaddr;$/;"	m	struct:sfs_configuration
exit_sfs_fs	super.c	/^static void __exit exit_sfs_fs(void)$/;"	f	file:
fd	mkfs/sfs_fs.h	/^	int32_t fd;$/;"	m	struct:sfs_configuration
fd	sfs_fs.h	/^	int32_t fd;$/;"	m	struct:sfs_configuration
file_type	mkfs/sfs_fs.h	/^	__u8 file_type;               \/* file type *\/$/;"	m	struct:sfs_dir_entry
file_type	sfs_fs.h	/^	__u8 file_type;$/;"	m	struct:sfs_dir_entry
find_next_bit_le	mkfs/mkfs_lib.c	/^__u64 find_next_bit_le(const __u8 *addr, __u64 size, __u64 offset)$/;"	f
find_next_zero_bit_le	mkfs/mkfs_lib.c	/^__u64 find_next_zero_bit_le(const __u8 *addr, __u64 size, __u64 offset)$/;"	f
get_bits_in_byte	mkfs/mkfs_lib.c	/^int get_bits_in_byte(unsigned char n)$/;"	f
get_device_info	mkfs/mkfs_lib.c	/^int get_device_info(void)$/;"	f
get_rootdev	mkfs/mkfs_lib.c	/^char *get_rootdev(void)$/;"	f
get_sb	mkfs/sfs_fs.h	209;"	d
get_sb	sfs_fs.h	64;"	d
get_sb_le16	mkfs/sfs_fs.h	197;"	d
get_sb_le16	sfs_fs.h	52;"	d
get_sb_le32	mkfs/sfs_fs.h	196;"	d
get_sb_le32	sfs_fs.h	51;"	d
get_sb_le64	mkfs/sfs_fs.h	195;"	d
get_sb_le64	sfs_fs.h	50;"	d
heap	mkfs/sfs_fs.h	/^	int heap;$/;"	m	struct:sfs_configuration
heap	sfs_fs.h	/^	int heap;$/;"	m	struct:sfs_configuration
i_advise	mkfs/sfs_fs.h	/^	__u8 i_advise;                  \/* file hints *\/$/;"	m	struct:sfs_inode
i_advise	sfs_fs.h	/^        __u8 i_advise;                  \/* file hints *\/$/;"	m	struct:sfs_inode
i_atime	mkfs/sfs_fs.h	/^	__le64 i_atime;                 \/* access time *\/$/;"	m	struct:sfs_inode
i_atime	sfs_fs.h	/^        __le64 i_atime;                 \/* access time *\/$/;"	m	struct:sfs_inode
i_atime_nsec	mkfs/sfs_fs.h	/^	__le32 i_atime_nsec;            \/* access time in nano scale *\/$/;"	m	struct:sfs_inode
i_atime_nsec	sfs_fs.h	/^        __le32 i_atime_nsec;            \/* access time in nano scale *\/$/;"	m	struct:sfs_inode
i_blocks	mkfs/sfs_fs.h	/^	__le64 i_blocks;                \/* file size in blocks *\/$/;"	m	struct:sfs_inode
i_blocks	sfs_fs.h	/^        __le64 i_blocks;                \/* file size in blocks *\/$/;"	m	struct:sfs_inode
i_ctime	mkfs/sfs_fs.h	/^	__le64 i_ctime;                 \/* creation time *\/$/;"	m	struct:sfs_inode
i_ctime	sfs_fs.h	/^        __le64 i_ctime;                 \/* creation time *\/$/;"	m	struct:sfs_inode
i_ctime_nsec	mkfs/sfs_fs.h	/^	__le32 i_ctime_nsec;            \/* creation time in nano scale *\/$/;"	m	struct:sfs_inode
i_ctime_nsec	sfs_fs.h	/^        __le32 i_ctime_nsec;            \/* creation time in nano scale *\/$/;"	m	struct:sfs_inode
i_daddr	mkfs/sfs_fs.h	/^	__le32 i_daddr[DEF_ADDRS_PER_INODE];     \/* Pointers to data blocks *\/$/;"	m	struct:sfs_inode
i_daddr	sfs_fs.h	/^        __le32 i_daddr[DEF_ADDRS_PER_INODE];     \/* Pointers to data blocks *\/$/;"	m	struct:sfs_inode
i_data	sfs.h	/^	__le32 i_data[15];$/;"	m	struct:sfs_inode_info
i_dir_start_lookup	sfs.h	/^	__u32 i_dir_start_lookup;$/;"	m	struct:sfs_inode_info
i_flags	mkfs/sfs_fs.h	/^	__le32 i_flags;                 \/* file attributes *\/$/;"	m	struct:sfs_inode
i_flags	sfs.h	/^	__u32 i_flags;$/;"	m	struct:sfs_inode_info
i_flags	sfs_fs.h	/^        __le32 i_flags;                 \/* file attributes *\/$/;"	m	struct:sfs_inode
i_gid	mkfs/sfs_fs.h	/^	__le32 i_gid;                   \/* group ID *\/$/;"	m	struct:sfs_inode
i_gid	sfs_fs.h	/^        __le32 i_gid;                   \/* group ID *\/$/;"	m	struct:sfs_inode
i_iaddr	mkfs/sfs_fs.h	/^	__le32 i_iaddr[DEF_NIDS_PER_INODE];      \/* indirect, double indirect,$/;"	m	struct:sfs_inode
i_iaddr	sfs_fs.h	/^        __le32 i_iaddr[DEF_IADDRS_PER_INODE];      \/* indirect, double indirect,$/;"	m	struct:sfs_inode
i_inline	mkfs/sfs_fs.h	/^	__u8 i_inline;                  \/* file inline flags *\/$/;"	m	struct:sfs_inode
i_inline	sfs_fs.h	/^        __u8 i_inline;                  \/* file inline flags *\/$/;"	m	struct:sfs_inode
i_links	mkfs/sfs_fs.h	/^	__le32 i_links;                 \/* links count *\/$/;"	m	struct:sfs_inode
i_links	sfs_fs.h	/^        __le32 i_links;                 \/* links count *\/$/;"	m	struct:sfs_inode
i_mode	mkfs/sfs_fs.h	/^	__le16 i_mode;                  \/* file mode *\/$/;"	m	struct:sfs_inode
i_mode	sfs_fs.h	/^        __le16 i_mode;                  \/* file mode *\/$/;"	m	struct:sfs_inode
i_mtime	mkfs/sfs_fs.h	/^	__le64 i_mtime;                 \/* modification time *\/$/;"	m	struct:sfs_inode
i_mtime	sfs_fs.h	/^        __le64 i_mtime;                 \/* modification time *\/$/;"	m	struct:sfs_inode
i_mtime_nsec	mkfs/sfs_fs.h	/^	__le32 i_mtime_nsec;            \/* modification time in nano scale *\/$/;"	m	struct:sfs_inode
i_mtime_nsec	sfs_fs.h	/^        __le32 i_mtime_nsec;            \/* modification time in nano scale *\/$/;"	m	struct:sfs_inode
i_pino	mkfs/sfs_fs.h	/^	__le32 i_pino;                  \/* parent inode number *\/$/;"	m	struct:sfs_inode
i_pino	sfs_fs.h	/^        __le32 i_pino;                  \/* parent inode number *\/$/;"	m	struct:sfs_inode
i_size	mkfs/sfs_fs.h	/^	__le64 i_size;                  \/* file size in bytes *\/$/;"	m	struct:sfs_inode
i_size	sfs_fs.h	/^        __le64 i_size;                  \/* file size in bytes *\/$/;"	m	struct:sfs_inode
i_uid	mkfs/sfs_fs.h	/^	__le32 i_uid;                   \/* user ID *\/$/;"	m	struct:sfs_inode
i_uid	sfs_fs.h	/^        __le32 i_uid;                   \/* user ID *\/$/;"	m	struct:sfs_inode
im_i	sfs.h	/^	struct sfs_bmap_info *im_i;$/;"	m	struct:sfs_sb_info	typeref:struct:sfs_sb_info::sfs_bmap_info
imap_blkaddr	mkfs/sfs_fs.h	/^	__le32 imap_blkaddr;            \/* start block address of inode bmap *\/$/;"	m	struct:sfs_super_block
imap_blkaddr	sfs.h	/^        unsigned int imap_blkaddr;$/;"	m	struct:sfs_sb_info
imap_blkaddr	sfs_fs.h	/^        __le32 imap_blkaddr;            \/* start block address of inode bmap *\/$/;"	m	struct:sfs_super_block
indirect_node	mkfs/sfs_fs.h	/^struct indirect_node {$/;"	s
indirect_node	sfs_fs.h	/^struct indirect_node {$/;"	s
init_inode_cache	super.c	/^static int __init init_inode_cache(void)$/;"	f	file:
init_once	super.c	/^static void init_once(void *foo)$/;"	f	file:
init_sfs_fs	super.c	/^static int __init init_sfs_fs(void)$/;"	f	file:
inode	mkfs/sfs_fs.h	/^	__le32 inode;$/;"	m	struct:sfs_dir_entry
inode	sfs_fs.h	/^        __le32 inode;			\/* inode number *\/$/;"	m	struct:sfs_dir_entry
inode_blkaddr	sfs.h	/^	unsigned int inode_blkaddr;$/;"	m	struct:sfs_sb_info
inodes_blkaddr	mkfs/sfs_fs.h	/^	__le32 inodes_blkaddr;          \/* start block address of inodes *\/$/;"	m	struct:sfs_super_block
inodes_blkaddr	sfs_fs.h	/^        __le32 inodes_blkaddr;          \/* start block address of inodes *\/$/;"	m	struct:sfs_super_block
is_mounted	mkfs/mkfs_lib.c	/^static int is_mounted(const char *mpt, const char *device)$/;"	f	file:
key	super.c	/^	__le32 key;$/;"	m	struct:__anon2	file:
le16_to_cpu	mkfs/sfs_fs.h	100;"	d
le16_to_cpu	mkfs/sfs_fs.h	93;"	d
le32_to_cpu	mkfs/sfs_fs.h	101;"	d
le32_to_cpu	mkfs/sfs_fs.h	94;"	d
le64_to_cpu	mkfs/sfs_fs.h	102;"	d
le64_to_cpu	mkfs/sfs_fs.h	95;"	d
log_base_2	mkfs/mkfs_lib.c	/^int log_base_2(u_int32_t num)$/;"	f
magic	mkfs/sfs_fs.h	/^	__le32 magic;                   \/* Magic Number *\/$/;"	m	struct:sfs_super_block
magic	sfs_fs.h	/^        __le32 magic;                   \/* Magic Number *\/$/;"	m	struct:sfs_super_block
main	mkfs/mkfs_main.c	/^int main(int argc, char *argv[]) {$/;"	f
max	mkfs/sfs_fs.h	232;"	d
min	mkfs/sfs_fs.h	226;"	d
mkfs_usage	mkfs/mkfs_main.c	/^static void mkfs_usage(void) {$/;"	f	file:
name	mkfs/sfs_fs.h	/^	__u8 name[SFS_NAME_LEN];    \/* file name *\/$/;"	m	struct:sfs_dir_entry
name	sfs_fs.h	/^        __u8 name[SFS_MAXNAME_LEN];	 \/* file name *\/$/;"	m	struct:sfs_dir_entry
name_len	mkfs/sfs_fs.h	/^	__u8 name_len;$/;"	m	struct:sfs_dir_entry
name_len	sfs_fs.h	/^	__u8 name_len;$/;"	m	struct:sfs_dir_entry
open_check_fs	mkfs/mkfs_lib.c	/^static int open_check_fs(char *path, int flag)$/;"	f	file:
p	super.c	/^	__le32 *p;$/;"	m	struct:__anon2	file:
path	mkfs/sfs_fs.h	/^	char *path;$/;"	m	struct:sfs_configuration
path	mkfs/sfs_fs.h	/^	char path[MAX_PATH_LEN];$/;"	m	struct:sfs_super_block
path	sfs_fs.h	/^	char *path;$/;"	m	struct:sfs_configuration
path	sfs_fs.h	/^	char path[MAX_PATH_LEN];$/;"	m	struct:sfs_super_block
raw_sb	mkfs/mkfs_format.c	/^struct sfs_super_block raw_sb;$/;"	v	typeref:struct:sfs_super_block
raw_super	sfs.h	/^	struct sfs_super_block *raw_super;		\/* raw super block pointer *\/$/;"	m	struct:sfs_sb_info	typeref:struct:sfs_sb_info::sfs_super_block
rec_len	mkfs/sfs_fs.h	/^	__le16 rec_len;$/;"	m	struct:sfs_dir_entry
rec_len	sfs_fs.h	/^	__le16 rec_len;$/;"	m	struct:sfs_dir_entry
root_addr	mkfs/sfs_fs.h	/^	__le32 root_addr;               \/* root inode blkaddr *\/$/;"	m	struct:sfs_super_block
root_addr	sfs_fs.h	/^        __le32 root_addr;               \/* root inode blkaddr *\/$/;"	m	struct:sfs_super_block
root_gid	mkfs/sfs_fs.h	/^	u_int32_t root_gid;$/;"	m	struct:sfs_configuration
root_gid	sfs_fs.h	/^	u_int32_t root_gid;$/;"	m	struct:sfs_configuration
root_uid	mkfs/sfs_fs.h	/^	u_int32_t root_uid;$/;"	m	struct:sfs_configuration
root_uid	sfs_fs.h	/^	u_int32_t root_uid;$/;"	m	struct:sfs_configuration
round_down	mkfs/sfs_fs.h	224;"	d
sb	mkfs/mkfs_format.c	/^struct sfs_super_block *sb = &raw_sb;$/;"	v	typeref:struct:sfs_super_block
sb	sfs.h	/^	struct super_block *sb;				\/* pointer to VFS super block *\/$/;"	m	struct:sfs_sb_info	typeref:struct:sfs_sb_info::super_block
sbh_sync_block	super.c	/^void sbh_sync_block(struct sfs_buffer_head *sbh)$/;"	f
sector_size	mkfs/sfs_fs.h	/^	__le32 sector_size;		\/* sector size in bytes *\/$/;"	m	struct:sfs_super_block
sector_size	mkfs/sfs_fs.h	/^	u_int32_t sector_size;$/;"	m	struct:sfs_configuration
sector_size	sfs_fs.h	/^	u_int32_t sector_size;$/;"	m	struct:sfs_configuration
sector_size	sfs_fs.h	/^        __le32 sector_size;		\/* sector size in bytes *\/$/;"	m	struct:sfs_super_block
sectors_per_block	mkfs/sfs_fs.h	/^	__le32 sectors_per_block;       \/* # of sectors per block *\/$/;"	m	struct:sfs_super_block
sectors_per_block	mkfs/sfs_fs.h	/^	u_int32_t sectors_per_block;$/;"	m	struct:sfs_configuration
sectors_per_block	sfs_fs.h	/^	u_int32_t sectors_per_block;$/;"	m	struct:sfs_configuration
sectors_per_block	sfs_fs.h	/^        __le32 sectors_per_block;       \/* # of sectors per block *\/$/;"	m	struct:sfs_super_block
set_sb	mkfs/sfs_fs.h	199;"	d
set_sb	sfs_fs.h	54;"	d
set_sb_le16	mkfs/sfs_fs.h	194;"	d
set_sb_le16	sfs_fs.h	49;"	d
set_sb_le32	mkfs/sfs_fs.h	193;"	d
set_sb_le32	sfs_fs.h	48;"	d
set_sb_le64	mkfs/sfs_fs.h	192;"	d
set_sb_le64	sfs_fs.h	47;"	d
sfs_add_default_dentry_root	mkfs/mkfs_format.c	/^static int sfs_add_default_dentry_root(void)$/;"	f	file:
sfs_add_link	super.c	/^int sfs_add_link(struct dentry *dentry, struct inode *inode)$/;"	f
sfs_add_nondir	super.c	/^static inline int sfs_add_nondir(struct dentry *dentry, struct inode *inode)$/;"	f	file:
sfs_alloc_branch	super.c	/^static int sfs_alloc_branch(struct inode *inode, unsigned int *offsets)$/;"	f	file:
sfs_alloc_inode	super.c	/^static struct inode *sfs_alloc_inode(struct super_block *sb)$/;"	f	file:
sfs_aops	super.c	/^const struct address_space_operations sfs_aops = {$/;"	v	typeref:struct:address_space_operations
sfs_block_to_path	super.c	/^static int sfs_block_to_path(sector_t iblock, unsigned int offsets[4])$/;"	f	file:
sfs_bmap	super.c	/^static sector_t sfs_bmap(struct address_space *mapping, sector_t block)$/;"	f	file:
sfs_bmap_info	sfs.h	/^struct sfs_bmap_info {$/;"	s
sfs_buffer_head	sfs.h	/^struct sfs_buffer_head {$/;"	s
sfs_clear_bit	mkfs/mkfs_lib.c	/^int sfs_clear_bit(unsigned int nr, char *addr)$/;"	f
sfs_commit_chunk	super.c	/^static int sfs_commit_chunk(struct page *page, loff_t pos, unsigned len)$/;"	f	file:
sfs_configuration	mkfs/sfs_fs.h	/^struct sfs_configuration {$/;"	s
sfs_configuration	sfs_fs.h	/^struct sfs_configuration {$/;"	s
sfs_create	super.c	/^static int sfs_create(struct inode *dir, struct dentry *dentry, umode_t mode, bool excl)$/;"	f	file:
sfs_create_root_dir	mkfs/mkfs_format.c	/^static int sfs_create_root_dir(void)$/;"	f	file:
sfs_dentry_block	mkfs/sfs_fs.h	/^struct sfs_dentry_block {$/;"	s
sfs_dev_is_mounted	mkfs/mkfs_lib.c	/^int sfs_dev_is_mounted(void)$/;"	f
sfs_dir_entry	mkfs/sfs_fs.h	/^struct sfs_dir_entry {$/;"	s
sfs_dir_entry	sfs_fs.h	/^struct sfs_dir_entry {$/;"	s
sfs_dir_inode_operations	super.c	/^const struct inode_operations sfs_dir_inode_operations = {$/;"	v	typeref:struct:inode_operations
sfs_dir_inode_operations	super.c	/^const struct inode_operations sfs_dir_inode_operations;$/;"	v	typeref:struct:inode_operations
sfs_dir_operations	super.c	/^const struct file_operations sfs_dir_operations = {$/;"	v	typeref:struct:file_operations
sfs_dir_operations	super.c	/^const struct file_operations sfs_dir_operations;$/;"	v	typeref:struct:file_operations
sfs_file_inode_operations	super.c	/^const struct inode_operations sfs_file_inode_operations = {$/;"	v	typeref:struct:inode_operations
sfs_file_inode_operations	super.c	/^const struct inode_operations sfs_file_inode_operations;$/;"	v	typeref:struct:inode_operations
sfs_file_operations	super.c	/^const struct file_operations sfs_file_operations = {$/;"	v	typeref:struct:file_operations
sfs_file_operations	super.c	/^const struct file_operations sfs_file_operations;$/;"	v	typeref:struct:file_operations
sfs_fill_inode	super.c	/^static void sfs_fill_inode(struct inode *inode, struct sfs_inode *sfs_inode)$/;"	f	file:
sfs_fill_super	super.c	/^static int sfs_fill_super(struct super_block *sb, void *data, int silent)$/;"	f	file:
sfs_find_branch	super.c	/^static int sfs_find_branch(struct inode *inode, unsigned int *offsets, int depth)$/;"	f	file:
sfs_find_entry	super.c	/^struct sfs_dir_entry *sfs_find_entry(struct inode *dir, const struct qstr *qstr, struct page **res_page)$/;"	f
sfs_format_device	mkfs/mkfs_format.c	/^int sfs_format_device(void)$/;"	f
sfs_free_inode	super.c	/^static void sfs_free_inode(struct inode *inode)$/;"	f	file:
sfs_fs_type	super.c	/^static struct file_system_type sfs_fs_type = {$/;"	v	typeref:struct:file_system_type	file:
sfs_get	sfs.h	81;"	d
sfs_get_block	super.c	/^static int sfs_get_block(struct inode *inode, sector_t iblock,$/;"	f	file:
sfs_get_device_info	mkfs/mkfs_lib.c	/^int sfs_get_device_info(void)$/;"	f
sfs_get_page	super.c	/^static struct page *sfs_get_page(struct inode *dir, unsigned long n)$/;"	f	file:
sfs_getattr	super.c	/^int sfs_getattr(const struct path *path, struct kstat *stat,$/;"	f
sfs_iget	super.c	/^struct inode *sfs_iget(struct super_block *sb, unsigned long ino)$/;"	f
sfs_init_configuration	mkfs/mkfs_main.c	/^void sfs_init_configuration(void)$/;"	f
sfs_inode	mkfs/sfs_fs.h	/^struct sfs_inode {$/;"	s
sfs_inode	sfs_fs.h	/^struct sfs_inode {$/;"	s
sfs_inode_by_name	super.c	/^ino_t sfs_inode_by_name(struct inode *dir, const struct qstr *qstr)$/;"	f
sfs_inode_cachep	super.c	/^static struct kmem_cache *sfs_inode_cachep;$/;"	v	typeref:struct:kmem_cache	file:
sfs_inode_info	sfs.h	/^struct sfs_inode_info {$/;"	s
sfs_inotoba	sfs.h	82;"	d
sfs_last_byte	super.c	/^static unsigned sfs_last_byte(struct inode *inode, unsigned long page_nr)$/;"	f	file:
sfs_lookup	super.c	/^static struct dentry *sfs_lookup(struct inode *dir, struct dentry *dentry, unsigned int flags)$/;"	f	file:
sfs_make_empty	super.c	/^int sfs_make_empty(struct inode *inode, struct inode *dir)$/;"	f
sfs_match	super.c	/^static inline int sfs_match(int len, const unsigned char *name, struct sfs_dir_entry *de)$/;"	f	file:
sfs_mkdir	super.c	/^static int sfs_mkdir(struct inode *dir, struct dentry *dentry, umode_t mode)$/;"	f	file:
sfs_mount	super.c	/^static struct dentry *sfs_mount(struct file_system_type *fs_type, int flags,$/;"	f	file:
sfs_msg	super.c	/^void sfs_msg(const char *level, const char *funtion, const char *fmt, ...)$/;"	f
sfs_new_inode	super.c	/^struct inode *sfs_new_inode(struct inode *dir, umode_t mode)$/;"	f
sfs_next_entry	super.c	/^static inline struct sfs_dir_entry *sfs_next_entry(struct sfs_dir_entry *p)$/;"	f	file:
sfs_parse_options	mkfs/mkfs_main.c	/^static void sfs_parse_options(int argc, char *argv[])$/;"	f	file:
sfs_prepare_chunk	super.c	/^int sfs_prepare_chunk(struct page *page, loff_t pos, unsigned len)$/;"	f
sfs_prepare_super_block	mkfs/mkfs_format.c	/^static int sfs_prepare_super_block(void) {$/;"	f	file:
sfs_put_page	super.c	/^static inline void sfs_put_page(struct page *page)$/;"	f	file:
sfs_read_inode	super.c	/^static int sfs_read_inode(struct inode *inode, struct sfs_inode *sfs_inode)$/;"	f	file:
sfs_read_raw_super	super.c	/^static int sfs_read_raw_super(struct sfs_sb_info *sbi,$/;"	f	file:
sfs_readdir	super.c	/^static int sfs_readdir(struct file *file, struct dir_context *ctx)$/;"	f	file:
sfs_readpage	super.c	/^static int sfs_readpage(struct file *file, struct page *page)$/;"	f	file:
sfs_sb_info	sfs.h	/^struct sfs_sb_info {$/;"	s
sfs_set_bit	mkfs/mkfs_lib.c	/^int sfs_set_bit(unsigned int nr, char *addr)$/;"	f
sfs_set_inode_ops	super.c	/^static void sfs_set_inode_ops(struct inode *inode)$/;"	f	file:
sfs_setattr	super.c	/^int sfs_setattr(struct dentry *dentry, struct iattr *attr)$/;"	f
sfs_show_info	mkfs/mkfs_main.c	/^static void sfs_show_info(void) {$/;"	f	file:
sfs_sops	super.c	/^static const struct super_operations sfs_sops = {$/;"	v	typeref:struct:super_operations	file:
sfs_super_block	mkfs/sfs_fs.h	/^struct sfs_super_block {$/;"	s
sfs_super_block	sfs_fs.h	/^struct sfs_super_block {$/;"	s
sfs_test_bit	mkfs/mkfs_lib.c	/^int sfs_test_bit(unsigned int nr, const char *p)$/;"	f
sfs_truncate_blocks	super.c	/^static void sfs_truncate_blocks(struct inode * inode) {$/;"	f	file:
sfs_update_dmap	mkfs/mkfs_format.c	/^static int sfs_update_dmap(u32 blkaddr)$/;"	f	file:
sfs_update_imap	mkfs/mkfs_format.c	/^static int sfs_update_imap(u32 blkaddr)$/;"	f	file:
sfs_update_inode	super.c	/^static int sfs_update_inode(struct inode *inode, int do_sync) {$/;"	f	file:
sfs_update_maps_root	mkfs/mkfs_format.c	/^static int sfs_update_maps_root(void)$/;"	f	file:
sfs_write_begin	super.c	/^static int sfs_write_begin(struct file *file, struct address_space *mapping,$/;"	f	file:
sfs_write_end	super.c	/^static int sfs_write_end(struct file *file, struct address_space *mapping,$/;"	f	file:
sfs_write_failed	super.c	/^static void sfs_write_failed(struct address_space *mapping, loff_t to)$/;"	f	file:
sfs_write_inode	super.c	/^int sfs_write_inode(struct inode *inode, struct writeback_control *wbc)$/;"	f
sfs_write_root_inode	mkfs/mkfs_format.c	/^static int sfs_write_root_inode(void)$/;"	f	file:
sfs_write_super_block	mkfs/mkfs_format.c	/^static int sfs_write_super_block(void)$/;"	f	file:
sfs_writepage	super.c	/^static int sfs_writepage(struct page *page, struct writeback_control *wbc)$/;"	f	file:
sparse_read_blk	mkfs/mkfs_io.c	/^static int sparse_read_blk(__u64 block, int count, void *buf) { return 0; }$/;"	f	file:
sparse_write_blk	mkfs/mkfs_io.c	/^static int sparse_write_blk(__u64 block, int count, const void *buf) { return 0; }$/;"	f	file:
start_blkaddr	mkfs/sfs_fs.h	/^	u_int64_t start_blkaddr;$/;"	m	struct:sfs_configuration
start_blkaddr	sfs_fs.h	/^	u_int64_t start_blkaddr;$/;"	m	struct:sfs_configuration
start_block_addr	mkfs/sfs_fs.h	/^	__le32 start_block_addr;	\/* block 0 byte address  *\/$/;"	m	struct:sfs_super_block
start_block_addr	sfs_fs.h	/^	__le32 start_block_addr;	\/* block 0 byte address  *\/$/;"	m	struct:sfs_super_block
test_and_clear_bit_le	mkfs/mkfs_lib.c	/^int test_and_clear_bit_le(__u32 nr, __u8 *addr)$/;"	f
test_and_set_bit_le	mkfs/mkfs_lib.c	/^int test_and_set_bit_le(__u32 nr, __u8 *addr)$/;"	f
test_bit_le	mkfs/mkfs_lib.c	/^int test_bit_le(__u32 nr, const __u8 *addr)$/;"	f
total_blkcnt	sfs.h	/^	unsigned long total_blkcnt;$/;"	m	struct:sfs_sb_info
total_blocks	mkfs/sfs_fs.h	/^	u_int32_t total_blocks;$/;"	m	struct:sfs_configuration
total_blocks	sfs_fs.h	/^	u_int32_t total_blocks;$/;"	m	struct:sfs_configuration
total_sectors	mkfs/sfs_fs.h	/^	u_int64_t total_sectors;$/;"	m	struct:sfs_configuration
total_sectors	sfs_fs.h	/^	u_int64_t total_sectors;$/;"	m	struct:sfs_configuration
trim	mkfs/sfs_fs.h	/^	int trim;$/;"	m	struct:sfs_configuration
trim	sfs_fs.h	/^	int trim;$/;"	m	struct:sfs_configuration
trim_device	mkfs/mkfs_format.c	/^static int trim_device(void)$/;"	f	file:
typecheck	mkfs/sfs_fs.h	108;"	d
u16	mkfs/sfs_fs.h	/^typedef unsigned short	u16;$/;"	t
u32	mkfs/sfs_fs.h	/^typedef unsigned int	u32;$/;"	t
u64	mkfs/sfs_fs.h	/^typedef unsigned long	u64;$/;"	t
u8	mkfs/sfs_fs.h	/^typedef unsigned char	u8;$/;"	t
verify_chain	super.c	/^static inline int verify_chain(Indirect *from, Indirect *to)$/;"	f	file:
vfs_inode	sfs.h	/^	struct inode vfs_inode;$/;"	m	struct:sfs_inode_info	typeref:struct:sfs_inode_info::inode
vol_label	mkfs/sfs_fs.h	/^	char *vol_label;$/;"	m	struct:sfs_configuration
vol_label	sfs_fs.h	/^	char *vol_label;$/;"	m	struct:sfs_configuration
write_inode	mkfs/mkfs_io.c	/^int write_inode(struct sfs_node *inode, __u64 blkaddr)$/;"	f
