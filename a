
sfs.ko:     file format elf64-x86-64


Disassembly of section .text:

ffffffffc06ae000 <put_page>:
	page_ref_inc(page);
	return true;
}

static inline void put_page(struct page *page)
{
ffffffffc06ae000:	55                   	push   %rbp
})

static __always_inline
void __read_once_size(const volatile void *p, void *res, int size)
{
	__READ_ONCE_SIZE;
ffffffffc06ae001:	48 8b 47 08          	mov    0x8(%rdi),%rax
ffffffffc06ae005:	48 89 e5             	mov    %rsp,%rbp
static inline struct page *compound_head(struct page *page)
{
	unsigned long head = READ_ONCE(page->compound_head);

	if (unlikely(head & 1))
		return (struct page *) (head - 1);
ffffffffc06ae008:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
ffffffffc06ae00c:	a8 01                	test   $0x1,%al
ffffffffc06ae00e:	48 0f 45 fa          	cmovne %rdx,%rdi
ffffffffc06ae012:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
 * returns true if the result is 0, or false for all other
 * cases.
 */
static __always_inline bool arch_atomic_dec_and_test(atomic_t *v)
{
	return GEN_UNARY_RMWcc(LOCK_PREFIX "decl", v->counter, e);
ffffffffc06ae017:	f0 ff 4f 34          	lock decl 0x34(%rdi)
	if (page_is_devmap_managed(page)) {
		put_devmap_managed_page(page);
		return;
	}

	if (put_page_testzero(page))
ffffffffc06ae01b:	74 2a                	je     ffffffffc06ae047 <put_page+0x47>
		__put_page(page);
}
ffffffffc06ae01d:	5d                   	pop    %rbp
ffffffffc06ae01e:	c3                   	retq   
	return (page->flags >> ZONES_PGSHIFT) & ZONES_MASK;
ffffffffc06ae01f:	48 8b 07             	mov    (%rdi),%rax
ffffffffc06ae022:	48 c1 e8 33          	shr    $0x33,%rax
ffffffffc06ae026:	83 e0 07             	and    $0x7,%eax
	if (!is_zone_device_page(page))
ffffffffc06ae029:	83 f8 04             	cmp    $0x4,%eax
ffffffffc06ae02c:	75 e9                	jne    ffffffffc06ae017 <put_page+0x17>
	switch (page->pgmap->type) {
ffffffffc06ae02e:	48 8b 47 08          	mov    0x8(%rdi),%rax
ffffffffc06ae032:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
ffffffffc06ae038:	83 e8 01             	sub    $0x1,%eax
ffffffffc06ae03b:	83 f8 01             	cmp    $0x1,%eax
ffffffffc06ae03e:	77 d7                	ja     ffffffffc06ae017 <put_page+0x17>
		put_devmap_managed_page(page);
ffffffffc06ae040:	e8 00 00 00 00       	callq  ffffffffc06ae045 <put_page+0x45>
}
ffffffffc06ae045:	5d                   	pop    %rbp
ffffffffc06ae046:	c3                   	retq   
		__put_page(page);
ffffffffc06ae047:	e8 00 00 00 00       	callq  ffffffffc06ae04c <put_page+0x4c>
}
ffffffffc06ae04c:	5d                   	pop    %rbp
ffffffffc06ae04d:	c3                   	retq   
ffffffffc06ae04e:	66 90                	xchg   %ax,%ax

ffffffffc06ae050 <sfs_bmap>:
		sfs_write_failed(mapping, pos + len);
	return ret;
}

static sector_t sfs_bmap(struct address_space *mapping, sector_t block)
{
ffffffffc06ae050:	e8 00 00 00 00       	callq  ffffffffc06ae055 <sfs_bmap+0x5>
ffffffffc06ae055:	55                   	push   %rbp
ffffffffc06ae056:	48 89 e5             	mov    %rsp,%rbp
ffffffffc06ae059:	41 54                	push   %r12
ffffffffc06ae05b:	53                   	push   %rbx
ffffffffc06ae05c:	49 89 f4             	mov    %rsi,%r12
ffffffffc06ae05f:	48 89 fb             	mov    %rdi,%rbx
	printk(KERN_ERR "jy: bmap\n");
ffffffffc06ae062:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06ae069:	e8 00 00 00 00       	callq  ffffffffc06ae06e <sfs_bmap+0x1e>
	return generic_block_bmap(mapping,block, sfs_get_block);
ffffffffc06ae06e:	4c 89 e6             	mov    %r12,%rsi
ffffffffc06ae071:	48 89 df             	mov    %rbx,%rdi
ffffffffc06ae074:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
ffffffffc06ae07b:	e8 00 00 00 00       	callq  ffffffffc06ae080 <sfs_bmap+0x30>
}
ffffffffc06ae080:	5b                   	pop    %rbx
ffffffffc06ae081:	41 5c                	pop    %r12
ffffffffc06ae083:	5d                   	pop    %rbp
ffffffffc06ae084:	c3                   	retq   
ffffffffc06ae085:	90                   	nop
ffffffffc06ae086:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffffc06ae08d:	00 00 00 

ffffffffc06ae090 <sfs_readpage>:
{
ffffffffc06ae090:	e8 00 00 00 00       	callq  ffffffffc06ae095 <sfs_readpage+0x5>
ffffffffc06ae095:	55                   	push   %rbp
	printk(KERN_ERR "jy: readpage\n");
ffffffffc06ae096:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
{
ffffffffc06ae09d:	48 89 e5             	mov    %rsp,%rbp
ffffffffc06ae0a0:	53                   	push   %rbx
ffffffffc06ae0a1:	48 89 f3             	mov    %rsi,%rbx
	printk(KERN_ERR "jy: readpage\n");
ffffffffc06ae0a4:	e8 00 00 00 00       	callq  ffffffffc06ae0a9 <sfs_readpage+0x19>
	return block_read_full_page(page, sfs_get_block);
ffffffffc06ae0a9:	48 89 df             	mov    %rbx,%rdi
ffffffffc06ae0ac:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
ffffffffc06ae0b3:	e8 00 00 00 00       	callq  ffffffffc06ae0b8 <sfs_readpage+0x28>
}
ffffffffc06ae0b8:	5b                   	pop    %rbx
ffffffffc06ae0b9:	5d                   	pop    %rbp
ffffffffc06ae0ba:	c3                   	retq   
ffffffffc06ae0bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffffc06ae0c0 <sfs_writepage>:
{
ffffffffc06ae0c0:	e8 00 00 00 00       	callq  ffffffffc06ae0c5 <sfs_writepage+0x5>
ffffffffc06ae0c5:	55                   	push   %rbp
ffffffffc06ae0c6:	48 89 e5             	mov    %rsp,%rbp
ffffffffc06ae0c9:	41 54                	push   %r12
ffffffffc06ae0cb:	53                   	push   %rbx
ffffffffc06ae0cc:	49 89 f4             	mov    %rsi,%r12
ffffffffc06ae0cf:	48 89 fb             	mov    %rdi,%rbx
	printk(KERN_ERR "jy: writepage \n");
ffffffffc06ae0d2:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06ae0d9:	e8 00 00 00 00       	callq  ffffffffc06ae0de <sfs_writepage+0x1e>
	return block_write_full_page(page, sfs_get_block, wbc);
ffffffffc06ae0de:	4c 89 e2             	mov    %r12,%rdx
ffffffffc06ae0e1:	48 89 df             	mov    %rbx,%rdi
ffffffffc06ae0e4:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
ffffffffc06ae0eb:	e8 00 00 00 00       	callq  ffffffffc06ae0f0 <sfs_writepage+0x30>
}
ffffffffc06ae0f0:	5b                   	pop    %rbx
ffffffffc06ae0f1:	41 5c                	pop    %r12
ffffffffc06ae0f3:	5d                   	pop    %rbp
ffffffffc06ae0f4:	c3                   	retq   
ffffffffc06ae0f5:	90                   	nop
ffffffffc06ae0f6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffffc06ae0fd:	00 00 00 

ffffffffc06ae100 <sfs_setattr>:

int sfs_setattr(struct dentry *dentry, struct iattr *attr)
{
	struct inode *inode = d_inode(dentry);
	unsigned int ia_valid = attr->ia_valid;
	int error;
ffffffffc06ae100:	e8 00 00 00 00       	callq  ffffffffc06ae105 <sfs_setattr+0x5>
ffffffffc06ae105:	55                   	push   %rbp
ffffffffc06ae106:	48 89 e5             	mov    %rsp,%rbp
ffffffffc06ae109:	41 55                	push   %r13
ffffffffc06ae10b:	41 54                	push   %r12
ffffffffc06ae10d:	53                   	push   %rbx
ffffffffc06ae10e:	49 89 f4             	mov    %rsi,%r12
ffffffffc06ae111:	48 89 fb             	mov    %rdi,%rbx
ffffffffc06ae114:	48 83 ec 08          	sub    $0x8,%rsp

ffffffffc06ae118:	4c 8b 6f 30          	mov    0x30(%rdi),%r13
	printk(KERN_ERR "jy: setattr\n");
	error = setattr_prepare(dentry, attr);
	if (error)
		return error;
ffffffffc06ae11c:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06ae123:	e8 00 00 00 00       	callq  ffffffffc06ae128 <sfs_setattr+0x28>

ffffffffc06ae128:	4c 89 e6             	mov    %r12,%rsi
ffffffffc06ae12b:	48 89 df             	mov    %rbx,%rdi
ffffffffc06ae12e:	e8 00 00 00 00       	callq  ffffffffc06ae133 <sfs_setattr+0x33>
	if (ia_valid & ATTR_SIZE && attr->ia_size != inode->i_size) {
ffffffffc06ae133:	85 c0                	test   %eax,%eax
ffffffffc06ae135:	75 1e                	jne    ffffffffc06ae155 <sfs_setattr+0x55>
	}

	setattr_copy(inode, attr);
	mark_inode_dirty(inode);
	return error;
}
ffffffffc06ae137:	4c 89 e6             	mov    %r12,%rsi
ffffffffc06ae13a:	4c 89 ef             	mov    %r13,%rdi
ffffffffc06ae13d:	89 45 e4             	mov    %eax,-0x1c(%rbp)
ffffffffc06ae140:	e8 00 00 00 00       	callq  ffffffffc06ae145 <sfs_setattr+0x45>
#define I_DIRTY_ALL (I_DIRTY | I_DIRTY_TIME)

extern void __mark_inode_dirty(struct inode *, int);
static inline void mark_inode_dirty(struct inode *inode)
{
	__mark_inode_dirty(inode, I_DIRTY);
ffffffffc06ae145:	be 07 00 00 00       	mov    $0x7,%esi
ffffffffc06ae14a:	4c 89 ef             	mov    %r13,%rdi
ffffffffc06ae14d:	e8 00 00 00 00       	callq  ffffffffc06ae152 <sfs_setattr+0x52>
ffffffffc06ae152:	8b 45 e4             	mov    -0x1c(%rbp),%eax

const struct inode_operations sfs_dir_inode_operations = {
	.lookup         = sfs_lookup,
ffffffffc06ae155:	48 83 c4 08          	add    $0x8,%rsp
ffffffffc06ae159:	5b                   	pop    %rbx
ffffffffc06ae15a:	41 5c                	pop    %r12
ffffffffc06ae15c:	41 5d                	pop    %r13
ffffffffc06ae15e:	5d                   	pop    %rbp
ffffffffc06ae15f:	c3                   	retq   

ffffffffc06ae160 <sfs_write_inode>:

int sfs_write_inode(struct inode *inode, struct writeback_control *wbc)
{
	printk(KERN_ERR "jy: write_inode\n");
	return sfs_update_inode(inode, wbc->sync_mode == WB_SYNC_ALL);
}
ffffffffc06ae160:	e8 00 00 00 00       	callq  ffffffffc06ae165 <sfs_write_inode+0x5>
ffffffffc06ae165:	55                   	push   %rbp
ffffffffc06ae166:	48 89 e5             	mov    %rsp,%rbp
ffffffffc06ae169:	41 56                	push   %r14
ffffffffc06ae16b:	41 55                	push   %r13
ffffffffc06ae16d:	41 54                	push   %r12
ffffffffc06ae16f:	53                   	push   %rbx
ffffffffc06ae170:	49 89 fe             	mov    %rdi,%r14

ffffffffc06ae173:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
}
ffffffffc06ae17a:	48 89 f3             	mov    %rsi,%rbx

ffffffffc06ae17d:	e8 00 00 00 00       	callq  ffffffffc06ae182 <sfs_write_inode+0x22>

ffffffffc06ae182:	49 8b 46 28          	mov    0x28(%r14),%rax
static const struct super_operations sfs_sops = {
ffffffffc06ae186:	44 8b 6b 20          	mov    0x20(%rbx),%r13d

ffffffffc06ae18a:	48 8b 88 b0 03 00 00 	mov    0x3b0(%rax),%rcx
}

static inline struct buffer_head *
sb_bread(struct super_block *sb, sector_t block)
{
	return __bread_gfp(sb->s_bdev, block, sb->s_blocksize, __GFP_MOVABLE);
ffffffffc06ae191:	48 8b 50 18          	mov    0x18(%rax),%rdx
ffffffffc06ae195:	48 8b b8 d8 00 00 00 	mov    0xd8(%rax),%rdi
ffffffffc06ae19c:	8b 71 2c             	mov    0x2c(%rcx),%esi
ffffffffc06ae19f:	49 8b 4e 40          	mov    0x40(%r14),%rcx
ffffffffc06ae1a3:	48 8d 74 0e fd       	lea    -0x3(%rsi,%rcx,1),%rsi
ffffffffc06ae1a8:	b9 08 00 00 00       	mov    $0x8,%ecx
ffffffffc06ae1ad:	e8 00 00 00 00       	callq  ffffffffc06ae1b2 <sfs_write_inode+0x52>

ffffffffc06ae1b2:	48 8b 58 28          	mov    0x28(%rax),%rbx
ffffffffc06ae1b6:	49 89 c4             	mov    %rax,%r12
	sfs_inode->i_uid = cpu_to_le32(i_uid_read(inode));
ffffffffc06ae1b9:	41 0f b7 06          	movzwl (%r14),%eax
ffffffffc06ae1bd:	66 89 03             	mov    %ax,(%rbx)
	sfs_inode->i_gid = cpu_to_le32(i_gid_read(inode));
ffffffffc06ae1c0:	41 0f b7 46 48       	movzwl 0x48(%r14),%eax
ffffffffc06ae1c5:	89 43 0c             	mov    %eax,0xc(%rbx)
	sfs_inode->i_size = cpu_to_le64(inode->i_size);
ffffffffc06ae1c8:	49 8b 46 28          	mov    0x28(%r14),%rax
ffffffffc06ae1cc:	41 8b 76 04          	mov    0x4(%r14),%esi
	return from_kuid(inode->i_sb->s_user_ns, inode->i_uid);
ffffffffc06ae1d0:	48 8b b8 b8 04 00 00 	mov    0x4b8(%rax),%rdi
ffffffffc06ae1d7:	e8 00 00 00 00       	callq  ffffffffc06ae1dc <sfs_write_inode+0x7c>
ffffffffc06ae1dc:	89 43 04             	mov    %eax,0x4(%rbx)
	sfs_inode->i_atime_nsec = cpu_to_le32(inode->i_atime.tv_sec);
ffffffffc06ae1df:	49 8b 46 28          	mov    0x28(%r14),%rax
ffffffffc06ae1e3:	41 8b 76 08          	mov    0x8(%r14),%esi
	return from_kgid(inode->i_sb->s_user_ns, inode->i_gid);
ffffffffc06ae1e7:	48 8b b8 b8 04 00 00 	mov    0x4b8(%rax),%rdi
ffffffffc06ae1ee:	e8 00 00 00 00       	callq  ffffffffc06ae1f3 <sfs_write_inode+0x93>
ffffffffc06ae1f3:	89 43 08             	mov    %eax,0x8(%rbx)
	sfs_inode->i_mtime_nsec = cpu_to_le32(inode->i_mtime.tv_sec);
ffffffffc06ae1f6:	49 8b 46 50          	mov    0x50(%r14),%rax
ffffffffc06ae1fa:	48 89 43 10          	mov    %rax,0x10(%rbx)
	sfs_inode->i_blocks = cpu_to_le32(inode->i_blocks);
ffffffffc06ae1fe:	49 8b 46 58          	mov    0x58(%r14),%rax
ffffffffc06ae202:	89 43 38             	mov    %eax,0x38(%rbx)
	sfs_inode->i_flags = cpu_to_le32(si->i_flags);
ffffffffc06ae205:	49 8b 46 78          	mov    0x78(%r14),%rax
ffffffffc06ae209:	89 43 3c             	mov    %eax,0x3c(%rbx)

ffffffffc06ae20c:	49 8b 46 68          	mov    0x68(%r14),%rax
ffffffffc06ae210:	89 43 40             	mov    %eax,0x40(%rbx)
	if (S_ISCHR(inode->i_mode) || S_ISBLK(inode->i_mode)) {
ffffffffc06ae213:	41 8b 86 90 00 00 00 	mov    0x90(%r14),%eax
ffffffffc06ae21a:	48 89 43 18          	mov    %rax,0x18(%rbx)
		sfs_inode->i_daddr[0] = si->i_data[0];
ffffffffc06ae21e:	41 8b 46 f4          	mov    -0xc(%r14),%eax
ffffffffc06ae222:	89 43 44             	mov    %eax,0x44(%rbx)
		memcpy(&sfs_inode->i_daddr, si->i_data, sizeof(sfs_inode->i_daddr));
ffffffffc06ae225:	41 0f b7 06          	movzwl (%r14),%eax
ffffffffc06ae229:	66 25 00 b0          	and    $0xb000,%ax
ffffffffc06ae22d:	66 3d 00 20          	cmp    $0x2000,%ax
ffffffffc06ae231:	75 60                	jne    ffffffffc06ae293 <sfs_write_inode+0x133>
	}
ffffffffc06ae233:	41 8b 46 b8          	mov    -0x48(%r14),%eax
ffffffffc06ae237:	89 43 4c             	mov    %eax,0x4c(%rbx)

ffffffffc06ae23a:	41 8b 46 48          	mov    0x48(%r14),%eax
ffffffffc06ae23e:	85 c0                	test   %eax,%eax
ffffffffc06ae240:	75 2b                	jne    ffffffffc06ae26d <sfs_write_inode+0x10d>
	size_t p_size = __builtin_object_size(p, 0);
	if (__builtin_constant_p(size) && p_size < size)
		__write_overflow();
	if (p_size < size)
		fortify_panic(__func__);
	return __builtin_memset(p, c, size);
ffffffffc06ae242:	48 8d 7b 08          	lea    0x8(%rbx),%rdi
ffffffffc06ae246:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
ffffffffc06ae24d:	48 c7 83 80 00 00 00 	movq   $0x0,0x80(%rbx)
ffffffffc06ae254:	00 00 00 00 
ffffffffc06ae258:	31 c0                	xor    %eax,%eax
ffffffffc06ae25a:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
ffffffffc06ae25e:	48 29 fb             	sub    %rdi,%rbx
ffffffffc06ae261:	8d 8b 88 00 00 00    	lea    0x88(%rbx),%ecx
ffffffffc06ae267:	c1 e9 03             	shr    $0x3,%ecx
ffffffffc06ae26a:	f3 48 ab             	rep stos %rax,%es:(%rdi)
	brelse(bh);
ffffffffc06ae26d:	4c 89 e7             	mov    %r12,%rdi
ffffffffc06ae270:	e8 00 00 00 00       	callq  ffffffffc06ae275 <sfs_write_inode+0x115>

ffffffffc06ae275:	41 83 fd 01          	cmp    $0x1,%r13d
ffffffffc06ae279:	74 57                	je     ffffffffc06ae2d2 <sfs_write_inode+0x172>
	if (bh)
ffffffffc06ae27b:	4d 85 e4             	test   %r12,%r12
ffffffffc06ae27e:	74 08                	je     ffffffffc06ae288 <sfs_write_inode+0x128>
		__brelse(bh);
ffffffffc06ae280:	4c 89 e7             	mov    %r12,%rdi
ffffffffc06ae283:	e8 00 00 00 00       	callq  ffffffffc06ae288 <sfs_write_inode+0x128>
	.alloc_inode    = sfs_alloc_inode,
ffffffffc06ae288:	5b                   	pop    %rbx
ffffffffc06ae289:	31 c0                	xor    %eax,%eax
ffffffffc06ae28b:	41 5c                	pop    %r12
ffffffffc06ae28d:	41 5d                	pop    %r13
ffffffffc06ae28f:	41 5e                	pop    %r14
ffffffffc06ae291:	5d                   	pop    %rbp
ffffffffc06ae292:	c3                   	retq   

ffffffffc06ae293:	49 83 be 90 00 00 00 	cmpq   $0x0,0x90(%r14)
ffffffffc06ae29a:	00 
ffffffffc06ae29b:	74 9d                	je     ffffffffc06ae23a <sfs_write_inode+0xda>
		if (q_size < size)
			__read_overflow2();
	}
	if (p_size < size || q_size < size)
		fortify_panic(__func__);
	return __builtin_memcpy(p, q, size);
ffffffffc06ae29d:	49 8b 56 b8          	mov    -0x48(%r14),%rdx
ffffffffc06ae2a1:	48 89 53 4c          	mov    %rdx,0x4c(%rbx)
ffffffffc06ae2a5:	49 8b 56 c0          	mov    -0x40(%r14),%rdx
ffffffffc06ae2a9:	48 89 53 54          	mov    %rdx,0x54(%rbx)
ffffffffc06ae2ad:	49 8b 56 c8          	mov    -0x38(%r14),%rdx
ffffffffc06ae2b1:	48 89 53 5c          	mov    %rdx,0x5c(%rbx)
ffffffffc06ae2b5:	49 8b 56 d0          	mov    -0x30(%r14),%rdx
ffffffffc06ae2b9:	48 89 53 64          	mov    %rdx,0x64(%rbx)
ffffffffc06ae2bd:	49 8b 56 d8          	mov    -0x28(%r14),%rdx
ffffffffc06ae2c1:	48 89 53 6c          	mov    %rdx,0x6c(%rbx)
ffffffffc06ae2c5:	49 8b 56 e0          	mov    -0x20(%r14),%rdx
ffffffffc06ae2c9:	48 89 53 74          	mov    %rdx,0x74(%rbx)
ffffffffc06ae2cd:	e9 68 ff ff ff       	jmpq   ffffffffc06ae23a <sfs_write_inode+0xda>
	return 0;
ffffffffc06ae2d2:	4c 89 e7             	mov    %r12,%rdi
ffffffffc06ae2d5:	e8 00 00 00 00       	callq  ffffffffc06ae2da <sfs_write_inode+0x17a>
ffffffffc06ae2da:	eb 9f                	jmp    ffffffffc06ae27b <sfs_write_inode+0x11b>
ffffffffc06ae2dc:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffffc06ae2e0 <sfs_mount>:
static struct dentry *sfs_mount(struct file_system_type *fs_type, int flags,
		const char *dev_name, void *data)
{
	return mount_bdev(fs_type, flags, dev_name, data, sfs_fill_super);
}

ffffffffc06ae2e0:	e8 00 00 00 00       	callq  ffffffffc06ae2e5 <sfs_mount+0x5>
ffffffffc06ae2e5:	55                   	push   %rbp
static struct file_system_type sfs_fs_type = {
ffffffffc06ae2e6:	49 c7 c0 00 00 00 00 	mov    $0x0,%r8

ffffffffc06ae2ed:	48 89 e5             	mov    %rsp,%rbp
static struct file_system_type sfs_fs_type = {
ffffffffc06ae2f0:	e8 00 00 00 00       	callq  ffffffffc06ae2f5 <sfs_mount+0x15>
	.owner		= THIS_MODULE,
ffffffffc06ae2f5:	5d                   	pop    %rbp
ffffffffc06ae2f6:	c3                   	retq   
ffffffffc06ae2f7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffffc06ae2fe:	00 00 

ffffffffc06ae300 <sfs_free_inode>:
{
ffffffffc06ae300:	e8 00 00 00 00       	callq  ffffffffc06ae305 <sfs_free_inode+0x5>
ffffffffc06ae305:	55                   	push   %rbp
ffffffffc06ae306:	48 89 e5             	mov    %rsp,%rbp
ffffffffc06ae309:	53                   	push   %rbx
ffffffffc06ae30a:	48 89 fb             	mov    %rdi,%rbx
	printk(KERN_ERR "jy: free_inode\n");
ffffffffc06ae30d:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06ae314:	e8 00 00 00 00       	callq  ffffffffc06ae319 <sfs_free_inode+0x19>
	kmem_cache_free(sfs_inode_cachep, SFS_I(inode));
ffffffffc06ae319:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # ffffffffc06ae320 <sfs_free_inode+0x20>
	struct inode vfs_inode;
};

static inline struct sfs_inode_info *SFS_I(struct inode *inode)
{
	return container_of(inode, struct sfs_inode_info, vfs_inode);
ffffffffc06ae320:	48 8d 73 b8          	lea    -0x48(%rbx),%rsi
ffffffffc06ae324:	e8 00 00 00 00       	callq  ffffffffc06ae329 <sfs_free_inode+0x29>
}
ffffffffc06ae329:	5b                   	pop    %rbx
ffffffffc06ae32a:	5d                   	pop    %rbp
ffffffffc06ae32b:	c3                   	retq   
ffffffffc06ae32c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffffc06ae330 <sfs_alloc_inode>:
{
ffffffffc06ae330:	e8 00 00 00 00       	callq  ffffffffc06ae335 <sfs_alloc_inode+0x5>
ffffffffc06ae335:	55                   	push   %rbp
	printk(KERN_ERR "jy: alloc inode\n");
ffffffffc06ae336:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
{
ffffffffc06ae33d:	48 89 e5             	mov    %rsp,%rbp
	printk(KERN_ERR "jy: alloc inode\n");
ffffffffc06ae340:	e8 00 00 00 00       	callq  ffffffffc06ae345 <sfs_alloc_inode+0x15>
	si = kmem_cache_alloc(sfs_inode_cachep, GFP_KERNEL);
ffffffffc06ae345:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # ffffffffc06ae34c <sfs_alloc_inode+0x1c>
ffffffffc06ae34c:	be c0 0c 00 00       	mov    $0xcc0,%esi
ffffffffc06ae351:	e8 00 00 00 00       	callq  ffffffffc06ae356 <sfs_alloc_inode+0x26>
	if (!si)
ffffffffc06ae356:	48 85 c0             	test   %rax,%rax
ffffffffc06ae359:	74 11                	je     ffffffffc06ae36c <sfs_alloc_inode+0x3c>
{
	switch (size) {
	case 1: *(volatile __u8 *)p = *(__u8 *)res; break;
	case 2: *(volatile __u16 *)p = *(__u16 *)res; break;
	case 4: *(volatile __u32 *)p = *(__u32 *)res; break;
	case 8: *(volatile __u64 *)p = *(__u64 *)res; break;
ffffffffc06ae35b:	48 c7 80 90 01 00 00 	movq   $0x2,0x190(%rax)
ffffffffc06ae362:	02 00 00 00 
	return &si->vfs_inode;
ffffffffc06ae366:	48 83 c0 48          	add    $0x48,%rax
}
ffffffffc06ae36a:	5d                   	pop    %rbp
ffffffffc06ae36b:	c3                   	retq   
		return NULL;
ffffffffc06ae36c:	31 c0                	xor    %eax,%eax
}
ffffffffc06ae36e:	5d                   	pop    %rbp
ffffffffc06ae36f:	c3                   	retq   

ffffffffc06ae370 <init_once>:
{
ffffffffc06ae370:	e8 00 00 00 00       	callq  ffffffffc06ae375 <init_once+0x5>
ffffffffc06ae375:	55                   	push   %rbp
	inode_init_once(&si->vfs_inode);
ffffffffc06ae376:	48 83 c7 48          	add    $0x48,%rdi
{
ffffffffc06ae37a:	48 89 e5             	mov    %rsp,%rbp
	inode_init_once(&si->vfs_inode);
ffffffffc06ae37d:	e8 00 00 00 00       	callq  ffffffffc06ae382 <init_once+0x12>
}
ffffffffc06ae382:	5d                   	pop    %rbp
ffffffffc06ae383:	c3                   	retq   
ffffffffc06ae384:	66 90                	xchg   %ax,%ax
ffffffffc06ae386:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffffc06ae38d:	00 00 00 

ffffffffc06ae390 <sfs_write_begin>:
{
ffffffffc06ae390:	e8 00 00 00 00       	callq  ffffffffc06ae395 <sfs_write_begin+0x5>
ffffffffc06ae395:	55                   	push   %rbp
	printk(KERN_ERR "jy: write_begin\n");
ffffffffc06ae396:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
{
ffffffffc06ae39d:	48 89 e5             	mov    %rsp,%rbp
ffffffffc06ae3a0:	41 57                	push   %r15
ffffffffc06ae3a2:	41 56                	push   %r14
ffffffffc06ae3a4:	41 55                	push   %r13
ffffffffc06ae3a6:	41 54                	push   %r12
ffffffffc06ae3a8:	49 89 f5             	mov    %rsi,%r13
ffffffffc06ae3ab:	53                   	push   %rbx
ffffffffc06ae3ac:	49 89 d4             	mov    %rdx,%r12
ffffffffc06ae3af:	89 cb                	mov    %ecx,%ebx
ffffffffc06ae3b1:	45 89 c6             	mov    %r8d,%r14d
ffffffffc06ae3b4:	4d 89 cf             	mov    %r9,%r15
ffffffffc06ae3b7:	48 83 ec 08          	sub    $0x8,%rsp
	printk(KERN_ERR "jy: write_begin\n");
ffffffffc06ae3bb:	e8 00 00 00 00       	callq  ffffffffc06ae3c0 <sfs_write_begin+0x30>
	ret = block_write_begin(mapping, pos, len, flags, pagep,
ffffffffc06ae3c0:	49 c7 c1 00 00 00 00 	mov    $0x0,%r9
ffffffffc06ae3c7:	4d 89 f8             	mov    %r15,%r8
ffffffffc06ae3ca:	44 89 f1             	mov    %r14d,%ecx
ffffffffc06ae3cd:	89 da                	mov    %ebx,%edx
ffffffffc06ae3cf:	4c 89 e6             	mov    %r12,%rsi
ffffffffc06ae3d2:	4c 89 ef             	mov    %r13,%rdi
ffffffffc06ae3d5:	e8 00 00 00 00       	callq  ffffffffc06ae3da <sfs_write_begin+0x4a>
	if (unlikely(ret))
ffffffffc06ae3da:	85 c0                	test   %eax,%eax
ffffffffc06ae3dc:	75 0f                	jne    ffffffffc06ae3ed <sfs_write_begin+0x5d>
}
ffffffffc06ae3de:	48 83 c4 08          	add    $0x8,%rsp
ffffffffc06ae3e2:	5b                   	pop    %rbx
ffffffffc06ae3e3:	41 5c                	pop    %r12
ffffffffc06ae3e5:	41 5d                	pop    %r13
ffffffffc06ae3e7:	41 5e                	pop    %r14
ffffffffc06ae3e9:	41 5f                	pop    %r15
ffffffffc06ae3eb:	5d                   	pop    %rbp
ffffffffc06ae3ec:	c3                   	retq   
		sfs_write_failed(mapping, pos + len);
ffffffffc06ae3ed:	49 8b 7d 00          	mov    0x0(%r13),%rdi
ffffffffc06ae3f1:	4a 8d 14 23          	lea    (%rbx,%r12,1),%rdx
	if (to > inode->i_size) {
ffffffffc06ae3f5:	48 8b 77 50          	mov    0x50(%rdi),%rsi
ffffffffc06ae3f9:	48 39 f2             	cmp    %rsi,%rdx
ffffffffc06ae3fc:	7e e0                	jle    ffffffffc06ae3de <sfs_write_begin+0x4e>
ffffffffc06ae3fe:	89 45 d4             	mov    %eax,-0x2c(%rbp)
		truncate_pagecache(inode, inode->i_size);
ffffffffc06ae401:	e8 00 00 00 00       	callq  ffffffffc06ae406 <sfs_write_begin+0x76>
ffffffffc06ae406:	8b 45 d4             	mov    -0x2c(%rbp),%eax
	return ret;
ffffffffc06ae409:	eb d3                	jmp    ffffffffc06ae3de <sfs_write_begin+0x4e>
ffffffffc06ae40b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffffc06ae410 <sfs_write_end>:
{
ffffffffc06ae410:	e8 00 00 00 00       	callq  ffffffffc06ae415 <sfs_write_end+0x5>
ffffffffc06ae415:	55                   	push   %rbp
ffffffffc06ae416:	48 89 e5             	mov    %rsp,%rbp
ffffffffc06ae419:	41 56                	push   %r14
ffffffffc06ae41b:	41 55                	push   %r13
ffffffffc06ae41d:	41 54                	push   %r12
ffffffffc06ae41f:	53                   	push   %rbx
ffffffffc06ae420:	49 89 fe             	mov    %rdi,%r14
	printk(KERN_ERR "jy: write_end\n");
ffffffffc06ae423:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
{
ffffffffc06ae42a:	89 cb                	mov    %ecx,%ebx
ffffffffc06ae42c:	49 89 f5             	mov    %rsi,%r13
ffffffffc06ae42f:	48 83 ec 10          	sub    $0x10,%rsp
ffffffffc06ae433:	49 89 d4             	mov    %rdx,%r12
ffffffffc06ae436:	44 89 45 d4          	mov    %r8d,-0x2c(%rbp)
ffffffffc06ae43a:	4c 89 4d d8          	mov    %r9,-0x28(%rbp)
	printk(KERN_ERR "jy: write_end\n");
ffffffffc06ae43e:	e8 00 00 00 00       	callq  ffffffffc06ae443 <sfs_write_end+0x33>
	ret = generic_write_end(file, mapping, pos, len, copied, page, fsdata);
ffffffffc06ae443:	4c 8b 4d d8          	mov    -0x28(%rbp),%r9
ffffffffc06ae447:	44 8b 45 d4          	mov    -0x2c(%rbp),%r8d
ffffffffc06ae44b:	4c 89 e2             	mov    %r12,%rdx
ffffffffc06ae44e:	ff 75 10             	pushq  0x10(%rbp)
ffffffffc06ae451:	89 d9                	mov    %ebx,%ecx
ffffffffc06ae453:	4c 89 ee             	mov    %r13,%rsi
ffffffffc06ae456:	4c 89 f7             	mov    %r14,%rdi
ffffffffc06ae459:	e8 00 00 00 00       	callq  ffffffffc06ae45e <sfs_write_end+0x4e>
	if (ret < len)
ffffffffc06ae45e:	39 d8                	cmp    %ebx,%eax
ffffffffc06ae460:	5a                   	pop    %rdx
ffffffffc06ae461:	73 11                	jae    ffffffffc06ae474 <sfs_write_end+0x64>
		sfs_write_failed(mapping, pos + len);
ffffffffc06ae463:	49 8b 7d 00          	mov    0x0(%r13),%rdi
ffffffffc06ae467:	4a 8d 14 23          	lea    (%rbx,%r12,1),%rdx
	if (to > inode->i_size) {
ffffffffc06ae46b:	48 8b 77 50          	mov    0x50(%rdi),%rsi
ffffffffc06ae46f:	48 39 f2             	cmp    %rsi,%rdx
ffffffffc06ae472:	7f 0d                	jg     ffffffffc06ae481 <sfs_write_end+0x71>
}
ffffffffc06ae474:	48 8d 65 e0          	lea    -0x20(%rbp),%rsp
ffffffffc06ae478:	5b                   	pop    %rbx
ffffffffc06ae479:	41 5c                	pop    %r12
ffffffffc06ae47b:	41 5d                	pop    %r13
ffffffffc06ae47d:	41 5e                	pop    %r14
ffffffffc06ae47f:	5d                   	pop    %rbp
ffffffffc06ae480:	c3                   	retq   
ffffffffc06ae481:	89 45 d8             	mov    %eax,-0x28(%rbp)
		truncate_pagecache(inode, inode->i_size);
ffffffffc06ae484:	e8 00 00 00 00       	callq  ffffffffc06ae489 <sfs_write_end+0x79>
ffffffffc06ae489:	8b 45 d8             	mov    -0x28(%rbp),%eax
}
ffffffffc06ae48c:	48 8d 65 e0          	lea    -0x20(%rbp),%rsp
ffffffffc06ae490:	5b                   	pop    %rbx
ffffffffc06ae491:	41 5c                	pop    %r12
ffffffffc06ae493:	41 5d                	pop    %r13
ffffffffc06ae495:	41 5e                	pop    %r14
ffffffffc06ae497:	5d                   	pop    %rbp
ffffffffc06ae498:	c3                   	retq   
ffffffffc06ae499:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffffc06ae4a0 <sfs_get_page.isra.16>:
static struct page *sfs_get_page(struct inode *dir, unsigned long n)
ffffffffc06ae4a0:	e8 00 00 00 00       	callq  ffffffffc06ae4a5 <sfs_get_page.isra.16+0x5>
ffffffffc06ae4a5:	55                   	push   %rbp
ffffffffc06ae4a6:	48 89 e5             	mov    %rsp,%rbp
ffffffffc06ae4a9:	41 54                	push   %r12
ffffffffc06ae4ab:	53                   	push   %rbx
ffffffffc06ae4ac:	49 89 fc             	mov    %rdi,%r12
ffffffffc06ae4af:	48 89 d3             	mov    %rdx,%rbx
	printk(KERN_ERR "jy: get_page %ld %ld\n", dir->i_ino, n);
ffffffffc06ae4b2:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06ae4b9:	e8 00 00 00 00       	callq  ffffffffc06ae4be <sfs_get_page.isra.16+0x1e>
		struct list_head *pages, filler_t *filler, void *data);

static inline struct page *read_mapping_page(struct address_space *mapping,
				pgoff_t index, void *data)
{
	return read_cache_page(mapping, index, NULL, data);
ffffffffc06ae4be:	31 c9                	xor    %ecx,%ecx
ffffffffc06ae4c0:	31 d2                	xor    %edx,%edx
ffffffffc06ae4c2:	48 89 de             	mov    %rbx,%rsi
ffffffffc06ae4c5:	4c 89 e7             	mov    %r12,%rdi
ffffffffc06ae4c8:	e8 00 00 00 00       	callq  ffffffffc06ae4cd <sfs_get_page.isra.16+0x2d>
	if (!IS_ERR(page)) {
ffffffffc06ae4cd:	48 3d 00 f0 ff ff    	cmp    $0xfffffffffffff000,%rax
ffffffffc06ae4d3:	48 89 c3             	mov    %rax,%rbx
ffffffffc06ae4d6:	77 25                	ja     ffffffffc06ae4fd <sfs_get_page.isra.16+0x5d>
		printk(KERN_ERR "jy: get_page0\n");
ffffffffc06ae4d8:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06ae4df:	e8 00 00 00 00       	callq  ffffffffc06ae4e4 <sfs_get_page.isra.16+0x44>
static inline unsigned long totalhigh_pages(void) { return 0UL; }

#ifndef ARCH_HAS_KMAP
static inline void *kmap(struct page *page)
{
	might_sleep();
ffffffffc06ae4e4:	e8 00 00 00 00       	callq  ffffffffc06ae4e9 <sfs_get_page.isra.16+0x49>
}

static __always_inline bool constant_test_bit(long nr, const volatile unsigned long *addr)
{
	return ((1UL << (nr & (BITS_PER_LONG-1))) &
		(addr[nr >> _BITOPS_LONG_SHIFT])) != 0;
ffffffffc06ae4e9:	48 8b 03             	mov    (%rbx),%rax
		if (unlikely(!PageChecked(page))) {
ffffffffc06ae4ec:	f6 c4 04             	test   $0x4,%ah
ffffffffc06ae4ef:	74 14                	je     ffffffffc06ae505 <sfs_get_page.isra.16+0x65>
		printk(KERN_ERR "jy: get_page1\n");
ffffffffc06ae4f1:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06ae4f8:	e8 00 00 00 00       	callq  ffffffffc06ae4fd <sfs_get_page.isra.16+0x5d>
}
ffffffffc06ae4fd:	48 89 d8             	mov    %rbx,%rax
ffffffffc06ae500:	5b                   	pop    %rbx
ffffffffc06ae501:	41 5c                	pop    %r12
ffffffffc06ae503:	5d                   	pop    %rbp
ffffffffc06ae504:	c3                   	retq   
	__READ_ONCE_SIZE;
ffffffffc06ae505:	48 8b 53 08          	mov    0x8(%rbx),%rdx
ffffffffc06ae509:	48 8d 42 ff          	lea    -0x1(%rdx),%rax
ffffffffc06ae50d:	83 e2 01             	and    $0x1,%edx
ffffffffc06ae510:	48 0f 44 c3          	cmove  %rbx,%rax
ffffffffc06ae514:	48 8b 00             	mov    (%rax),%rax
			if (PageError(page))// || !sfs_check_page(page))
ffffffffc06ae517:	f6 c4 01             	test   $0x1,%ah
ffffffffc06ae51a:	74 d5                	je     ffffffffc06ae4f1 <sfs_get_page.isra.16+0x51>
	printk(KERN_ERR "jy: get_page2\n");
ffffffffc06ae51c:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06ae523:	e8 00 00 00 00       	callq  ffffffffc06ae528 <sfs_get_page.isra.16+0x88>
ffffffffc06ae528:	48 8b 43 08          	mov    0x8(%rbx),%rax
ffffffffc06ae52c:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
ffffffffc06ae530:	a8 01                	test   $0x1,%al
ffffffffc06ae532:	48 0f 45 da          	cmovne %rdx,%rbx
ffffffffc06ae536:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
ffffffffc06ae53b:	f0 ff 4b 34          	lock decl 0x34(%rbx)
	if (put_page_testzero(page))
ffffffffc06ae53f:	74 3b                	je     ffffffffc06ae57c <sfs_get_page.isra.16+0xdc>
	return ERR_PTR(-EIO);
ffffffffc06ae541:	48 c7 c3 fb ff ff ff 	mov    $0xfffffffffffffffb,%rbx
ffffffffc06ae548:	eb b3                	jmp    ffffffffc06ae4fd <sfs_get_page.isra.16+0x5d>
	return (page->flags >> ZONES_PGSHIFT) & ZONES_MASK;
ffffffffc06ae54a:	48 8b 03             	mov    (%rbx),%rax
ffffffffc06ae54d:	48 c1 e8 33          	shr    $0x33,%rax
ffffffffc06ae551:	83 e0 07             	and    $0x7,%eax
	if (!is_zone_device_page(page))
ffffffffc06ae554:	83 f8 04             	cmp    $0x4,%eax
ffffffffc06ae557:	75 e2                	jne    ffffffffc06ae53b <sfs_get_page.isra.16+0x9b>
	switch (page->pgmap->type) {
ffffffffc06ae559:	48 8b 43 08          	mov    0x8(%rbx),%rax
ffffffffc06ae55d:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
ffffffffc06ae563:	83 e8 01             	sub    $0x1,%eax
ffffffffc06ae566:	83 f8 01             	cmp    $0x1,%eax
ffffffffc06ae569:	77 d0                	ja     ffffffffc06ae53b <sfs_get_page.isra.16+0x9b>
		put_devmap_managed_page(page);
ffffffffc06ae56b:	48 89 df             	mov    %rbx,%rdi
ffffffffc06ae56e:	48 c7 c3 fb ff ff ff 	mov    $0xfffffffffffffffb,%rbx
ffffffffc06ae575:	e8 00 00 00 00       	callq  ffffffffc06ae57a <sfs_get_page.isra.16+0xda>
ffffffffc06ae57a:	eb 81                	jmp    ffffffffc06ae4fd <sfs_get_page.isra.16+0x5d>
		__put_page(page);
ffffffffc06ae57c:	48 89 df             	mov    %rbx,%rdi
ffffffffc06ae57f:	48 c7 c3 fb ff ff ff 	mov    $0xfffffffffffffffb,%rbx
ffffffffc06ae586:	e8 00 00 00 00       	callq  ffffffffc06ae58b <sfs_get_page.isra.16+0xeb>
ffffffffc06ae58b:	e9 6d ff ff ff       	jmpq   ffffffffc06ae4fd <sfs_get_page.isra.16+0x5d>

ffffffffc06ae590 <sfs_msg>:
{
ffffffffc06ae590:	e8 00 00 00 00       	callq  ffffffffc06ae595 <sfs_msg+0x5>
ffffffffc06ae595:	55                   	push   %rbp
ffffffffc06ae596:	48 89 e5             	mov    %rsp,%rbp
ffffffffc06ae599:	41 52                	push   %r10
ffffffffc06ae59b:	4c 8d 55 10          	lea    0x10(%rbp),%r10
ffffffffc06ae59f:	48 83 ec 60          	sub    $0x60,%rsp
ffffffffc06ae5a3:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
	printk("%sSFS(%s): %pV\n", level, funtion, &vaf);
ffffffffc06ae5a7:	48 8d 4d 98          	lea    -0x68(%rbp),%rcx
{
ffffffffc06ae5ab:	65 48 8b 04 25 28 00 	mov    %gs:0x28,%rax
ffffffffc06ae5b2:	00 00 
ffffffffc06ae5b4:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
ffffffffc06ae5b8:	31 c0                	xor    %eax,%eax
	va_start(args, fmt);
ffffffffc06ae5ba:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
	vaf.fmt = fmt;
ffffffffc06ae5be:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
	printk("%sSFS(%s): %pV\n", level, funtion, &vaf);
ffffffffc06ae5c2:	48 89 f2             	mov    %rsi,%rdx
ffffffffc06ae5c5:	48 89 fe             	mov    %rdi,%rsi
ffffffffc06ae5c8:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
{
ffffffffc06ae5cf:	4c 89 45 e8          	mov    %r8,-0x18(%rbp)
	va_start(args, fmt);
ffffffffc06ae5d3:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	vaf.va = &args;
ffffffffc06ae5d7:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
{
ffffffffc06ae5db:	4c 89 4d f0          	mov    %r9,-0x10(%rbp)
	va_start(args, fmt);
ffffffffc06ae5df:	c7 45 a8 18 00 00 00 	movl   $0x18,-0x58(%rbp)
ffffffffc06ae5e6:	4c 89 55 b0          	mov    %r10,-0x50(%rbp)
	vaf.va = &args;
ffffffffc06ae5ea:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
	printk("%sSFS(%s): %pV\n", level, funtion, &vaf);
ffffffffc06ae5ee:	e8 00 00 00 00       	callq  ffffffffc06ae5f3 <sfs_msg+0x63>
}
ffffffffc06ae5f3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffffc06ae5f7:	65 48 33 04 25 28 00 	xor    %gs:0x28,%rax
ffffffffc06ae5fe:	00 00 
ffffffffc06ae600:	75 08                	jne    ffffffffc06ae60a <sfs_msg+0x7a>
ffffffffc06ae602:	48 83 c4 60          	add    $0x60,%rsp
ffffffffc06ae606:	41 5a                	pop    %r10
ffffffffc06ae608:	5d                   	pop    %rbp
ffffffffc06ae609:	c3                   	retq   
ffffffffc06ae60a:	e8 00 00 00 00       	callq  ffffffffc06ae60f <sfs_msg+0x7f>
ffffffffc06ae60f:	90                   	nop

ffffffffc06ae610 <sfs_readdir>:
	unsigned int offset = pos & ~PAGE_MASK;
ffffffffc06ae610:	e8 00 00 00 00       	callq  ffffffffc06ae615 <sfs_readdir+0x5>
ffffffffc06ae615:	55                   	push   %rbp
ffffffffc06ae616:	48 89 e5             	mov    %rsp,%rbp
ffffffffc06ae619:	41 57                	push   %r15
ffffffffc06ae61b:	41 56                	push   %r14
ffffffffc06ae61d:	41 55                	push   %r13
ffffffffc06ae61f:	41 54                	push   %r12
ffffffffc06ae621:	49 89 fe             	mov    %rdi,%r14
ffffffffc06ae624:	53                   	push   %rbx
ffffffffc06ae625:	48 83 ec 28          	sub    $0x28,%rsp
	unsigned long npages = dir_pages(inode);
ffffffffc06ae629:	48 8b 5f 20          	mov    0x20(%rdi),%rbx
	unsigned long n = pos >> PAGE_SHIFT;
ffffffffc06ae62d:	4c 8b 66 08          	mov    0x8(%rsi),%r12
	unsigned int offset = pos & ~PAGE_MASK;
ffffffffc06ae631:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
			file->f_path.dentry->d_name.name, file->f_inode->i_ino, npages, pos);
ffffffffc06ae635:	4c 8b bf b8 00 00 00 	mov    0xb8(%rdi),%r15
	return error;
}

static inline unsigned long dir_pages(struct inode *inode)
{
	return (unsigned long)(inode->i_size + PAGE_SIZE - 1) >>
ffffffffc06ae63c:	48 8b 43 50          	mov    0x50(%rbx),%rax
	if (pos > inode->i_size - SFS_DIR_REC_LEN(1))
ffffffffc06ae640:	48 8b 53 40          	mov    0x40(%rbx),%rdx
ffffffffc06ae644:	4d 89 e0             	mov    %r12,%r8
ffffffffc06ae647:	4c 8b ab 48 01 00 00 	mov    0x148(%rbx),%r13
ffffffffc06ae64e:	48 05 ff 0f 00 00    	add    $0xfff,%rax
ffffffffc06ae654:	48 c1 e8 0c          	shr    $0xc,%rax
ffffffffc06ae658:	48 89 c1             	mov    %rax,%rcx
ffffffffc06ae65b:	48 8b 47 18          	mov    0x18(%rdi),%rax
ffffffffc06ae65f:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06ae666:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
ffffffffc06ae66a:	48 8b 70 28          	mov    0x28(%rax),%rsi
ffffffffc06ae66e:	e8 00 00 00 00       	callq  ffffffffc06ae673 <sfs_readdir+0x63>
	for ( ; n < npages; n++, offset = 0) {
ffffffffc06ae673:	48 8b 43 50          	mov    0x50(%rbx),%rax
ffffffffc06ae677:	48 83 e8 0c          	sub    $0xc,%rax
ffffffffc06ae67b:	4c 39 e0             	cmp    %r12,%rax
ffffffffc06ae67e:	0f 8c 46 01 00 00    	jl     ffffffffc06ae7ca <sfs_readdir+0x1ba>

ffffffffc06ae684:	4c 89 e0             	mov    %r12,%rax
ffffffffc06ae687:	48 c1 f8 0c          	sar    $0xc,%rax

ffffffffc06ae68b:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax

ffffffffc06ae68f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)

ffffffffc06ae693:	0f 83 31 01 00 00    	jae    ffffffffc06ae7ca <sfs_readdir+0x1ba>
 * viewed, as the result won't be used to gauge changes from that point.
 */
static inline u64
inode_peek_iversion(const struct inode *inode)
{
	return inode_peek_iversion_raw(inode) >> I_VERSION_QUERIED_SHIFT;
ffffffffc06ae699:	49 d1 ed             	shr    %r13
	bool need_revalidate = !inode_eq_iversion(inode, file->f_version);
ffffffffc06ae69c:	41 81 e4 ff 0f 00 00 	and    $0xfff,%r12d
			file->f_path.dentry->d_name.name, file->f_inode->i_ino, npages, pos);
ffffffffc06ae6a3:	4d 39 fd             	cmp    %r15,%r13
ffffffffc06ae6a6:	0f 95 45 b8          	setne  -0x48(%rbp)
			sfs_msg(KERN_ERR, "sfs_readdir", "bad page in %lu", inode->i_ino);
ffffffffc06ae6aa:	48 8b 73 40          	mov    0x40(%rbx),%rsi
ffffffffc06ae6ae:	48 8b 7b 30          	mov    0x30(%rbx),%rdi
ffffffffc06ae6b2:	45 89 e5             	mov    %r12d,%r13d
ffffffffc06ae6b5:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffffc06ae6b9:	e8 e2 fd ff ff       	callq  ffffffffc06ae4a0 <sfs_get_page.isra.16>
			return -EIO;
ffffffffc06ae6be:	48 3d 00 f0 ff ff    	cmp    $0xfffffffffffff000,%rax
			sfs_msg(KERN_ERR, "sfs_readdir", "bad page in %lu", inode->i_ino);
ffffffffc06ae6c4:	49 89 c7             	mov    %rax,%r15
			return -EIO;
ffffffffc06ae6c7:	0f 87 49 01 00 00    	ja     ffffffffc06ae816 <sfs_readdir+0x206>
			if (offset) {
ffffffffc06ae6cd:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06ae6d4:	e8 00 00 00 00       	callq  ffffffffc06ae6d9 <sfs_readdir+0xc9>
 */
#include <linux/vmstat.h>

static __always_inline void *lowmem_page_address(const struct page *page)
{
	return page_to_virt(page);
ffffffffc06ae6d9:	4c 89 fa             	mov    %r15,%rdx
ffffffffc06ae6dc:	48 2b 15 00 00 00 00 	sub    0x0(%rip),%rdx        # ffffffffc06ae6e3 <sfs_readdir+0xd3>
ffffffffc06ae6e3:	48 c1 fa 06          	sar    $0x6,%rdx
ffffffffc06ae6e7:	48 c1 e2 0c          	shl    $0xc,%rdx
ffffffffc06ae6eb:	48 03 15 00 00 00 00 	add    0x0(%rip),%rdx        # ffffffffc06ae6f2 <sfs_readdir+0xe2>
				//jy
ffffffffc06ae6f2:	80 7d b8 00          	cmpb   $0x0,-0x48(%rbp)
ffffffffc06ae6f6:	0f 85 5b 01 00 00    	jne    ffffffffc06ae857 <sfs_readdir+0x247>
	last_byte -= page_nr << PAGE_SHIFT;
ffffffffc06ae6fc:	8b 45 d0             	mov    -0x30(%rbp),%eax
ffffffffc06ae6ff:	8b 7b 50             	mov    0x50(%rbx),%edi
			if (de->rec_len == 0) {
ffffffffc06ae702:	49 01 d5             	add    %rdx,%r13
				sfs_msg(KERN_ERR, "sfs_find_entry", "zero-length diretory entry");
ffffffffc06ae705:	b9 00 10 00 00       	mov    $0x1000,%ecx
	last_byte -= page_nr << PAGE_SHIFT;
ffffffffc06ae70a:	c1 e0 0c             	shl    $0xc,%eax
ffffffffc06ae70d:	29 c7                	sub    %eax,%edi
ffffffffc06ae70f:	89 f8                	mov    %edi,%eax
				sfs_msg(KERN_ERR, "sfs_find_entry", "zero-length diretory entry");
ffffffffc06ae711:	3d 00 10 00 00       	cmp    $0x1000,%eax
ffffffffc06ae716:	48 0f 47 c1          	cmova  %rcx,%rax
ffffffffc06ae71a:	4c 8d 64 02 f4       	lea    -0xc(%rdx,%rax,1),%r12
				sfs_put_page(page);
ffffffffc06ae71f:	4d 39 e5             	cmp    %r12,%r13
ffffffffc06ae722:	77 6a                	ja     ffffffffc06ae78e <sfs_readdir+0x17e>
				return -EIO;
ffffffffc06ae724:	66 41 83 7d 04 00    	cmpw   $0x0,0x4(%r13)
ffffffffc06ae72a:	0f 85 a6 01 00 00    	jne    ffffffffc06ae8d6 <sfs_readdir+0x2c6>
			}
ffffffffc06ae730:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
ffffffffc06ae737:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
ffffffffc06ae73e:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06ae745:	e8 00 00 00 00       	callq  ffffffffc06ae74a <sfs_readdir+0x13a>
ffffffffc06ae74a:	49 8b 47 08          	mov    0x8(%r15),%rax
ffffffffc06ae74e:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
ffffffffc06ae752:	a8 01                	test   $0x1,%al
ffffffffc06ae754:	4c 0f 45 fa          	cmovne %rdx,%r15
ffffffffc06ae758:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
ffffffffc06ae75d:	f0 41 ff 4f 34       	lock decl 0x34(%r15)
			if (de->inode) {
ffffffffc06ae762:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
	if (put_page_testzero(page))
ffffffffc06ae767:	75 0e                	jne    ffffffffc06ae777 <sfs_readdir+0x167>
		__put_page(page);
ffffffffc06ae769:	4c 89 ff             	mov    %r15,%rdi
ffffffffc06ae76c:	89 45 d0             	mov    %eax,-0x30(%rbp)
ffffffffc06ae76f:	e8 00 00 00 00       	callq  ffffffffc06ae774 <sfs_readdir+0x164>
ffffffffc06ae774:	8b 45 d0             	mov    -0x30(%rbp),%eax
        .llseek         = generic_file_llseek,
ffffffffc06ae777:	48 83 c4 28          	add    $0x28,%rsp
ffffffffc06ae77b:	5b                   	pop    %rbx
ffffffffc06ae77c:	41 5c                	pop    %r12
ffffffffc06ae77e:	41 5d                	pop    %r13
ffffffffc06ae780:	41 5e                	pop    %r14
ffffffffc06ae782:	41 5f                	pop    %r15
ffffffffc06ae784:	5d                   	pop    %rbp
ffffffffc06ae785:	c3                   	retq   
ffffffffc06ae786:	48 8b 5d b8          	mov    -0x48(%rbp),%rbx
ffffffffc06ae78a:	4c 8b 75 b0          	mov    -0x50(%rbp),%r14
ffffffffc06ae78e:	49 8b 47 08          	mov    0x8(%r15),%rax
ffffffffc06ae792:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
ffffffffc06ae796:	a8 01                	test   $0x1,%al
ffffffffc06ae798:	4c 0f 45 fa          	cmovne %rdx,%r15
ffffffffc06ae79c:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
ffffffffc06ae7a1:	f0 41 ff 4f 34       	lock decl 0x34(%r15)
	if (put_page_testzero(page))
ffffffffc06ae7a6:	75 08                	jne    ffffffffc06ae7b0 <sfs_readdir+0x1a0>
		__put_page(page);
ffffffffc06ae7a8:	4c 89 ff             	mov    %r15,%rdi
ffffffffc06ae7ab:	e8 00 00 00 00       	callq  ffffffffc06ae7b0 <sfs_readdir+0x1a0>

ffffffffc06ae7b0:	48 83 45 d0 01       	addq   $0x1,-0x30(%rbp)
ffffffffc06ae7b5:	45 31 e4             	xor    %r12d,%r12d
ffffffffc06ae7b8:	c6 45 b8 00          	movb   $0x0,-0x48(%rbp)
ffffffffc06ae7bc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffffc06ae7c0:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
ffffffffc06ae7c4:	0f 85 e0 fe ff ff    	jne    ffffffffc06ae6aa <sfs_readdir+0x9a>
        .llseek         = generic_file_llseek,
ffffffffc06ae7ca:	48 83 c4 28          	add    $0x28,%rsp
		char *kaddr, *limit;
ffffffffc06ae7ce:	31 c0                	xor    %eax,%eax
        .llseek         = generic_file_llseek,
ffffffffc06ae7d0:	5b                   	pop    %rbx
ffffffffc06ae7d1:	41 5c                	pop    %r12
ffffffffc06ae7d3:	41 5d                	pop    %r13
ffffffffc06ae7d5:	41 5e                	pop    %r14
ffffffffc06ae7d7:	41 5f                	pop    %r15
ffffffffc06ae7d9:	5d                   	pop    %rbp
ffffffffc06ae7da:	c3                   	retq   
	return (page->flags >> ZONES_PGSHIFT) & ZONES_MASK;
ffffffffc06ae7db:	49 8b 07             	mov    (%r15),%rax
ffffffffc06ae7de:	48 c1 e8 33          	shr    $0x33,%rax
ffffffffc06ae7e2:	83 e0 07             	and    $0x7,%eax
	if (!is_zone_device_page(page))
ffffffffc06ae7e5:	83 f8 04             	cmp    $0x4,%eax
ffffffffc06ae7e8:	0f 85 6f ff ff ff    	jne    ffffffffc06ae75d <sfs_readdir+0x14d>
	switch (page->pgmap->type) {
ffffffffc06ae7ee:	49 8b 47 08          	mov    0x8(%r15),%rax
ffffffffc06ae7f2:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
ffffffffc06ae7f8:	83 e8 01             	sub    $0x1,%eax
ffffffffc06ae7fb:	83 f8 01             	cmp    $0x1,%eax
ffffffffc06ae7fe:	0f 87 59 ff ff ff    	ja     ffffffffc06ae75d <sfs_readdir+0x14d>
		put_devmap_managed_page(page);
ffffffffc06ae804:	4c 89 ff             	mov    %r15,%rdi
ffffffffc06ae807:	e8 00 00 00 00       	callq  ffffffffc06ae80c <sfs_readdir+0x1fc>
			if (de->inode) {
ffffffffc06ae80c:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
ffffffffc06ae811:	e9 61 ff ff ff       	jmpq   ffffffffc06ae777 <sfs_readdir+0x167>
		}
ffffffffc06ae816:	48 8b 4b 40          	mov    0x40(%rbx),%rcx
ffffffffc06ae81a:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06ae821:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
ffffffffc06ae828:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
ffffffffc06ae82f:	e8 00 00 00 00       	callq  ffffffffc06ae834 <sfs_readdir+0x224>
		printk(KERN_ERR "jy: readdir1\n");
ffffffffc06ae834:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
ffffffffc06ae838:	48 8b 47 08          	mov    0x8(%rdi),%rax
ffffffffc06ae83c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffffc06ae840:	48 05 00 10 00 00    	add    $0x1000,%rax
ffffffffc06ae846:	4c 29 e8             	sub    %r13,%rax
ffffffffc06ae849:	48 89 47 08          	mov    %rax,0x8(%rdi)
		kaddr = page_address(page);
ffffffffc06ae84d:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
ffffffffc06ae852:	e9 20 ff ff ff       	jmpq   ffffffffc06ae777 <sfs_readdir+0x167>
				ctx->pos = (n << PAGE_SHIFT) + offset;
ffffffffc06ae857:	45 85 e4             	test   %r12d,%r12d
ffffffffc06ae85a:	0f 85 c8 00 00 00    	jne    ffffffffc06ae928 <sfs_readdir+0x318>
ffffffffc06ae860:	48 8b 8b 48 01 00 00 	mov    0x148(%rbx),%rcx
	u64 cur, old, new;

	cur = inode_peek_iversion_raw(inode);
	for (;;) {
		/* If flag is already set, then no need to swap */
		if (cur & I_VERSION_QUERIED) {
ffffffffc06ae867:	f6 c1 01             	test   $0x1,%cl
ffffffffc06ae86a:	75 2c                	jne    ffffffffc06ae898 <sfs_readdir+0x288>
			 */
			smp_mb();
			break;
		}

		new = cur | I_VERSION_QUERIED;
ffffffffc06ae86c:	48 89 ce             	mov    %rcx,%rsi
	return xadd(&v->counter, -i);
}

static inline s64 arch_atomic64_cmpxchg(atomic64_t *v, s64 old, s64 new)
{
	return arch_cmpxchg(&v->counter, old, new);
ffffffffc06ae86f:	48 89 c8             	mov    %rcx,%rax
ffffffffc06ae872:	48 83 ce 01          	or     $0x1,%rsi
ffffffffc06ae876:	f0 48 0f b1 b3 48 01 	lock cmpxchg %rsi,0x148(%rbx)
ffffffffc06ae87d:	00 00 
		old = atomic64_cmpxchg(&inode->i_version, cur, new);
		if (likely(old == cur))
ffffffffc06ae87f:	48 39 c1             	cmp    %rax,%rcx
ffffffffc06ae882:	75 0f                	jne    ffffffffc06ae893 <sfs_readdir+0x283>
			break;
		cur = old;
	}
	return cur >> I_VERSION_QUERIED_SHIFT;
ffffffffc06ae884:	48 d1 e9             	shr    %rcx
ffffffffc06ae887:	49 89 8e b8 00 00 00 	mov    %rcx,0xb8(%r14)
ffffffffc06ae88e:	e9 69 fe ff ff       	jmpq   ffffffffc06ae6fc <sfs_readdir+0xec>
		if (likely(old == cur))
ffffffffc06ae893:	48 89 c1             	mov    %rax,%rcx
ffffffffc06ae896:	eb cf                	jmp    ffffffffc06ae867 <sfs_readdir+0x257>
			smp_mb();
ffffffffc06ae898:	f0 83 44 24 fc 00    	lock addl $0x0,-0x4(%rsp)
ffffffffc06ae89e:	eb e4                	jmp    ffffffffc06ae884 <sfs_readdir+0x274>
	return (page->flags >> ZONES_PGSHIFT) & ZONES_MASK;
ffffffffc06ae8a0:	49 8b 07             	mov    (%r15),%rax
ffffffffc06ae8a3:	48 c1 e8 33          	shr    $0x33,%rax
ffffffffc06ae8a7:	83 e0 07             	and    $0x7,%eax
	if (!is_zone_device_page(page))
ffffffffc06ae8aa:	83 f8 04             	cmp    $0x4,%eax
ffffffffc06ae8ad:	0f 85 ee fe ff ff    	jne    ffffffffc06ae7a1 <sfs_readdir+0x191>
	switch (page->pgmap->type) {
ffffffffc06ae8b3:	49 8b 47 08          	mov    0x8(%r15),%rax
ffffffffc06ae8b7:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
ffffffffc06ae8bd:	83 e8 01             	sub    $0x1,%eax
ffffffffc06ae8c0:	83 f8 01             	cmp    $0x1,%eax
ffffffffc06ae8c3:	0f 87 d8 fe ff ff    	ja     ffffffffc06ae7a1 <sfs_readdir+0x191>
		put_devmap_managed_page(page);
ffffffffc06ae8c9:	4c 89 ff             	mov    %r15,%rdi
ffffffffc06ae8cc:	e8 00 00 00 00       	callq  ffffffffc06ae8d1 <sfs_readdir+0x2c1>
ffffffffc06ae8d1:	e9 da fe ff ff       	jmpq   ffffffffc06ae7b0 <sfs_readdir+0x1a0>
ffffffffc06ae8d6:	48 89 5d b8          	mov    %rbx,-0x48(%rbp)
ffffffffc06ae8da:	48 8b 5d c0          	mov    -0x40(%rbp),%rbx
ffffffffc06ae8de:	4c 89 75 b0          	mov    %r14,-0x50(%rbp)

ffffffffc06ae8e2:	4d 8d 75 08          	lea    0x8(%r13),%r14
ffffffffc06ae8e6:	41 8b 75 00          	mov    0x0(%r13),%esi
ffffffffc06ae8ea:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06ae8f1:	4c 89 f2             	mov    %r14,%rdx
ffffffffc06ae8f4:	e8 00 00 00 00       	callq  ffffffffc06ae8f9 <sfs_readdir+0x2e9>
				d_type = fs_ftype_to_dtype(de->file_type);
ffffffffc06ae8f9:	41 83 7d 00 00       	cmpl   $0x0,0x0(%r13)
ffffffffc06ae8fe:	75 54                	jne    ffffffffc06ae954 <sfs_readdir+0x344>
	}
ffffffffc06ae900:	41 0f b7 45 04       	movzwl 0x4(%r13),%eax
ffffffffc06ae905:	48 01 43 08          	add    %rax,0x8(%rbx)
	return (struct sfs_dir_entry *)((char *)p + le16_to_cpu(p->rec_len));
ffffffffc06ae909:	41 0f b7 45 04       	movzwl 0x4(%r13),%eax
ffffffffc06ae90e:	49 01 c5             	add    %rax,%r13
				sfs_put_page(page);
ffffffffc06ae911:	4d 39 ec             	cmp    %r13,%r12
ffffffffc06ae914:	0f 82 6c fe ff ff    	jb     ffffffffc06ae786 <sfs_readdir+0x176>
				return -EIO;
ffffffffc06ae91a:	66 41 83 7d 04 00    	cmpw   $0x0,0x4(%r13)
ffffffffc06ae920:	0f 84 0a fe ff ff    	je     ffffffffc06ae730 <sfs_readdir+0x120>
ffffffffc06ae926:	eb ba                	jmp    ffffffffc06ae8e2 <sfs_readdir+0x2d2>
			}
ffffffffc06ae928:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06ae92f:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
ffffffffc06ae933:	e8 00 00 00 00       	callq  ffffffffc06ae938 <sfs_readdir+0x328>
			need_revalidate = false;
ffffffffc06ae938:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffffc06ae93c:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
ffffffffc06ae940:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffffc06ae944:	48 c1 e0 0c          	shl    $0xc,%rax
ffffffffc06ae948:	4c 01 e8             	add    %r13,%rax
ffffffffc06ae94b:	48 89 47 08          	mov    %rax,0x8(%rdi)
ffffffffc06ae94f:	e9 0c ff ff ff       	jmpq   ffffffffc06ae860 <sfs_readdir+0x250>
						d_type)) {
ffffffffc06ae954:	41 0f b6 7d 07       	movzbl 0x7(%r13),%edi
ffffffffc06ae959:	e8 00 00 00 00       	callq  ffffffffc06ae95e <sfs_readdir+0x34e>
					sfs_put_page(page);
ffffffffc06ae95e:	41 0f b6 55 06       	movzbl 0x6(%r13),%edx

static inline bool dir_emit(struct dir_context *ctx,
			    const char *name, int namelen,
			    u64 ino, unsigned type)
{
	return ctx->actor(ctx, name, namelen, ctx->pos, ino, type) == 0;
ffffffffc06ae963:	45 8b 45 00          	mov    0x0(%r13),%r8d
ffffffffc06ae967:	44 0f b6 c8          	movzbl %al,%r9d
ffffffffc06ae96b:	48 8b 4b 08          	mov    0x8(%rbx),%rcx
ffffffffc06ae96f:	4c 8b 1b             	mov    (%rbx),%r11
ffffffffc06ae972:	4c 89 f6             	mov    %r14,%rsi
ffffffffc06ae975:	48 89 df             	mov    %rbx,%rdi
ffffffffc06ae978:	e8 00 00 00 00       	callq  ffffffffc06ae97d <sfs_readdir+0x36d>
ffffffffc06ae97d:	85 c0                	test   %eax,%eax
ffffffffc06ae97f:	0f 84 7b ff ff ff    	je     ffffffffc06ae900 <sfs_readdir+0x2f0>
	put_page(page);
ffffffffc06ae985:	4c 89 ff             	mov    %r15,%rdi
ffffffffc06ae988:	e8 73 f6 ff ff       	callq  ffffffffc06ae000 <put_page>
			ctx->pos += le16_to_cpu(de->rec_len);
ffffffffc06ae98d:	31 c0                	xor    %eax,%eax
ffffffffc06ae98f:	e9 e3 fd ff ff       	jmpq   ffffffffc06ae777 <sfs_readdir+0x167>
ffffffffc06ae994:	66 90                	xchg   %ax,%ax
ffffffffc06ae996:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffffc06ae99d:	00 00 00 

ffffffffc06ae9a0 <sfs_get_block>:
{
ffffffffc06ae9a0:	e8 00 00 00 00       	callq  ffffffffc06ae9a5 <sfs_get_block+0x5>
ffffffffc06ae9a5:	55                   	push   %rbp
ffffffffc06ae9a6:	48 89 e5             	mov    %rsp,%rbp
ffffffffc06ae9a9:	41 56                	push   %r14
ffffffffc06ae9ab:	41 55                	push   %r13
ffffffffc06ae9ad:	41 54                	push   %r12
ffffffffc06ae9af:	53                   	push   %rbx
ffffffffc06ae9b0:	49 89 fc             	mov    %rdi,%r12
ffffffffc06ae9b3:	48 89 f3             	mov    %rsi,%rbx
ffffffffc06ae9b6:	49 89 d5             	mov    %rdx,%r13
ffffffffc06ae9b9:	89 ca                	mov    %ecx,%edx
ffffffffc06ae9bb:	48 83 ec 18          	sub    $0x18,%rsp
	struct super_block *sb = inode->i_sb;
ffffffffc06ae9bf:	4c 8b 77 28          	mov    0x28(%rdi),%r14
	printk(KERN_ERR "jy: get_block %lld, %d\n", iblock, create);
ffffffffc06ae9c3:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
{
ffffffffc06ae9ca:	65 48 8b 04 25 28 00 	mov    %gs:0x28,%rax
ffffffffc06ae9d1:	00 00 
ffffffffc06ae9d3:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffffc06ae9d7:	31 c0                	xor    %eax,%eax
	unsigned int offsets[4] = {0};
ffffffffc06ae9d9:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
ffffffffc06ae9e0:	00 
ffffffffc06ae9e1:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
ffffffffc06ae9e8:	00 
	printk(KERN_ERR "jy: get_block %lld, %d\n", iblock, create);
ffffffffc06ae9e9:	e8 00 00 00 00       	callq  ffffffffc06ae9ee <sfs_get_block+0x4e>
	if (iblock < direct_blocks) {
ffffffffc06ae9ee:	48 83 fb 0b          	cmp    $0xb,%rbx
ffffffffc06ae9f2:	0f 86 99 00 00 00    	jbe    ffffffffc06aea91 <sfs_get_block+0xf1>
	} else if ((iblock -= direct_blocks) < indirect_blocks) {
ffffffffc06ae9f8:	48 8d 43 f4          	lea    -0xc(%rbx),%rax
ffffffffc06ae9fc:	48 3d ff 03 00 00    	cmp    $0x3ff,%rax
ffffffffc06aea02:	0f 86 f8 00 00 00    	jbe    ffffffffc06aeb00 <sfs_get_block+0x160>
	} else if ((iblock -= indirect_blocks) < double_blocks) {
ffffffffc06aea08:	4c 8d 83 f4 fb ff ff 	lea    -0x40c(%rbx),%r8
ffffffffc06aea0f:	49 81 f8 ff ff 0f 00 	cmp    $0xfffff,%r8
ffffffffc06aea16:	0f 86 3c 01 00 00    	jbe    ffffffffc06aeb58 <sfs_get_block+0x1b8>
	} else if (((iblock -= double_blocks) >> (ptrs_bits * 2)) < ptrs) {
ffffffffc06aea1c:	4c 8d 8b f4 fb ef ff 	lea    -0x10040c(%rbx),%r9
ffffffffc06aea23:	4c 89 c8             	mov    %r9,%rax
ffffffffc06aea26:	48 c1 e8 14          	shr    $0x14,%rax
ffffffffc06aea2a:	48 3d ff 03 00 00    	cmp    $0x3ff,%rax
ffffffffc06aea30:	0f 86 ea 00 00 00    	jbe    ffffffffc06aeb20 <sfs_get_block+0x180>
		sfs_msg(KERN_ERR, "sfs_block_to_path", "block > big");
ffffffffc06aea36:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
ffffffffc06aea3d:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
ffffffffc06aea44:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06aea4b:	e8 00 00 00 00       	callq  ffffffffc06aea50 <sfs_get_block+0xb0>
	printk(KERN_ERR "jy: get_block0 %d %u %u %u %u\n", depth, offsets[0], offsets[1], offsets[2], offsets[3]);
ffffffffc06aea50:	44 8b 4d d4          	mov    -0x2c(%rbp),%r9d
ffffffffc06aea54:	44 8b 45 d0          	mov    -0x30(%rbp),%r8d
ffffffffc06aea58:	31 f6                	xor    %esi,%esi
ffffffffc06aea5a:	8b 4d cc             	mov    -0x34(%rbp),%ecx
ffffffffc06aea5d:	8b 55 c8             	mov    -0x38(%rbp),%edx
ffffffffc06aea60:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06aea67:	e8 00 00 00 00       	callq  ffffffffc06aea6c <sfs_get_block+0xcc>
		return -EIO;
ffffffffc06aea6c:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
}
ffffffffc06aea71:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffffc06aea75:	65 48 33 0c 25 28 00 	xor    %gs:0x28,%rcx
ffffffffc06aea7c:	00 00 
ffffffffc06aea7e:	0f 85 05 01 00 00    	jne    ffffffffc06aeb89 <sfs_get_block+0x1e9>
ffffffffc06aea84:	48 83 c4 18          	add    $0x18,%rsp
ffffffffc06aea88:	5b                   	pop    %rbx
ffffffffc06aea89:	41 5c                	pop    %r12
ffffffffc06aea8b:	41 5d                	pop    %r13
ffffffffc06aea8d:	41 5e                	pop    %r14
ffffffffc06aea8f:	5d                   	pop    %rbp
ffffffffc06aea90:	c3                   	retq   
ffffffffc06aea91:	44 8b 4d d4          	mov    -0x2c(%rbp),%r9d
ffffffffc06aea95:	44 8b 45 d0          	mov    -0x30(%rbp),%r8d
		offsets[n++] = iblock;
ffffffffc06aea99:	89 da                	mov    %ebx,%edx
ffffffffc06aea9b:	8b 4d cc             	mov    -0x34(%rbp),%ecx
ffffffffc06aea9e:	89 5d c8             	mov    %ebx,-0x38(%rbp)
ffffffffc06aeaa1:	bb 01 00 00 00       	mov    $0x1,%ebx
	printk(KERN_ERR "jy: get_block0 %d %u %u %u %u\n", depth, offsets[0], offsets[1], offsets[2], offsets[3]);
ffffffffc06aeaa6:	89 de                	mov    %ebx,%esi
ffffffffc06aeaa8:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06aeaaf:	e8 00 00 00 00       	callq  ffffffffc06aeab4 <sfs_get_block+0x114>
	blkno = sfs_map(inode, offsets, depth);
ffffffffc06aeab4:	48 8d 75 c8          	lea    -0x38(%rbp),%rsi
ffffffffc06aeab8:	89 da                	mov    %ebx,%edx
ffffffffc06aeaba:	4c 89 e7             	mov    %r12,%rdi
ffffffffc06aeabd:	e8 00 00 00 00       	callq  ffffffffc06aeac2 <sfs_get_block+0x122>
	printk(KERN_ERR "jy: get_block1 %u\n", blkno);
ffffffffc06aeac2:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06aeac9:	89 c6                	mov    %eax,%esi
	blkno = sfs_map(inode, offsets, depth);
ffffffffc06aeacb:	89 c3                	mov    %eax,%ebx
	printk(KERN_ERR "jy: get_block1 %u\n", blkno);
ffffffffc06aeacd:	e8 00 00 00 00       	callq  ffffffffc06aead2 <sfs_get_block+0x132>
ffffffffc06aead2:	49 8b 45 00          	mov    0x0(%r13),%rax
BUFFER_FNS(Mapped, mapped)
ffffffffc06aead6:	a8 20                	test   $0x20,%al
ffffffffc06aead8:	75 06                	jne    ffffffffc06aeae0 <sfs_get_block+0x140>
		asm volatile(LOCK_PREFIX "orb %1,%0"
ffffffffc06aeada:	f0 41 80 4d 00 20    	lock orb $0x20,0x0(%r13)

static inline void
map_bh(struct buffer_head *bh, struct super_block *sb, sector_t block)
{
	set_buffer_mapped(bh);
	bh->b_bdev = sb->s_bdev;
ffffffffc06aeae0:	49 8b 86 d8 00 00 00 	mov    0xd8(%r14),%rax
ffffffffc06aeae7:	49 89 45 30          	mov    %rax,0x30(%r13)
	map_bh(bh_result, sb, blkno);
ffffffffc06aeaeb:	89 d8                	mov    %ebx,%eax
ffffffffc06aeaed:	49 89 45 18          	mov    %rax,0x18(%r13)
	bh->b_blocknr = block;
	bh->b_size = sb->s_blocksize;
ffffffffc06aeaf1:	49 8b 46 18          	mov    0x18(%r14),%rax
ffffffffc06aeaf5:	49 89 45 20          	mov    %rax,0x20(%r13)
	return 0;
ffffffffc06aeaf9:	31 c0                	xor    %eax,%eax
ffffffffc06aeafb:	e9 71 ff ff ff       	jmpq   ffffffffc06aea71 <sfs_get_block+0xd1>
		offsets[n++] = SFS_IND_BLOCK;
ffffffffc06aeb00:	c7 45 c8 0c 00 00 00 	movl   $0xc,-0x38(%rbp)
		offsets[n++] = iblock;
ffffffffc06aeb07:	89 c1                	mov    %eax,%ecx
ffffffffc06aeb09:	89 45 cc             	mov    %eax,-0x34(%rbp)
ffffffffc06aeb0c:	44 8b 4d d4          	mov    -0x2c(%rbp),%r9d
ffffffffc06aeb10:	44 8b 45 d0          	mov    -0x30(%rbp),%r8d
ffffffffc06aeb14:	ba 0c 00 00 00       	mov    $0xc,%edx
ffffffffc06aeb19:	bb 02 00 00 00       	mov    $0x2,%ebx
ffffffffc06aeb1e:	eb 86                	jmp    ffffffffc06aeaa6 <sfs_get_block+0x106>
		offsets[n++] = (iblock >> ptrs_bits) & (ptrs - 1);
ffffffffc06aeb20:	4d 89 c8             	mov    %r9,%r8
		offsets[n++] = iblock & (ptrs - 1);
ffffffffc06aeb23:	41 81 e1 ff 03 00 00 	and    $0x3ff,%r9d
		offsets[n++] = SFS_TIND_BLOCK;
ffffffffc06aeb2a:	c7 45 c8 0e 00 00 00 	movl   $0xe,-0x38(%rbp)
		offsets[n++] = (iblock >> ptrs_bits) & (ptrs - 1);
ffffffffc06aeb31:	49 c1 e8 0a          	shr    $0xa,%r8
		offsets[n++] = iblock >> (ptrs_bits * 2);
ffffffffc06aeb35:	89 c1                	mov    %eax,%ecx
ffffffffc06aeb37:	89 45 cc             	mov    %eax,-0x34(%rbp)
		offsets[n++] = (iblock >> ptrs_bits) & (ptrs - 1);
ffffffffc06aeb3a:	41 81 e0 ff 03 00 00 	and    $0x3ff,%r8d
		offsets[n++] = iblock & (ptrs - 1);
ffffffffc06aeb41:	44 89 4d d4          	mov    %r9d,-0x2c(%rbp)
ffffffffc06aeb45:	ba 0e 00 00 00       	mov    $0xe,%edx
		offsets[n++] = (iblock >> ptrs_bits) & (ptrs - 1);
ffffffffc06aeb4a:	44 89 45 d0          	mov    %r8d,-0x30(%rbp)
		offsets[n++] = iblock & (ptrs - 1);
ffffffffc06aeb4e:	bb 04 00 00 00       	mov    $0x4,%ebx
ffffffffc06aeb53:	e9 4e ff ff ff       	jmpq   ffffffffc06aeaa6 <sfs_get_block+0x106>
		offsets[n++] = iblock >> ptrs_bits;
ffffffffc06aeb58:	4c 89 c0             	mov    %r8,%rax
		offsets[n++] = iblock & (ptrs - 1);
ffffffffc06aeb5b:	41 81 e0 ff 03 00 00 	and    $0x3ff,%r8d
		offsets[n++] = SFS_DIND_BLOCK;
ffffffffc06aeb62:	c7 45 c8 0d 00 00 00 	movl   $0xd,-0x38(%rbp)
		offsets[n++] = iblock >> ptrs_bits;
ffffffffc06aeb69:	48 c1 e8 0a          	shr    $0xa,%rax
		offsets[n++] = iblock & (ptrs - 1);
ffffffffc06aeb6d:	44 89 45 d0          	mov    %r8d,-0x30(%rbp)
ffffffffc06aeb71:	44 8b 4d d4          	mov    -0x2c(%rbp),%r9d
		offsets[n++] = iblock >> ptrs_bits;
ffffffffc06aeb75:	89 c1                	mov    %eax,%ecx
ffffffffc06aeb77:	89 45 cc             	mov    %eax,-0x34(%rbp)
		offsets[n++] = iblock & (ptrs - 1);
ffffffffc06aeb7a:	ba 0d 00 00 00       	mov    $0xd,%edx
ffffffffc06aeb7f:	bb 03 00 00 00       	mov    $0x3,%ebx
ffffffffc06aeb84:	e9 1d ff ff ff       	jmpq   ffffffffc06aeaa6 <sfs_get_block+0x106>
}
ffffffffc06aeb89:	e8 00 00 00 00       	callq  ffffffffc06aeb8e <sfs_get_block+0x1ee>
ffffffffc06aeb8e:	66 90                	xchg   %ax,%ax

ffffffffc06aeb90 <sfs_prepare_chunk>:
{
ffffffffc06aeb90:	e8 00 00 00 00       	callq  ffffffffc06aeb95 <sfs_prepare_chunk+0x5>
ffffffffc06aeb95:	55                   	push   %rbp
	return __block_write_begin(page, pos, len, sfs_get_block);
ffffffffc06aeb96:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
{
ffffffffc06aeb9d:	48 89 e5             	mov    %rsp,%rbp
	return __block_write_begin(page, pos, len, sfs_get_block);
ffffffffc06aeba0:	e8 00 00 00 00       	callq  ffffffffc06aeba5 <sfs_prepare_chunk+0x15>
}
ffffffffc06aeba5:	5d                   	pop    %rbp
ffffffffc06aeba6:	c3                   	retq   
ffffffffc06aeba7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffffc06aebae:	00 00 

ffffffffc06aebb0 <sfs_find_entry>:
{
ffffffffc06aebb0:	e8 00 00 00 00       	callq  ffffffffc06aebb5 <sfs_find_entry+0x5>
ffffffffc06aebb5:	55                   	push   %rbp
ffffffffc06aebb6:	48 89 e5             	mov    %rsp,%rbp
ffffffffc06aebb9:	41 57                	push   %r15
ffffffffc06aebbb:	41 56                	push   %r14
ffffffffc06aebbd:	41 55                	push   %r13
ffffffffc06aebbf:	41 54                	push   %r12
ffffffffc06aebc1:	49 89 fe             	mov    %rdi,%r14
ffffffffc06aebc4:	53                   	push   %rbx
ffffffffc06aebc5:	48 83 ec 38          	sub    $0x38,%rsp
	int namelen = qstr->len;
ffffffffc06aebc9:	44 8b 6e 04          	mov    0x4(%rsi),%r13d
	const unsigned char *name = qstr->name;
ffffffffc06aebcd:	48 8b 5e 08          	mov    0x8(%rsi),%rbx
{
ffffffffc06aebd1:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	printk(KERN_ERR "jy: find_entry %s, %ld\n", name, dir->i_ino);
ffffffffc06aebd5:	48 8b 57 40          	mov    0x40(%rdi),%rdx
	unsigned reclen = SFS_DIR_REC_LEN(namelen);
ffffffffc06aebd9:	41 8d 45 0b          	lea    0xb(%r13),%eax
	printk(KERN_ERR "jy: find_entry %s, %ld\n", name, dir->i_ino);
ffffffffc06aebdd:	48 89 de             	mov    %rbx,%rsi
	const unsigned char *name = qstr->name;
ffffffffc06aebe0:	48 89 5d c0          	mov    %rbx,-0x40(%rbp)
	unsigned reclen = SFS_DIR_REC_LEN(namelen);
ffffffffc06aebe4:	83 e0 fc             	and    $0xfffffffc,%eax
ffffffffc06aebe7:	89 45 d0             	mov    %eax,-0x30(%rbp)
ffffffffc06aebea:	48 8b 47 50          	mov    0x50(%rdi),%rax
	printk(KERN_ERR "jy: find_entry %s, %ld\n", name, dir->i_ino);
ffffffffc06aebee:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06aebf5:	4c 8d a0 ff 0f 00 00 	lea    0xfff(%rax),%r12
ffffffffc06aebfc:	e8 00 00 00 00       	callq  ffffffffc06aec01 <sfs_find_entry+0x51>
ffffffffc06aec01:	49 c1 ec 0c          	shr    $0xc,%r12
	if (npages == 0 || namelen > SFS_MAXNAME_LEN)
ffffffffc06aec05:	4d 85 e4             	test   %r12,%r12
ffffffffc06aec08:	0f 84 eb 00 00 00    	je     ffffffffc06aecf9 <sfs_find_entry+0x149>
ffffffffc06aec0e:	41 81 fd ff 00 00 00 	cmp    $0xff,%r13d
ffffffffc06aec15:	0f 8f de 00 00 00    	jg     ffffffffc06aecf9 <sfs_find_entry+0x149>
	*res_page = NULL;
ffffffffc06aec1b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
				printk(KERN_ERR "jy: find_entry4: %d/%s\n", de->inode, de->name);
ffffffffc06aec1f:	44 89 6d b8          	mov    %r13d,-0x48(%rbp)
ffffffffc06aec23:	4d 89 e5             	mov    %r12,%r13
	*res_page = NULL;
ffffffffc06aec26:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	start = si->i_dir_start_lookup;
ffffffffc06aec2d:	45 8b 56 f8          	mov    -0x8(%r14),%r10d
		start = 0;
ffffffffc06aec31:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffffc06aec36:	4d 39 e2             	cmp    %r12,%r10
ffffffffc06aec39:	4c 0f 43 d0          	cmovae %rax,%r10
	n = start;
ffffffffc06aec3d:	4d 89 d7             	mov    %r10,%r15
				printk(KERN_ERR "jy: find_entry4: %d/%s\n", de->inode, de->name);
ffffffffc06aec40:	4d 89 d4             	mov    %r10,%r12
		page = sfs_get_page(dir, n);
ffffffffc06aec43:	49 8b 76 40          	mov    0x40(%r14),%rsi
ffffffffc06aec47:	49 8b 7e 30          	mov    0x30(%r14),%rdi
ffffffffc06aec4b:	4c 89 fa             	mov    %r15,%rdx
ffffffffc06aec4e:	e8 4d f8 ff ff       	callq  ffffffffc06ae4a0 <sfs_get_page.isra.16>
		if (!IS_ERR(page)) {
ffffffffc06aec53:	48 3d 00 f0 ff ff    	cmp    $0xfffffffffffff000,%rax
		page = sfs_get_page(dir, n);
ffffffffc06aec59:	48 89 c1             	mov    %rax,%rcx
		if (!IS_ERR(page)) {
ffffffffc06aec5c:	0f 87 03 01 00 00    	ja     ffffffffc06aed65 <sfs_find_entry+0x1b5>
	return page_to_virt(page);
ffffffffc06aec62:	48 89 c2             	mov    %rax,%rdx
ffffffffc06aec65:	48 2b 15 00 00 00 00 	sub    0x0(%rip),%rdx        # ffffffffc06aec6c <sfs_find_entry+0xbc>
	last_byte -= page_nr << PAGE_SHIFT;
ffffffffc06aec6c:	41 8b 7e 50          	mov    0x50(%r14),%edi
ffffffffc06aec70:	44 89 f8             	mov    %r15d,%eax
			kaddr += sfs_last_byte(dir, n) - reclen;
ffffffffc06aec73:	bb 00 10 00 00       	mov    $0x1000,%ebx
	last_byte -= page_nr << PAGE_SHIFT;
ffffffffc06aec78:	c1 e0 0c             	shl    $0xc,%eax
ffffffffc06aec7b:	29 c7                	sub    %eax,%edi
ffffffffc06aec7d:	48 c1 fa 06          	sar    $0x6,%rdx
ffffffffc06aec81:	89 f8                	mov    %edi,%eax
ffffffffc06aec83:	48 c1 e2 0c          	shl    $0xc,%rdx
ffffffffc06aec87:	48 03 15 00 00 00 00 	add    0x0(%rip),%rdx        # ffffffffc06aec8e <sfs_find_entry+0xde>
			kaddr += sfs_last_byte(dir, n) - reclen;
ffffffffc06aec8e:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
ffffffffc06aec94:	0f 47 c3             	cmova  %ebx,%eax
ffffffffc06aec97:	2b 45 d0             	sub    -0x30(%rbp),%eax
			de = (struct sfs_dir_entry *)(kaddr + SFS_DENTRY_OFFSET);
ffffffffc06aec9a:	4c 8d 5a 20          	lea    0x20(%rdx),%r11
			kaddr += sfs_last_byte(dir, n) - reclen;
ffffffffc06aec9e:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
			while ((char *) de <= kaddr) {
ffffffffc06aeca2:	49 39 db             	cmp    %rbx,%r11
ffffffffc06aeca5:	0f 87 99 00 00 00    	ja     ffffffffc06aed44 <sfs_find_entry+0x194>
				if (de->rec_len == 0) {
ffffffffc06aecab:	66 83 7a 24 00       	cmpw   $0x0,0x24(%rdx)
ffffffffc06aecb0:	0f 85 07 01 00 00    	jne    ffffffffc06aedbd <sfs_find_entry+0x20d>
					sfs_msg(KERN_ERR, "sfs_find_entry", "zero-length diretory entry");
ffffffffc06aecb6:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
ffffffffc06aecbd:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
ffffffffc06aecc4:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06aeccb:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
ffffffffc06aeccf:	e8 00 00 00 00       	callq  ffffffffc06aecd4 <sfs_find_entry+0x124>
ffffffffc06aecd4:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
ffffffffc06aecd8:	48 8b 41 08          	mov    0x8(%rcx),%rax
ffffffffc06aecdc:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
ffffffffc06aece0:	a8 01                	test   $0x1,%al
ffffffffc06aece2:	48 0f 45 ca          	cmovne %rdx,%rcx
ffffffffc06aece6:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
ffffffffc06aeceb:	f0 ff 49 34          	lock decl 0x34(%rcx)
	if (put_page_testzero(page))
ffffffffc06aecef:	75 08                	jne    ffffffffc06aecf9 <sfs_find_entry+0x149>
		__put_page(page);
ffffffffc06aecf1:	48 89 cf             	mov    %rcx,%rdi
ffffffffc06aecf4:	e8 00 00 00 00       	callq  ffffffffc06aecf9 <sfs_find_entry+0x149>
	return NULL;
ffffffffc06aecf9:	45 31 db             	xor    %r11d,%r11d
}
ffffffffc06aecfc:	48 83 c4 38          	add    $0x38,%rsp
ffffffffc06aed00:	4c 89 d8             	mov    %r11,%rax
ffffffffc06aed03:	5b                   	pop    %rbx
ffffffffc06aed04:	41 5c                	pop    %r12
ffffffffc06aed06:	41 5d                	pop    %r13
ffffffffc06aed08:	41 5e                	pop    %r14
ffffffffc06aed0a:	41 5f                	pop    %r15
ffffffffc06aed0c:	5d                   	pop    %rbp
ffffffffc06aed0d:	c3                   	retq   
	return (page->flags >> ZONES_PGSHIFT) & ZONES_MASK;
ffffffffc06aed0e:	48 8b 01             	mov    (%rcx),%rax
ffffffffc06aed11:	48 c1 e8 33          	shr    $0x33,%rax
ffffffffc06aed15:	83 e0 07             	and    $0x7,%eax
	if (!is_zone_device_page(page))
ffffffffc06aed18:	83 f8 04             	cmp    $0x4,%eax
ffffffffc06aed1b:	75 ce                	jne    ffffffffc06aeceb <sfs_find_entry+0x13b>
	switch (page->pgmap->type) {
ffffffffc06aed1d:	48 8b 41 08          	mov    0x8(%rcx),%rax
ffffffffc06aed21:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
ffffffffc06aed27:	83 e8 01             	sub    $0x1,%eax
ffffffffc06aed2a:	83 f8 01             	cmp    $0x1,%eax
ffffffffc06aed2d:	77 bc                	ja     ffffffffc06aeceb <sfs_find_entry+0x13b>
		put_devmap_managed_page(page);
ffffffffc06aed2f:	48 89 cf             	mov    %rcx,%rdi
ffffffffc06aed32:	e8 00 00 00 00       	callq  ffffffffc06aed37 <sfs_find_entry+0x187>
	return NULL;
ffffffffc06aed37:	45 31 db             	xor    %r11d,%r11d
ffffffffc06aed3a:	eb c0                	jmp    ffffffffc06aecfc <sfs_find_entry+0x14c>
ffffffffc06aed3c:	4c 8b 65 a8          	mov    -0x58(%rbp),%r12
ffffffffc06aed40:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
ffffffffc06aed44:	48 8b 41 08          	mov    0x8(%rcx),%rax
ffffffffc06aed48:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
ffffffffc06aed4c:	a8 01                	test   $0x1,%al
ffffffffc06aed4e:	48 0f 45 ca          	cmovne %rdx,%rcx
ffffffffc06aed52:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
ffffffffc06aed57:	f0 ff 49 34          	lock decl 0x34(%rcx)
	if (put_page_testzero(page))
ffffffffc06aed5b:	75 08                	jne    ffffffffc06aed65 <sfs_find_entry+0x1b5>
		__put_page(page);
ffffffffc06aed5d:	48 89 cf             	mov    %rcx,%rdi
ffffffffc06aed60:	e8 00 00 00 00       	callq  ffffffffc06aed65 <sfs_find_entry+0x1b5>
		if (++n >= npages)
ffffffffc06aed65:	49 83 c7 01          	add    $0x1,%r15
			n = 0;
ffffffffc06aed69:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffffc06aed6e:	4d 39 ef             	cmp    %r13,%r15
ffffffffc06aed71:	4c 0f 43 f8          	cmovae %rax,%r15
	} while (n != start);
ffffffffc06aed75:	4d 39 fc             	cmp    %r15,%r12
ffffffffc06aed78:	0f 85 c5 fe ff ff    	jne    ffffffffc06aec43 <sfs_find_entry+0x93>
	printk(KERN_ERR "jy: find_entry5\n");
ffffffffc06aed7e:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06aed85:	e8 00 00 00 00       	callq  ffffffffc06aed8a <sfs_find_entry+0x1da>
	return NULL;
ffffffffc06aed8a:	45 31 db             	xor    %r11d,%r11d
ffffffffc06aed8d:	e9 6a ff ff ff       	jmpq   ffffffffc06aecfc <sfs_find_entry+0x14c>
	return (page->flags >> ZONES_PGSHIFT) & ZONES_MASK;
ffffffffc06aed92:	48 8b 01             	mov    (%rcx),%rax
ffffffffc06aed95:	48 c1 e8 33          	shr    $0x33,%rax
ffffffffc06aed99:	83 e0 07             	and    $0x7,%eax
	if (!is_zone_device_page(page))
ffffffffc06aed9c:	83 f8 04             	cmp    $0x4,%eax
ffffffffc06aed9f:	75 b6                	jne    ffffffffc06aed57 <sfs_find_entry+0x1a7>
	switch (page->pgmap->type) {
ffffffffc06aeda1:	48 8b 41 08          	mov    0x8(%rcx),%rax
ffffffffc06aeda5:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
ffffffffc06aedab:	83 e8 01             	sub    $0x1,%eax
ffffffffc06aedae:	83 f8 01             	cmp    $0x1,%eax
ffffffffc06aedb1:	77 a4                	ja     ffffffffc06aed57 <sfs_find_entry+0x1a7>
		put_devmap_managed_page(page);
ffffffffc06aedb3:	48 89 cf             	mov    %rcx,%rdi
ffffffffc06aedb6:	e8 00 00 00 00       	callq  ffffffffc06aedbb <sfs_find_entry+0x20b>
ffffffffc06aedbb:	eb a8                	jmp    ffffffffc06aed65 <sfs_find_entry+0x1b5>
ffffffffc06aedbd:	4c 89 65 a8          	mov    %r12,-0x58(%rbp)
ffffffffc06aedc1:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
ffffffffc06aedc5:	4d 89 dc             	mov    %r11,%r12
ffffffffc06aedc8:	44 89 7d a4          	mov    %r15d,-0x5c(%rbp)
				printk(KERN_ERR "jy: find_entry4: %d/%s\n", de->inode, de->name);
ffffffffc06aedcc:	41 8b 34 24          	mov    (%r12),%esi
ffffffffc06aedd0:	49 8d 54 24 08       	lea    0x8(%r12),%rdx
ffffffffc06aedd5:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06aeddc:	e8 00 00 00 00       	callq  ffffffffc06aede1 <sfs_find_entry+0x231>
	if (len != de->name_len)
ffffffffc06aede1:	41 0f b6 44 24 06    	movzbl 0x6(%r12),%eax
ffffffffc06aede7:	39 45 b8             	cmp    %eax,-0x48(%rbp)
ffffffffc06aedea:	74 24                	je     ffffffffc06aee10 <sfs_find_entry+0x260>
	return (struct sfs_dir_entry *)((char *)p + le16_to_cpu(p->rec_len));
ffffffffc06aedec:	41 0f b7 44 24 04    	movzwl 0x4(%r12),%eax
ffffffffc06aedf2:	49 01 c4             	add    %rax,%r12
			while ((char *) de <= kaddr) {
ffffffffc06aedf5:	4c 39 e3             	cmp    %r12,%rbx
ffffffffc06aedf8:	0f 82 3e ff ff ff    	jb     ffffffffc06aed3c <sfs_find_entry+0x18c>
				if (de->rec_len == 0) {
ffffffffc06aedfe:	66 41 83 7c 24 04 00 	cmpw   $0x0,0x4(%r12)
ffffffffc06aee05:	75 c5                	jne    ffffffffc06aedcc <sfs_find_entry+0x21c>
ffffffffc06aee07:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
ffffffffc06aee0b:	e9 a6 fe ff ff       	jmpq   ffffffffc06aecb6 <sfs_find_entry+0x106>
	if (!de->inode)
ffffffffc06aee10:	41 83 3c 24 00       	cmpl   $0x0,(%r12)
ffffffffc06aee15:	74 d5                	je     ffffffffc06aedec <sfs_find_entry+0x23c>
ffffffffc06aee17:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
ffffffffc06aee1b:	8b 7d b8             	mov    -0x48(%rbp),%edi
ffffffffc06aee1e:	4c 89 e2             	mov    %r12,%rdx
ffffffffc06aee21:	e8 00 00 00 00       	callq  ffffffffc06aee26 <sfs_find_entry+0x276>
				if (sfs_match(namelen, name, de))
ffffffffc06aee26:	85 c0                	test   %eax,%eax
ffffffffc06aee28:	74 c2                	je     ffffffffc06aedec <sfs_find_entry+0x23c>
ffffffffc06aee2a:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
ffffffffc06aee2e:	44 8b 45 a4          	mov    -0x5c(%rbp),%r8d
	printk(KERN_ERR "jy: find_entry6\n");
ffffffffc06aee32:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06aee39:	4c 89 65 d0          	mov    %r12,-0x30(%rbp)
ffffffffc06aee3d:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
ffffffffc06aee41:	44 89 45 c0          	mov    %r8d,-0x40(%rbp)
ffffffffc06aee45:	e8 00 00 00 00       	callq  ffffffffc06aee4a <sfs_find_entry+0x29a>
	*res_page = page;
ffffffffc06aee4a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffffc06aee4e:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
	si->i_dir_start_lookup = n;
ffffffffc06aee52:	44 8b 45 c0          	mov    -0x40(%rbp),%r8d
ffffffffc06aee56:	4c 8b 5d d0          	mov    -0x30(%rbp),%r11
	*res_page = page;
ffffffffc06aee5a:	48 89 08             	mov    %rcx,(%rax)
	si->i_dir_start_lookup = n;
ffffffffc06aee5d:	45 89 46 f8          	mov    %r8d,-0x8(%r14)
	return de;
ffffffffc06aee61:	e9 96 fe ff ff       	jmpq   ffffffffc06aecfc <sfs_find_entry+0x14c>
ffffffffc06aee66:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffffc06aee6d:	00 00 00 

ffffffffc06aee70 <sbh_sync_block>:
{
ffffffffc06aee70:	e8 00 00 00 00       	callq  ffffffffc06aee75 <sbh_sync_block+0x5>
	if (sbh) {
ffffffffc06aee75:	48 85 ff             	test   %rdi,%rdi
ffffffffc06aee78:	74 63                	je     ffffffffc06aeedd <sbh_sync_block+0x6d>
		for (i = 0; i < sbh->count; i++)
ffffffffc06aee7a:	8b 07                	mov    (%rdi),%eax
ffffffffc06aee7c:	85 c0                	test   %eax,%eax
ffffffffc06aee7e:	74 5d                	je     ffffffffc06aeedd <sbh_sync_block+0x6d>
{
ffffffffc06aee80:	55                   	push   %rbp
ffffffffc06aee81:	48 89 e5             	mov    %rsp,%rbp
ffffffffc06aee84:	41 55                	push   %r13
ffffffffc06aee86:	41 54                	push   %r12
		for (i = 0; i < sbh->count; i++)
ffffffffc06aee88:	45 31 e4             	xor    %r12d,%r12d
{
ffffffffc06aee8b:	53                   	push   %rbx
ffffffffc06aee8c:	48 89 fb             	mov    %rdi,%rbx
			write_dirty_buffer(sbh->bh[i], 0);
ffffffffc06aee8f:	44 89 e0             	mov    %r12d,%eax
ffffffffc06aee92:	31 f6                	xor    %esi,%esi
		for (i = 0; i < sbh->count; i++)
ffffffffc06aee94:	41 83 c4 01          	add    $0x1,%r12d
			write_dirty_buffer(sbh->bh[i], 0);
ffffffffc06aee98:	48 8b 7c c3 08       	mov    0x8(%rbx,%rax,8),%rdi
ffffffffc06aee9d:	e8 00 00 00 00       	callq  ffffffffc06aeea2 <sbh_sync_block+0x32>
		for (i = 0; i < sbh->count; i++)
ffffffffc06aeea2:	8b 03                	mov    (%rbx),%eax
ffffffffc06aeea4:	44 39 e0             	cmp    %r12d,%eax
ffffffffc06aeea7:	77 e6                	ja     ffffffffc06aee8f <sbh_sync_block+0x1f>
		for (i = 0; i < sbh->count; i++)
ffffffffc06aeea9:	85 c0                	test   %eax,%eax
ffffffffc06aeeab:	74 29                	je     ffffffffc06aeed6 <sbh_sync_block+0x66>
ffffffffc06aeead:	45 31 e4             	xor    %r12d,%r12d
			wait_on_buffer(sbh->bh[i]);
ffffffffc06aeeb0:	44 89 e0             	mov    %r12d,%eax
ffffffffc06aeeb3:	4c 8b 6c c3 08       	mov    0x8(%rbx,%rax,8),%r13
}

static inline void wait_on_buffer(struct buffer_head *bh)
{
	might_sleep();
ffffffffc06aeeb8:	e8 00 00 00 00       	callq  ffffffffc06aeebd <sbh_sync_block+0x4d>
		(addr[nr >> _BITOPS_LONG_SHIFT])) != 0;
ffffffffc06aeebd:	49 8b 45 00          	mov    0x0(%r13),%rax
	if (buffer_locked(bh))
ffffffffc06aeec1:	a8 04                	test   $0x4,%al
ffffffffc06aeec3:	74 08                	je     ffffffffc06aeecd <sbh_sync_block+0x5d>
		__wait_on_buffer(bh);
ffffffffc06aeec5:	4c 89 ef             	mov    %r13,%rdi
ffffffffc06aeec8:	e8 00 00 00 00       	callq  ffffffffc06aeecd <sbh_sync_block+0x5d>
		for (i = 0; i < sbh->count; i++)
ffffffffc06aeecd:	41 83 c4 01          	add    $0x1,%r12d
ffffffffc06aeed1:	44 39 23             	cmp    %r12d,(%rbx)
ffffffffc06aeed4:	77 da                	ja     ffffffffc06aeeb0 <sbh_sync_block+0x40>
}
ffffffffc06aeed6:	5b                   	pop    %rbx
ffffffffc06aeed7:	41 5c                	pop    %r12
ffffffffc06aeed9:	41 5d                	pop    %r13
ffffffffc06aeedb:	5d                   	pop    %rbp
ffffffffc06aeedc:	c3                   	retq   
ffffffffc06aeedd:	f3 c3                	repz retq 
ffffffffc06aeedf:	90                   	nop

ffffffffc06aeee0 <sfs_new_inode>:
{
ffffffffc06aeee0:	e8 00 00 00 00       	callq  ffffffffc06aeee5 <sfs_new_inode+0x5>
ffffffffc06aeee5:	55                   	push   %rbp
ffffffffc06aeee6:	48 89 e5             	mov    %rsp,%rbp
ffffffffc06aeee9:	41 57                	push   %r15
ffffffffc06aeeeb:	41 56                	push   %r14
ffffffffc06aeeed:	41 55                	push   %r13
ffffffffc06aeeef:	41 54                	push   %r12
ffffffffc06aeef1:	49 89 fc             	mov    %rdi,%r12
ffffffffc06aeef4:	41 52                	push   %r10
ffffffffc06aeef6:	53                   	push   %rbx
	printk(KERN_ERR "jy: new_inode\n");
ffffffffc06aeef7:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
{
ffffffffc06aeefe:	41 89 f5             	mov    %esi,%r13d
ffffffffc06aef01:	48 83 ec 28          	sub    $0x28,%rsp
ffffffffc06aef05:	65 48 8b 04 25 28 00 	mov    %gs:0x28,%rax
ffffffffc06aef0c:	00 00 
ffffffffc06aef0e:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
ffffffffc06aef12:	31 c0                	xor    %eax,%eax
	printk(KERN_ERR "jy: new_inode\n");
ffffffffc06aef14:	e8 00 00 00 00       	callq  ffffffffc06aef19 <sfs_new_inode+0x39>
	printk(KERN_ERR "jy: new_inode0.1\n");
ffffffffc06aef19:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06aef20:	e8 00 00 00 00       	callq  ffffffffc06aef25 <sfs_new_inode+0x45>
	sb = dir->i_sb;
ffffffffc06aef25:	49 8b 5c 24 28       	mov    0x28(%r12),%rbx
	inode = new_inode(sb);
ffffffffc06aef2a:	48 89 df             	mov    %rbx,%rdi
ffffffffc06aef2d:	e8 00 00 00 00       	callq  ffffffffc06aef32 <sfs_new_inode+0x52>
	if (!inode)
ffffffffc06aef32:	48 85 c0             	test   %rax,%rax
ffffffffc06aef35:	75 2e                	jne    ffffffffc06aef65 <sfs_new_inode+0x85>
		return ERR_PTR(-ENOMEM);
ffffffffc06aef37:	49 c7 c6 f4 ff ff ff 	mov    $0xfffffffffffffff4,%r14
}
ffffffffc06aef3e:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffffc06aef42:	65 48 33 0c 25 28 00 	xor    %gs:0x28,%rcx
ffffffffc06aef49:	00 00 
ffffffffc06aef4b:	4c 89 f0             	mov    %r14,%rax
ffffffffc06aef4e:	0f 85 d3 00 00 00    	jne    ffffffffc06af027 <sfs_new_inode+0x147>
ffffffffc06aef54:	48 83 c4 28          	add    $0x28,%rsp
ffffffffc06aef58:	5b                   	pop    %rbx
ffffffffc06aef59:	41 5a                	pop    %r10
ffffffffc06aef5b:	41 5c                	pop    %r12
ffffffffc06aef5d:	41 5d                	pop    %r13
ffffffffc06aef5f:	41 5e                	pop    %r14
ffffffffc06aef61:	41 5f                	pop    %r15
ffffffffc06aef63:	5d                   	pop    %rbp
ffffffffc06aef64:	c3                   	retq   
	printk(KERN_ERR "jy: new_inode0.2\n");
ffffffffc06aef65:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06aef6c:	49 89 c6             	mov    %rax,%r14
ffffffffc06aef6f:	e8 00 00 00 00       	callq  ffffffffc06aef74 <sfs_new_inode+0x94>
	sbi = SFS_SB(sb);
ffffffffc06aef74:	4c 8b 8b b0 03 00 00 	mov    0x3b0(%rbx),%r9
	for (i = 0; i < sfs_get(blkcnt_imap); i++) {
ffffffffc06aef7b:	41 83 79 30 00       	cmpl   $0x0,0x30(%r9)
ffffffffc06aef80:	0f 84 ad 00 00 00    	je     ffffffffc06af033 <sfs_new_inode+0x153>
		printk(KERN_ERR "jy: new_inode0 %d\n", sfs_get(imap_blkaddr) + i);
ffffffffc06aef86:	41 8b 71 20          	mov    0x20(%r9),%esi
ffffffffc06aef8a:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06aef91:	4c 89 4d b0          	mov    %r9,-0x50(%rbp)
ffffffffc06aef95:	e8 00 00 00 00       	callq  ffffffffc06aef9a <sfs_new_inode+0xba>
		bitmap_bh = sb_bread(sb, sfs_get(imap_blkaddr) + i);
ffffffffc06aef9a:	4c 8b 4d b0          	mov    -0x50(%rbp),%r9
	return __bread_gfp(sb->s_bdev, block, sb->s_blocksize, __GFP_MOVABLE);
ffffffffc06aef9e:	48 8b bb d8 00 00 00 	mov    0xd8(%rbx),%rdi
ffffffffc06aefa5:	b9 08 00 00 00       	mov    $0x8,%ecx
ffffffffc06aefaa:	8b 53 18             	mov    0x18(%rbx),%edx
ffffffffc06aefad:	41 8b 71 20          	mov    0x20(%r9),%esi
ffffffffc06aefb1:	4c 89 4d a8          	mov    %r9,-0x58(%rbp)
ffffffffc06aefb5:	e8 00 00 00 00       	callq  ffffffffc06aefba <sfs_new_inode+0xda>
		if (!bitmap_bh) {
ffffffffc06aefba:	48 85 c0             	test   %rax,%rax
ffffffffc06aefbd:	49 89 c7             	mov    %rax,%r15
ffffffffc06aefc0:	74 6a                	je     ffffffffc06af02c <sfs_new_inode+0x14c>
#define BITOP_LE_SWIZZLE	0

static inline unsigned long find_next_zero_bit_le(const void *addr,
		unsigned long size, unsigned long offset)
{
	return find_next_zero_bit(addr, size, offset);
ffffffffc06aefc2:	48 8b 78 28          	mov    0x28(%rax),%rdi
ffffffffc06aefc6:	31 d2                	xor    %edx,%edx
ffffffffc06aefc8:	be 00 10 00 00       	mov    $0x1000,%esi
ffffffffc06aefcd:	e8 00 00 00 00       	callq  ffffffffc06aefd2 <sfs_new_inode+0xf2>
		printk(KERN_ERR "jy: new_inode1 %ld\n", ino);
ffffffffc06aefd2:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06aefd9:	48 89 c6             	mov    %rax,%rsi
ffffffffc06aefdc:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
ffffffffc06aefe0:	e8 00 00 00 00       	callq  ffffffffc06aefe5 <sfs_new_inode+0x105>
		if (ino > sfs_get(blkcnt_inode) + SFS_ROOT_INO) {
ffffffffc06aefe5:	4c 8b 4d a8          	mov    -0x58(%rbp),%r9
ffffffffc06aefe9:	41 8b 41 38          	mov    0x38(%r9),%eax
ffffffffc06aefed:	83 c0 03             	add    $0x3,%eax
ffffffffc06aeff0:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
ffffffffc06aeff4:	73 50                	jae    ffffffffc06af046 <sfs_new_inode+0x166>
		__brelse(bh);
ffffffffc06aeff6:	4c 89 ff             	mov    %r15,%rdi
			err = -EIO;
ffffffffc06aeff9:	bb fb ff ff ff       	mov    $0xfffffffb,%ebx
ffffffffc06aeffe:	e8 00 00 00 00       	callq  ffffffffc06af003 <sfs_new_inode+0x123>
	printk(KERN_ERR "jy: new_inode9\n");
ffffffffc06af003:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06af00a:	e8 00 00 00 00       	callq  ffffffffc06af00f <sfs_new_inode+0x12f>
	make_bad_inode(inode);
ffffffffc06af00f:	4c 89 f7             	mov    %r14,%rdi
ffffffffc06af012:	e8 00 00 00 00       	callq  ffffffffc06af017 <sfs_new_inode+0x137>
	iput(inode);
ffffffffc06af017:	4c 89 f7             	mov    %r14,%rdi
	return ERR_PTR(err);
ffffffffc06af01a:	4c 63 f3             	movslq %ebx,%r14
	iput(inode);
ffffffffc06af01d:	e8 00 00 00 00       	callq  ffffffffc06af022 <sfs_new_inode+0x142>
	return ERR_PTR(err);
ffffffffc06af022:	e9 17 ff ff ff       	jmpq   ffffffffc06aef3e <sfs_new_inode+0x5e>
}
ffffffffc06af027:	e8 00 00 00 00       	callq  ffffffffc06af02c <sfs_new_inode+0x14c>
			err = -EIO;
ffffffffc06af02c:	bb fb ff ff ff       	mov    $0xfffffffb,%ebx
ffffffffc06af031:	eb d0                	jmp    ffffffffc06af003 <sfs_new_inode+0x123>
	printk(KERN_ERR "jy: new_inode2\n");
ffffffffc06af033:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
	err = -ENOSPC;
ffffffffc06af03a:	bb e4 ff ff ff       	mov    $0xffffffe4,%ebx
	printk(KERN_ERR "jy: new_inode2\n");
ffffffffc06af03f:	e8 00 00 00 00       	callq  ffffffffc06af044 <sfs_new_inode+0x164>
	goto failed;
ffffffffc06af044:	eb bd                	jmp    ffffffffc06af003 <sfs_new_inode+0x123>
	printk(KERN_ERR "jy: new_inode3\n");
ffffffffc06af046:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06af04d:	e8 00 00 00 00       	callq  ffffffffc06af052 <sfs_new_inode+0x172>
	mark_buffer_dirty(bitmap_bh);
ffffffffc06af052:	4c 89 ff             	mov    %r15,%rdi
ffffffffc06af055:	e8 00 00 00 00       	callq  ffffffffc06af05a <sfs_new_inode+0x17a>
		sync_dirty_buffer(bitmap_bh);
ffffffffc06af05a:	4c 89 ff             	mov    %r15,%rdi
ffffffffc06af05d:	e8 00 00 00 00       	callq  ffffffffc06af062 <sfs_new_inode+0x182>
ffffffffc06af062:	4c 89 ff             	mov    %r15,%rdi
ffffffffc06af065:	e8 00 00 00 00       	callq  ffffffffc06af06a <sfs_new_inode+0x18a>
	ino += SFS_ROOT_INO;
ffffffffc06af06a:	4c 8b 7d b0          	mov    -0x50(%rbp),%r15
	printk(KERN_ERR "jy: new_inode3.5 %ld\n", ino);
ffffffffc06af06e:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
	ino += SFS_ROOT_INO;
ffffffffc06af075:	49 83 c7 03          	add    $0x3,%r15
	printk(KERN_ERR "jy: new_inode3.5 %ld\n", ino);
ffffffffc06af079:	4c 89 fe             	mov    %r15,%rsi
ffffffffc06af07c:	e8 00 00 00 00       	callq  ffffffffc06af081 <sfs_new_inode+0x1a1>
	inode_init_owner(inode, dir, mode);
ffffffffc06af081:	4c 89 e6             	mov    %r12,%rsi
	if (S_ISDIR(mode)) {
ffffffffc06af084:	41 0f b7 d5          	movzwl %r13w,%edx
	inode_init_owner(inode, dir, mode);
ffffffffc06af088:	4c 89 f7             	mov    %r14,%rdi
	inode->i_ino = ino;
ffffffffc06af08b:	4d 89 7e 40          	mov    %r15,0x40(%r14)
	inode_init_owner(inode, dir, mode);
ffffffffc06af08f:	e8 00 00 00 00       	callq  ffffffffc06af094 <sfs_new_inode+0x1b4>
	inode->i_mtime = inode->i_atime = inode->i_ctime = current_time(inode);
ffffffffc06af094:	4c 89 f7             	mov    %r14,%rdi
	inode->i_blocks = 0;
ffffffffc06af097:	49 c7 86 90 00 00 00 	movq   $0x0,0x90(%r14)
ffffffffc06af09e:	00 00 00 00 
	inode->i_generation = 0;
ffffffffc06af0a2:	41 c7 86 30 02 00 00 	movl   $0x0,0x230(%r14)
ffffffffc06af0a9:	00 00 00 00 
	inode->i_mtime = inode->i_atime = inode->i_ctime = current_time(inode);
ffffffffc06af0ad:	e8 00 00 00 00       	callq  ffffffffc06af0b2 <sfs_new_inode+0x1d2>
ffffffffc06af0b2:	49 89 96 80 00 00 00 	mov    %rdx,0x80(%r14)
ffffffffc06af0b9:	49 89 56 60          	mov    %rdx,0x60(%r14)
	return __builtin_memset(p, c, size);
ffffffffc06af0bd:	b9 0f 00 00 00       	mov    $0xf,%ecx
ffffffffc06af0c2:	49 89 56 70          	mov    %rdx,0x70(%r14)
ffffffffc06af0c6:	49 89 46 78          	mov    %rax,0x78(%r14)
ffffffffc06af0ca:	49 8d 56 b8          	lea    -0x48(%r14),%rdx
ffffffffc06af0ce:	49 89 46 58          	mov    %rax,0x58(%r14)
ffffffffc06af0d2:	49 89 46 68          	mov    %rax,0x68(%r14)
	si->i_flags = SFS_I(dir)->i_flags;
ffffffffc06af0d6:	41 8b 44 24 f4       	mov    -0xc(%r12),%eax
ffffffffc06af0db:	48 89 d7             	mov    %rdx,%rdi
	si->i_dir_start_lookup = 0;
ffffffffc06af0de:	41 c7 46 f8 00 00 00 	movl   $0x0,-0x8(%r14)
ffffffffc06af0e5:	00 
	si->i_flags = SFS_I(dir)->i_flags;
ffffffffc06af0e6:	41 89 46 f4          	mov    %eax,-0xc(%r14)
ffffffffc06af0ea:	31 c0                	xor    %eax,%eax
ffffffffc06af0ec:	f3 ab                	rep stos %eax,%es:(%rdi)
	printk(KERN_ERR "jy: new_inode4\n");
ffffffffc06af0ee:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06af0f5:	e8 00 00 00 00       	callq  ffffffffc06af0fa <sfs_new_inode+0x21a>
	if (insert_inode_locked(inode) < 0) {
ffffffffc06af0fa:	4c 89 f7             	mov    %r14,%rdi
ffffffffc06af0fd:	e8 00 00 00 00       	callq  ffffffffc06af102 <sfs_new_inode+0x222>
ffffffffc06af102:	85 c0                	test   %eax,%eax
ffffffffc06af104:	0f 88 22 ff ff ff    	js     ffffffffc06af02c <sfs_new_inode+0x14c>
	__mark_inode_dirty(inode, I_DIRTY);
ffffffffc06af10a:	be 07 00 00 00       	mov    $0x7,%esi
ffffffffc06af10f:	4c 89 f7             	mov    %r14,%rdi
ffffffffc06af112:	e8 00 00 00 00       	callq  ffffffffc06af117 <sfs_new_inode+0x237>
	bh = sb_bread(sb, sfs_inotoba(inode->i_ino));
ffffffffc06af117:	48 8b 83 b0 03 00 00 	mov    0x3b0(%rbx),%rax
	return __bread_gfp(sb->s_bdev, block, sb->s_blocksize, __GFP_MOVABLE);
ffffffffc06af11e:	48 8b 53 18          	mov    0x18(%rbx),%rdx
ffffffffc06af122:	48 8b bb d8 00 00 00 	mov    0xd8(%rbx),%rdi
ffffffffc06af129:	8b 48 2c             	mov    0x2c(%rax),%ecx
ffffffffc06af12c:	49 8b 46 40          	mov    0x40(%r14),%rax
ffffffffc06af130:	48 8d 74 01 fd       	lea    -0x3(%rcx,%rax,1),%rsi
ffffffffc06af135:	b9 08 00 00 00       	mov    $0x8,%ecx
ffffffffc06af13a:	e8 00 00 00 00       	callq  ffffffffc06af13f <sfs_new_inode+0x25f>
	printk(KERN_ERR "jy: new_inode5\n");
ffffffffc06af13f:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06af146:	48 89 c3             	mov    %rax,%rbx
ffffffffc06af149:	e8 00 00 00 00       	callq  ffffffffc06af14e <sfs_new_inode+0x26e>
	if (!bh) {
ffffffffc06af14e:	48 85 db             	test   %rbx,%rbx
ffffffffc06af151:	74 5c                	je     ffffffffc06af1af <sfs_new_inode+0x2cf>
	printk(KERN_ERR "jy: new_inode6\n");
ffffffffc06af153:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06af15a:	e8 00 00 00 00       	callq  ffffffffc06af15f <sfs_new_inode+0x27f>
	ktime_get_real_ts64(&ts);
ffffffffc06af15f:	48 8d 7d b8          	lea    -0x48(%rbp),%rdi
	sfs_inode = (struct sfs_inode *)bh->b_data;
ffffffffc06af163:	4c 8b 63 28          	mov    0x28(%rbx),%r12
	ktime_get_real_ts64(&ts);
ffffffffc06af167:	e8 00 00 00 00       	callq  ffffffffc06af16c <sfs_new_inode+0x28c>
	sfs_inode->i_ctime = cpu_to_le64(ts.tv_sec);
ffffffffc06af16c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
	mark_buffer_dirty(bh);
ffffffffc06af170:	48 89 df             	mov    %rbx,%rdi
	sfs_inode->i_ctime = cpu_to_le64(ts.tv_sec);
ffffffffc06af173:	49 89 44 24 28       	mov    %rax,0x28(%r12)
	sfs_inode->i_ctime_nsec = cpu_to_le32(ts.tv_nsec);
ffffffffc06af178:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffffc06af17c:	41 89 44 24 3c       	mov    %eax,0x3c(%r12)
	mark_buffer_dirty(bh);
ffffffffc06af181:	e8 00 00 00 00       	callq  ffffffffc06af186 <sfs_new_inode+0x2a6>
	unlock_buffer(bh);
ffffffffc06af186:	48 89 df             	mov    %rbx,%rdi
ffffffffc06af189:	e8 00 00 00 00       	callq  ffffffffc06af18e <sfs_new_inode+0x2ae>
		sync_dirty_buffer(bh);
ffffffffc06af18e:	48 89 df             	mov    %rbx,%rdi
ffffffffc06af191:	e8 00 00 00 00       	callq  ffffffffc06af196 <sfs_new_inode+0x2b6>
		__brelse(bh);
ffffffffc06af196:	48 89 df             	mov    %rbx,%rdi
ffffffffc06af199:	e8 00 00 00 00       	callq  ffffffffc06af19e <sfs_new_inode+0x2be>
	printk(KERN_ERR "jy: new_inode7\n");
ffffffffc06af19e:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06af1a5:	e8 00 00 00 00       	callq  ffffffffc06af1aa <sfs_new_inode+0x2ca>
	return inode;
ffffffffc06af1aa:	e9 8f fd ff ff       	jmpq   ffffffffc06aef3e <sfs_new_inode+0x5e>
		sfs_msg(KERN_ERR, "sfs_new_inode", "Failed to read inode %lu\n", inode->i_ino);
ffffffffc06af1af:	49 8b 4e 40          	mov    0x40(%r14),%rcx
ffffffffc06af1b3:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
ffffffffc06af1ba:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
ffffffffc06af1c1:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06af1c8:	e8 00 00 00 00       	callq  ffffffffc06af1cd <sfs_new_inode+0x2ed>
	printk(KERN_ERR "jy: new_inode8\n");
ffffffffc06af1cd:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06af1d4:	e8 00 00 00 00       	callq  ffffffffc06af1d9 <sfs_new_inode+0x2f9>
	clear_nlink(inode);
ffffffffc06af1d9:	4c 89 f7             	mov    %r14,%rdi
ffffffffc06af1dc:	e8 00 00 00 00       	callq  ffffffffc06af1e1 <sfs_new_inode+0x301>
	discard_new_inode(inode);
ffffffffc06af1e1:	4c 89 f7             	mov    %r14,%rdi
	return ERR_PTR(err);
ffffffffc06af1e4:	49 c7 c6 fb ff ff ff 	mov    $0xfffffffffffffffb,%r14
	discard_new_inode(inode);
ffffffffc06af1eb:	e8 00 00 00 00       	callq  ffffffffc06af1f0 <sfs_new_inode+0x310>
	return ERR_PTR(err);
ffffffffc06af1f0:	e9 49 fd ff ff       	jmpq   ffffffffc06aef3e <sfs_new_inode+0x5e>
ffffffffc06af1f5:	90                   	nop
ffffffffc06af1f6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffffc06af1fd:	00 00 00 

ffffffffc06af200 <sfs_add_link>:
{
ffffffffc06af200:	e8 00 00 00 00       	callq  ffffffffc06af205 <sfs_add_link+0x5>
ffffffffc06af205:	55                   	push   %rbp
ffffffffc06af206:	48 89 e5             	mov    %rsp,%rbp
ffffffffc06af209:	41 57                	push   %r15
ffffffffc06af20b:	41 56                	push   %r14
ffffffffc06af20d:	41 55                	push   %r13
ffffffffc06af20f:	41 54                	push   %r12
		kaddr += PAGE_SIZE - reclen;
ffffffffc06af211:	41 bd 00 10 00 00    	mov    $0x1000,%r13d
{
ffffffffc06af217:	41 52                	push   %r10
ffffffffc06af219:	53                   	push   %rbx
	for (n = 0; n <= npages; n++) {
ffffffffc06af21a:	31 db                	xor    %ebx,%ebx
{
ffffffffc06af21c:	48 83 ec 50          	sub    $0x50,%rsp
	struct inode *dir = d_inode(dentry->d_parent);
ffffffffc06af220:	48 8b 47 18          	mov    0x18(%rdi),%rax
{
ffffffffc06af224:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
	const char *name = dentry->d_name.name;
ffffffffc06af228:	48 8b 77 28          	mov    0x28(%rdi),%rsi
	struct inode *dir = d_inode(dentry->d_parent);
ffffffffc06af22c:	4c 8b 60 30          	mov    0x30(%rax),%r12
	int namelen = dentry->d_name.len;
ffffffffc06af230:	8b 47 24             	mov    0x24(%rdi),%eax
	printk(KERN_ERR "jy: add_link %s\n", name);
ffffffffc06af233:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
	const char *name = dentry->d_name.name;
ffffffffc06af23a:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	int namelen = dentry->d_name.len;
ffffffffc06af23e:	89 45 c8             	mov    %eax,-0x38(%rbp)
	unsigned reclen = SFS_DIR_REC_LEN(namelen);
ffffffffc06af241:	83 c0 0b             	add    $0xb,%eax
ffffffffc06af244:	83 e0 fc             	and    $0xfffffffc,%eax
ffffffffc06af247:	41 89 c7             	mov    %eax,%r15d
ffffffffc06af24a:	89 45 b8             	mov    %eax,-0x48(%rbp)
ffffffffc06af24d:	49 8b 44 24 50       	mov    0x50(%r12),%rax
ffffffffc06af252:	4c 8d b0 ff 0f 00 00 	lea    0xfff(%rax),%r14
	printk(KERN_ERR "jy: add_link %s\n", name);
ffffffffc06af259:	e8 00 00 00 00       	callq  ffffffffc06af25e <sfs_add_link+0x5e>
		kaddr += PAGE_SIZE - reclen;
ffffffffc06af25e:	44 89 f8             	mov    %r15d,%eax
ffffffffc06af261:	49 c1 ee 0c          	shr    $0xc,%r14
ffffffffc06af265:	49 29 c5             	sub    %rax,%r13
ffffffffc06af268:	e9 88 00 00 00       	jmpq   ffffffffc06af2f5 <sfs_add_link+0xf5>
	might_sleep();
ffffffffc06af26d:	e8 00 00 00 00       	callq  ffffffffc06af272 <sfs_add_link+0x72>
ffffffffc06af272:	49 8b 57 08          	mov    0x8(%r15),%rdx
ffffffffc06af276:	48 8d 42 ff          	lea    -0x1(%rdx),%rax
ffffffffc06af27a:	83 e2 01             	and    $0x1,%edx
ffffffffc06af27d:	49 0f 44 c7          	cmove  %r15,%rax
	return GEN_BINARY_RMWcc(LOCK_PREFIX __ASM_SIZE(bts), *addr, c, "Ir", nr);
ffffffffc06af281:	f0 48 0f ba 28 00    	lock btsq $0x0,(%rax)
	if (!trylock_page(page))
ffffffffc06af287:	0f 82 06 01 00 00    	jb     ffffffffc06af393 <sfs_add_link+0x193>
		printk(KERN_ERR "jy: add_link2\n");
ffffffffc06af28d:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06af294:	e8 00 00 00 00       	callq  ffffffffc06af299 <sfs_add_link+0x99>
	return page_to_virt(page);
ffffffffc06af299:	4d 89 f9             	mov    %r15,%r9
ffffffffc06af29c:	4c 2b 0d 00 00 00 00 	sub    0x0(%rip),%r9        # ffffffffc06af2a3 <sfs_add_link+0xa3>
ffffffffc06af2a3:	49 c1 f9 06          	sar    $0x6,%r9
ffffffffc06af2a7:	49 c1 e1 0c          	shl    $0xc,%r9
ffffffffc06af2ab:	4c 03 0d 00 00 00 00 	add    0x0(%rip),%r9        # ffffffffc06af2b2 <sfs_add_link+0xb2>
		while ((char *)de <= kaddr) {
ffffffffc06af2b2:	4c 89 c9             	mov    %r9,%rcx
ffffffffc06af2b5:	4c 01 e9             	add    %r13,%rcx
ffffffffc06af2b8:	0f 83 e2 00 00 00    	jae    ffffffffc06af3a0 <sfs_add_link+0x1a0>
		unlock_page(page);
ffffffffc06af2be:	4c 89 ff             	mov    %r15,%rdi
ffffffffc06af2c1:	e8 00 00 00 00       	callq  ffffffffc06af2c6 <sfs_add_link+0xc6>
ffffffffc06af2c6:	49 8b 47 08          	mov    0x8(%r15),%rax
ffffffffc06af2ca:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
ffffffffc06af2ce:	a8 01                	test   $0x1,%al
ffffffffc06af2d0:	4c 0f 45 fa          	cmovne %rdx,%r15
ffffffffc06af2d4:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
ffffffffc06af2d9:	f0 41 ff 4f 34       	lock decl 0x34(%r15)
	if (put_page_testzero(page))
ffffffffc06af2de:	75 08                	jne    ffffffffc06af2e8 <sfs_add_link+0xe8>
		__put_page(page);
ffffffffc06af2e0:	4c 89 ff             	mov    %r15,%rdi
ffffffffc06af2e3:	e8 00 00 00 00       	callq  ffffffffc06af2e8 <sfs_add_link+0xe8>
	for (n = 0; n <= npages; n++) {
ffffffffc06af2e8:	48 83 c3 01          	add    $0x1,%rbx
ffffffffc06af2ec:	4c 39 f3             	cmp    %r14,%rbx
ffffffffc06af2ef:	0f 87 8a 00 00 00    	ja     ffffffffc06af37f <sfs_add_link+0x17f>
		printk(KERN_ERR "jy: add_link1\n");
ffffffffc06af2f5:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06af2fc:	e8 00 00 00 00       	callq  ffffffffc06af301 <sfs_add_link+0x101>
		page = sfs_get_page(dir, n);
ffffffffc06af301:	49 8b 74 24 40       	mov    0x40(%r12),%rsi
ffffffffc06af306:	49 8b 7c 24 30       	mov    0x30(%r12),%rdi
ffffffffc06af30b:	48 89 da             	mov    %rbx,%rdx
ffffffffc06af30e:	e8 8d f1 ff ff       	callq  ffffffffc06ae4a0 <sfs_get_page.isra.16>
		if (IS_ERR(page))
ffffffffc06af313:	48 3d 00 f0 ff ff    	cmp    $0xfffffffffffff000,%rax
		page = sfs_get_page(dir, n);
ffffffffc06af319:	49 89 c7             	mov    %rax,%r15
		if (IS_ERR(page))
ffffffffc06af31c:	0f 86 4b ff ff ff    	jbe    ffffffffc06af26d <sfs_add_link+0x6d>
		err = PTR_ERR(page);
ffffffffc06af322:	41 89 c5             	mov    %eax,%r13d
	printk(KERN_ERR "jy: add_link11\n");
ffffffffc06af325:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06af32c:	e8 00 00 00 00       	callq  ffffffffc06af331 <sfs_add_link+0x131>
}
ffffffffc06af331:	48 83 c4 50          	add    $0x50,%rsp
ffffffffc06af335:	44 89 e8             	mov    %r13d,%eax
ffffffffc06af338:	5b                   	pop    %rbx
ffffffffc06af339:	41 5a                	pop    %r10
ffffffffc06af33b:	41 5c                	pop    %r12
ffffffffc06af33d:	41 5d                	pop    %r13
ffffffffc06af33f:	41 5e                	pop    %r14
ffffffffc06af341:	41 5f                	pop    %r15
ffffffffc06af343:	5d                   	pop    %rbp
ffffffffc06af344:	c3                   	retq   
	return (page->flags >> ZONES_PGSHIFT) & ZONES_MASK;
ffffffffc06af345:	49 8b 07             	mov    (%r15),%rax
ffffffffc06af348:	48 c1 e8 33          	shr    $0x33,%rax
ffffffffc06af34c:	83 e0 07             	and    $0x7,%eax
	if (!is_zone_device_page(page))
ffffffffc06af34f:	83 f8 04             	cmp    $0x4,%eax
ffffffffc06af352:	75 85                	jne    ffffffffc06af2d9 <sfs_add_link+0xd9>
	switch (page->pgmap->type) {
ffffffffc06af354:	49 8b 47 08          	mov    0x8(%r15),%rax
ffffffffc06af358:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
ffffffffc06af35e:	83 e8 01             	sub    $0x1,%eax
ffffffffc06af361:	83 f8 01             	cmp    $0x1,%eax
ffffffffc06af364:	0f 87 6f ff ff ff    	ja     ffffffffc06af2d9 <sfs_add_link+0xd9>
		put_devmap_managed_page(page);
ffffffffc06af36a:	4c 89 ff             	mov    %r15,%rdi
	for (n = 0; n <= npages; n++) {
ffffffffc06af36d:	48 83 c3 01          	add    $0x1,%rbx
ffffffffc06af371:	e8 00 00 00 00       	callq  ffffffffc06af376 <sfs_add_link+0x176>
ffffffffc06af376:	4c 39 f3             	cmp    %r14,%rbx
ffffffffc06af379:	0f 86 76 ff ff ff    	jbe    ffffffffc06af2f5 <sfs_add_link+0xf5>
	printk(KERN_ERR "jy: add_link6\n");
ffffffffc06af37f:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
	return -EINVAL;
ffffffffc06af386:	41 bd ea ff ff ff    	mov    $0xffffffea,%r13d
	printk(KERN_ERR "jy: add_link6\n");
ffffffffc06af38c:	e8 00 00 00 00       	callq  ffffffffc06af391 <sfs_add_link+0x191>
	return -EINVAL;
ffffffffc06af391:	eb 9e                	jmp    ffffffffc06af331 <sfs_add_link+0x131>
		__lock_page(page);
ffffffffc06af393:	4c 89 ff             	mov    %r15,%rdi
ffffffffc06af396:	e8 00 00 00 00       	callq  ffffffffc06af39b <sfs_add_link+0x19b>
ffffffffc06af39b:	e9 ed fe ff ff       	jmpq   ffffffffc06af28d <sfs_add_link+0x8d>
	last_byte -= page_nr << PAGE_SHIFT;
ffffffffc06af3a0:	41 8b 74 24 50       	mov    0x50(%r12),%esi
ffffffffc06af3a5:	89 d8                	mov    %ebx,%eax
		dir_end = kaddr + sfs_last_byte(dir, n);
ffffffffc06af3a7:	ba 00 10 00 00       	mov    $0x1000,%edx
	last_byte -= page_nr << PAGE_SHIFT;
ffffffffc06af3ac:	c1 e0 0c             	shl    $0xc,%eax
		dir_end = kaddr + sfs_last_byte(dir, n);
ffffffffc06af3af:	48 89 5d 90          	mov    %rbx,-0x70(%rbp)
ffffffffc06af3b3:	4c 89 65 a8          	mov    %r12,-0x58(%rbp)
ffffffffc06af3b7:	48 89 cb             	mov    %rcx,%rbx
ffffffffc06af3ba:	4d 89 cc             	mov    %r9,%r12
	last_byte -= page_nr << PAGE_SHIFT;
ffffffffc06af3bd:	29 c6                	sub    %eax,%esi
ffffffffc06af3bf:	89 f0                	mov    %esi,%eax
		dir_end = kaddr + sfs_last_byte(dir, n);
ffffffffc06af3c1:	3d 00 10 00 00       	cmp    $0x1000,%eax
ffffffffc06af3c6:	48 0f 47 c2          	cmova  %rdx,%rax
ffffffffc06af3ca:	4c 01 c8             	add    %r9,%rax
ffffffffc06af3cd:	48 89 45 98          	mov    %rax,-0x68(%rbp)
			printk(KERN_ERR "jy: add_link3 %d %s\n", de->inode, de->name);
ffffffffc06af3d1:	49 8d 44 24 08       	lea    0x8(%r12),%rax
ffffffffc06af3d6:	41 8b 34 24          	mov    (%r12),%esi
ffffffffc06af3da:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06af3e1:	48 89 c2             	mov    %rax,%rdx
ffffffffc06af3e4:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
ffffffffc06af3e8:	e8 00 00 00 00       	callq  ffffffffc06af3ed <sfs_add_link+0x1ed>
			if ((char *)de == dir_end) {
ffffffffc06af3ed:	4c 39 65 98          	cmp    %r12,-0x68(%rbp)
ffffffffc06af3f1:	0f 84 33 01 00 00    	je     ffffffffc06af52a <sfs_add_link+0x32a>
			if (de->rec_len == 0) {
ffffffffc06af3f7:	66 41 83 7c 24 04 00 	cmpw   $0x0,0x4(%r12)
ffffffffc06af3fe:	0f 84 a4 00 00 00    	je     ffffffffc06af4a8 <sfs_add_link+0x2a8>
			printk(KERN_ERR "jy: add_link4\n");
ffffffffc06af404:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06af40b:	e8 00 00 00 00       	callq  ffffffffc06af410 <sfs_add_link+0x210>
	if (len != de->name_len)
ffffffffc06af410:	41 0f b6 44 24 06    	movzbl 0x6(%r12),%eax
ffffffffc06af416:	39 45 c8             	cmp    %eax,-0x38(%rbp)
ffffffffc06af419:	41 89 c2             	mov    %eax,%r10d
ffffffffc06af41c:	74 70                	je     ffffffffc06af48e <sfs_add_link+0x28e>
			rec_len = le16_to_cpu(de->rec_len);
ffffffffc06af41e:	41 0f b7 54 24 04    	movzwl 0x4(%r12),%edx
			if (!de->inode && rec_len >= reclen)
ffffffffc06af424:	41 8b 04 24          	mov    (%r12),%eax
			name_len = SFS_DIR_REC_LEN(de->name_len);
ffffffffc06af428:	41 83 c2 0b          	add    $0xb,%r10d
ffffffffc06af42c:	41 83 e2 fc          	and    $0xfffffffc,%r10d
			if (!de->inode && rec_len >= reclen)
ffffffffc06af430:	85 c0                	test   %eax,%eax
			rec_len = le16_to_cpu(de->rec_len);
ffffffffc06af432:	41 89 d3             	mov    %edx,%r11d
			if (!de->inode && rec_len >= reclen)
ffffffffc06af435:	75 09                	jne    ffffffffc06af440 <sfs_add_link+0x240>
ffffffffc06af437:	39 55 b8             	cmp    %edx,-0x48(%rbp)
ffffffffc06af43a:	0f 86 49 02 00 00    	jbe    ffffffffc06af689 <sfs_add_link+0x489>
			printk(KERN_ERR "jy: add_link5\n");
ffffffffc06af440:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06af447:	89 55 84             	mov    %edx,-0x7c(%rbp)
ffffffffc06af44a:	44 89 5d 88          	mov    %r11d,-0x78(%rbp)
ffffffffc06af44e:	44 89 55 8c          	mov    %r10d,-0x74(%rbp)
ffffffffc06af452:	e8 00 00 00 00       	callq  ffffffffc06af457 <sfs_add_link+0x257>
			if (rec_len >= name_len + reclen)
ffffffffc06af457:	44 8b 55 8c          	mov    -0x74(%rbp),%r10d
ffffffffc06af45b:	8b 55 84             	mov    -0x7c(%rbp),%edx
ffffffffc06af45e:	44 8b 5d 88          	mov    -0x78(%rbp),%r11d
ffffffffc06af462:	41 0f b7 c2          	movzwl %r10w,%eax
ffffffffc06af466:	03 45 b8             	add    -0x48(%rbp),%eax
ffffffffc06af469:	39 d0                	cmp    %edx,%eax
ffffffffc06af46b:	0f 86 18 02 00 00    	jbe    ffffffffc06af689 <sfs_add_link+0x489>
			de = (struct sfs_dir_entry *)((char *)de + rec_len);
ffffffffc06af471:	45 0f b7 db          	movzwl %r11w,%r11d
ffffffffc06af475:	4d 01 dc             	add    %r11,%r12
		while ((char *)de <= kaddr) {
ffffffffc06af478:	4c 39 e3             	cmp    %r12,%rbx
ffffffffc06af47b:	0f 83 50 ff ff ff    	jae    ffffffffc06af3d1 <sfs_add_link+0x1d1>
ffffffffc06af481:	48 8b 5d 90          	mov    -0x70(%rbp),%rbx
ffffffffc06af485:	4c 8b 65 a8          	mov    -0x58(%rbp),%r12
ffffffffc06af489:	e9 30 fe ff ff       	jmpq   ffffffffc06af2be <sfs_add_link+0xbe>
	if (!de->inode)
ffffffffc06af48e:	41 83 3c 24 00       	cmpl   $0x0,(%r12)
ffffffffc06af493:	75 60                	jne    ffffffffc06af4f5 <sfs_add_link+0x2f5>
			rec_len = le16_to_cpu(de->rec_len);
ffffffffc06af495:	41 0f b7 54 24 04    	movzwl 0x4(%r12),%edx
			name_len = SFS_DIR_REC_LEN(de->name_len);
ffffffffc06af49b:	41 83 c2 0b          	add    $0xb,%r10d
ffffffffc06af49f:	41 83 e2 fc          	and    $0xfffffffc,%r10d
			rec_len = le16_to_cpu(de->rec_len);
ffffffffc06af4a3:	41 89 d3             	mov    %edx,%r11d
ffffffffc06af4a6:	eb 8f                	jmp    ffffffffc06af437 <sfs_add_link+0x237>
				sfs_msg(KERN_ERR, "sfs_add_link", "zero-length directory entry");
ffffffffc06af4a8:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
ffffffffc06af4af:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
ffffffffc06af4b6:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
				err = -EIO;
ffffffffc06af4bd:	41 bd fb ff ff ff    	mov    $0xfffffffb,%r13d
				sfs_msg(KERN_ERR, "sfs_add_link", "zero-length directory entry");
ffffffffc06af4c3:	e8 00 00 00 00       	callq  ffffffffc06af4c8 <sfs_add_link+0x2c8>
	printk(KERN_ERR "jy: add_link12\n");
ffffffffc06af4c8:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06af4cf:	e8 00 00 00 00       	callq  ffffffffc06af4d4 <sfs_add_link+0x2d4>
	unlock_page(page);
ffffffffc06af4d4:	4c 89 ff             	mov    %r15,%rdi
ffffffffc06af4d7:	e8 00 00 00 00       	callq  ffffffffc06af4dc <sfs_add_link+0x2dc>
	printk(KERN_ERR "jy: add_link10\n");
ffffffffc06af4dc:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06af4e3:	e8 00 00 00 00       	callq  ffffffffc06af4e8 <sfs_add_link+0x2e8>
	put_page(page);
ffffffffc06af4e8:	4c 89 ff             	mov    %r15,%rdi
ffffffffc06af4eb:	e8 10 eb ff ff       	callq  ffffffffc06ae000 <put_page>
ffffffffc06af4f0:	e9 30 fe ff ff       	jmpq   ffffffffc06af325 <sfs_add_link+0x125>
ffffffffc06af4f5:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
ffffffffc06af4f9:	8b 7d c8             	mov    -0x38(%rbp),%edi
ffffffffc06af4fc:	4c 89 e2             	mov    %r12,%rdx
ffffffffc06af4ff:	88 45 8c             	mov    %al,-0x74(%rbp)
ffffffffc06af502:	e8 00 00 00 00       	callq  ffffffffc06af507 <sfs_add_link+0x307>
			if (sfs_match(namelen, name, de))
ffffffffc06af507:	85 c0                	test   %eax,%eax
ffffffffc06af509:	44 0f b6 55 8c       	movzbl -0x74(%rbp),%r10d
ffffffffc06af50e:	0f 85 84 01 00 00    	jne    ffffffffc06af698 <sfs_add_link+0x498>
			rec_len = le16_to_cpu(de->rec_len);
ffffffffc06af514:	41 0f b7 54 24 04    	movzwl 0x4(%r12),%edx
			name_len = SFS_DIR_REC_LEN(de->name_len);
ffffffffc06af51a:	41 83 c2 0b          	add    $0xb,%r10d
ffffffffc06af51e:	41 83 e2 fc          	and    $0xfffffffc,%r10d
			rec_len = le16_to_cpu(de->rec_len);
ffffffffc06af522:	41 89 d3             	mov    %edx,%r11d
ffffffffc06af525:	e9 16 ff ff ff       	jmpq   ffffffffc06af440 <sfs_add_link+0x240>
ffffffffc06af52a:	4d 89 e1             	mov    %r12,%r9
ffffffffc06af52d:	4c 8b 65 a8          	mov    -0x58(%rbp),%r12
				name_len = 0;
ffffffffc06af531:	45 31 d2             	xor    %r10d,%r10d
				de->rec_len = cpu_to_le16(SFS_BLKSIZE);
ffffffffc06af534:	66 41 c7 41 04 00 10 	movw   $0x1000,0x4(%r9)
				de->inode = 0;
ffffffffc06af53b:	41 c7 01 00 00 00 00 	movl   $0x0,(%r9)
				rec_len = SFS_BLKSIZE;
ffffffffc06af542:	41 bb 00 10 00 00    	mov    $0x1000,%r11d
ffffffffc06af548:	41 be 00 10 00 00    	mov    $0x1000,%r14d
	printk(KERN_ERR "jy: add_link7\n");
ffffffffc06af54e:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06af555:	44 89 5d 98          	mov    %r11d,-0x68(%rbp)
ffffffffc06af559:	44 89 55 a8          	mov    %r10d,-0x58(%rbp)
ffffffffc06af55d:	4c 89 4d b8          	mov    %r9,-0x48(%rbp)
ffffffffc06af561:	e8 00 00 00 00       	callq  ffffffffc06af566 <sfs_add_link+0x366>
	return page_to_virt(page);
ffffffffc06af566:	4c 89 f8             	mov    %r15,%rax
ffffffffc06af569:	48 2b 05 00 00 00 00 	sub    0x0(%rip),%rax        # ffffffffc06af570 <sfs_add_link+0x370>
	return ((loff_t)page->index) << PAGE_SHIFT;
ffffffffc06af570:	49 8b 5f 20          	mov    0x20(%r15),%rbx
	pos = page_offset(page) + (char *)de - (char *)page_address(page);
ffffffffc06af574:	4c 8b 4d b8          	mov    -0x48(%rbp),%r9
	return __block_write_begin(page, pos, len, sfs_get_block);
ffffffffc06af578:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
ffffffffc06af57f:	44 89 f2             	mov    %r14d,%edx
ffffffffc06af582:	4c 89 ff             	mov    %r15,%rdi
ffffffffc06af585:	48 c1 e3 0c          	shl    $0xc,%rbx
ffffffffc06af589:	48 c1 f8 06          	sar    $0x6,%rax
	pos = page_offset(page) + (char *)de - (char *)page_address(page);
ffffffffc06af58d:	4c 01 cb             	add    %r9,%rbx
ffffffffc06af590:	48 c1 e0 0c          	shl    $0xc,%rax
ffffffffc06af594:	48 03 05 00 00 00 00 	add    0x0(%rip),%rax        # ffffffffc06af59b <sfs_add_link+0x39b>
ffffffffc06af59b:	48 29 c3             	sub    %rax,%rbx
	return __block_write_begin(page, pos, len, sfs_get_block);
ffffffffc06af59e:	48 89 de             	mov    %rbx,%rsi
ffffffffc06af5a1:	e8 00 00 00 00       	callq  ffffffffc06af5a6 <sfs_add_link+0x3a6>
	printk(KERN_ERR "jy: add_link8\n");
ffffffffc06af5a6:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
	return __block_write_begin(page, pos, len, sfs_get_block);
ffffffffc06af5ad:	41 89 c5             	mov    %eax,%r13d
	printk(KERN_ERR "jy: add_link8\n");
ffffffffc06af5b0:	e8 00 00 00 00       	callq  ffffffffc06af5b5 <sfs_add_link+0x3b5>
	if (err)
ffffffffc06af5b5:	45 85 ed             	test   %r13d,%r13d
ffffffffc06af5b8:	4c 8b 4d b8          	mov    -0x48(%rbp),%r9
ffffffffc06af5bc:	44 8b 55 a8          	mov    -0x58(%rbp),%r10d
ffffffffc06af5c0:	44 8b 5d 98          	mov    -0x68(%rbp),%r11d
ffffffffc06af5c4:	0f 85 fe fe ff ff    	jne    ffffffffc06af4c8 <sfs_add_link+0x2c8>
	printk(KERN_ERR "jy: add_link9\n");
ffffffffc06af5ca:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06af5d1:	4c 89 4d 98          	mov    %r9,-0x68(%rbp)
ffffffffc06af5d5:	44 89 5d a8          	mov    %r11d,-0x58(%rbp)
ffffffffc06af5d9:	44 89 55 b8          	mov    %r10d,-0x48(%rbp)
ffffffffc06af5dd:	e8 00 00 00 00       	callq  ffffffffc06af5e2 <sfs_add_link+0x3e2>
	if (de->inode) {
ffffffffc06af5e2:	4c 8b 4d 98          	mov    -0x68(%rbp),%r9
ffffffffc06af5e6:	41 83 39 00          	cmpl   $0x0,(%r9)
ffffffffc06af5ea:	74 27                	je     ffffffffc06af613 <sfs_add_link+0x413>
		struct sfs_dir_entry *del = (struct sfs_dir_entry *)((char *)de + name_len);
ffffffffc06af5ec:	44 8b 55 b8          	mov    -0x48(%rbp),%r10d
		del->rec_len = cpu_to_le16(rec_len - name_len);
ffffffffc06af5f0:	44 8b 5d a8          	mov    -0x58(%rbp),%r11d
		struct sfs_dir_entry *del = (struct sfs_dir_entry *)((char *)de + name_len);
ffffffffc06af5f4:	41 0f b7 c2          	movzwl %r10w,%eax
		del->rec_len = cpu_to_le16(rec_len - name_len);
ffffffffc06af5f8:	45 29 d3             	sub    %r10d,%r11d
		struct sfs_dir_entry *del = (struct sfs_dir_entry *)((char *)de + name_len);
ffffffffc06af5fb:	4c 01 c8             	add    %r9,%rax
		del->rec_len = cpu_to_le16(rec_len - name_len);
ffffffffc06af5fe:	66 44 89 58 04       	mov    %r11w,0x4(%rax)
		de->rec_len = cpu_to_le16(name_len);
ffffffffc06af603:	66 45 89 51 04       	mov    %r10w,0x4(%r9)
		de = del;
ffffffffc06af608:	49 89 c1             	mov    %rax,%r9
ffffffffc06af60b:	48 8d 40 08          	lea    0x8(%rax),%rax
ffffffffc06af60f:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
	de->name_len = namelen;
ffffffffc06af613:	8b 45 c8             	mov    -0x38(%rbp),%eax
	return __builtin_memcpy(p, q, size);
ffffffffc06af616:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
ffffffffc06af61a:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
ffffffffc06af61e:	4c 89 4d c8          	mov    %r9,-0x38(%rbp)
ffffffffc06af622:	41 88 41 06          	mov    %al,0x6(%r9)
	memcpy(de->name, name, namelen + 1);
ffffffffc06af626:	83 c0 01             	add    $0x1,%eax
ffffffffc06af629:	48 63 d0             	movslq %eax,%rdx
ffffffffc06af62c:	e8 00 00 00 00       	callq  ffffffffc06af631 <sfs_add_link+0x431>
	de->inode = cpu_to_le32(inode->i_ino);
ffffffffc06af631:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
ffffffffc06af635:	4c 8b 4d c8          	mov    -0x38(%rbp),%r9
	err = sfs_commit_chunk(page, pos, rec_len);
ffffffffc06af639:	48 89 de             	mov    %rbx,%rsi
ffffffffc06af63c:	44 89 f2             	mov    %r14d,%edx
ffffffffc06af63f:	4c 89 ff             	mov    %r15,%rdi
	de->inode = cpu_to_le32(inode->i_ino);
ffffffffc06af642:	48 8b 41 40          	mov    0x40(%rcx),%rax
ffffffffc06af646:	41 89 01             	mov    %eax,(%r9)
	de->file_type = inode->i_mode;
ffffffffc06af649:	0f b7 01             	movzwl (%rcx),%eax
ffffffffc06af64c:	41 88 41 07          	mov    %al,0x7(%r9)
	err = sfs_commit_chunk(page, pos, rec_len);
ffffffffc06af650:	e8 00 00 00 00       	callq  ffffffffc06af655 <sfs_add_link+0x455>
	dir->i_mtime = dir->i_ctime = current_time(dir);
ffffffffc06af655:	4c 89 e7             	mov    %r12,%rdi
	err = sfs_commit_chunk(page, pos, rec_len);
ffffffffc06af658:	41 89 c5             	mov    %eax,%r13d
	dir->i_mtime = dir->i_ctime = current_time(dir);
ffffffffc06af65b:	e8 00 00 00 00       	callq  ffffffffc06af660 <sfs_add_link+0x460>
ffffffffc06af660:	be 07 00 00 00       	mov    $0x7,%esi
ffffffffc06af665:	49 89 44 24 78       	mov    %rax,0x78(%r12)
ffffffffc06af66a:	49 89 94 24 80 00 00 	mov    %rdx,0x80(%r12)
ffffffffc06af671:	00 
ffffffffc06af672:	49 89 44 24 68       	mov    %rax,0x68(%r12)
ffffffffc06af677:	49 89 54 24 70       	mov    %rdx,0x70(%r12)
ffffffffc06af67c:	4c 89 e7             	mov    %r12,%rdi
ffffffffc06af67f:	e8 00 00 00 00       	callq  ffffffffc06af684 <sfs_add_link+0x484>
ffffffffc06af684:	e9 53 fe ff ff       	jmpq   ffffffffc06af4dc <sfs_add_link+0x2dc>
ffffffffc06af689:	4d 89 e1             	mov    %r12,%r9
ffffffffc06af68c:	41 89 d6             	mov    %edx,%r14d
ffffffffc06af68f:	4c 8b 65 a8          	mov    -0x58(%rbp),%r12
ffffffffc06af693:	e9 b6 fe ff ff       	jmpq   ffffffffc06af54e <sfs_add_link+0x34e>
			err = -EEXIST;
ffffffffc06af698:	41 bd ef ff ff ff    	mov    $0xffffffef,%r13d
ffffffffc06af69e:	e9 25 fe ff ff       	jmpq   ffffffffc06af4c8 <sfs_add_link+0x2c8>
ffffffffc06af6a3:	0f 1f 00             	nopl   (%rax)
ffffffffc06af6a6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffffc06af6ad:	00 00 00 

ffffffffc06af6b0 <sfs_create>:
{
ffffffffc06af6b0:	e8 00 00 00 00       	callq  ffffffffc06af6b5 <sfs_create+0x5>
ffffffffc06af6b5:	55                   	push   %rbp
ffffffffc06af6b6:	48 89 e5             	mov    %rsp,%rbp
ffffffffc06af6b9:	41 55                	push   %r13
ffffffffc06af6bb:	41 54                	push   %r12
ffffffffc06af6bd:	53                   	push   %rbx
ffffffffc06af6be:	49 89 f4             	mov    %rsi,%r12
ffffffffc06af6c1:	49 89 fd             	mov    %rdi,%r13
	printk(KERN_ERR "jy: create %s\n", dentry->d_name.name);
ffffffffc06af6c4:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
{
ffffffffc06af6cb:	89 d3                	mov    %edx,%ebx
	printk(KERN_ERR "jy: create %s\n", dentry->d_name.name);
ffffffffc06af6cd:	e8 00 00 00 00       	callq  ffffffffc06af6d2 <sfs_create+0x22>
	inode = sfs_new_inode(dir, mode);
ffffffffc06af6d2:	49 8b 74 24 28       	mov    0x28(%r12),%rsi
ffffffffc06af6d7:	48 85 f6             	test   %rsi,%rsi
ffffffffc06af6da:	0f 85 9c 00 00 00    	jne    ffffffffc06af77c <sfs_create+0xcc>
		return PTR_ERR(inode);
ffffffffc06af6e0:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06af6e7:	e8 00 00 00 00       	callq  ffffffffc06af6ec <sfs_create+0x3c>
	printk(KERN_ERR "jy: create0\n");
ffffffffc06af6ec:	0f b7 f3             	movzwl %bx,%esi
ffffffffc06af6ef:	4c 89 ef             	mov    %r13,%rdi
ffffffffc06af6f2:	e8 00 00 00 00       	callq  ffffffffc06af6f7 <sfs_create+0x47>

ffffffffc06af6f7:	48 3d 00 f0 ff ff    	cmp    $0xfffffffffffff000,%rax
	printk(KERN_ERR "jy: create0\n");
ffffffffc06af6fd:	48 89 c3             	mov    %rax,%rbx
	inode->i_op = &sfs_file_inode_operations;
ffffffffc06af700:	41 89 c5             	mov    %eax,%r13d

ffffffffc06af703:	77 6d                	ja     ffffffffc06af772 <sfs_create+0xc2>
	inode->i_fop = &sfs_file_operations;
ffffffffc06af705:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06af70c:	e8 00 00 00 00       	callq  ffffffffc06af711 <sfs_create+0x61>
	return sfs_add_nondir(dentry, inode);
ffffffffc06af711:	48 8b 43 30          	mov    0x30(%rbx),%rax
ffffffffc06af715:	be 07 00 00 00       	mov    $0x7,%esi
	mark_inode_dirty(inode);
ffffffffc06af71a:	48 c7 43 20 00 00 00 	movq   $0x0,0x20(%rbx)
ffffffffc06af721:	00 
	printk(KERN_ERR "jy: create1\n");
ffffffffc06af722:	48 c7 83 68 01 00 00 	movq   $0x0,0x168(%rbx)
ffffffffc06af729:	00 00 00 00 
ffffffffc06af72d:	48 89 df             	mov    %rbx,%rdi
	return sfs_add_nondir(dentry, inode);
ffffffffc06af730:	48 c7 40 70 00 00 00 	movq   $0x0,0x70(%rax)
ffffffffc06af737:	00 
ffffffffc06af738:	e8 00 00 00 00       	callq  ffffffffc06af73d <sfs_create+0x8d>

ffffffffc06af73d:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06af744:	e8 00 00 00 00       	callq  ffffffffc06af749 <sfs_create+0x99>
	printk(KERN_ERR "jy: add_nondir\n");
ffffffffc06af749:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06af750:	e8 00 00 00 00       	callq  ffffffffc06af755 <sfs_create+0xa5>
	err = sfs_add_link(dentry, inode);
ffffffffc06af755:	48 89 de             	mov    %rbx,%rsi
ffffffffc06af758:	4c 89 e7             	mov    %r12,%rdi
ffffffffc06af75b:	e8 00 00 00 00       	callq  ffffffffc06af760 <sfs_create+0xb0>
	if (!err) {
ffffffffc06af760:	85 c0                	test   %eax,%eax
	err = sfs_add_link(dentry, inode);
ffffffffc06af762:	41 89 c5             	mov    %eax,%r13d
	if (!err) {
ffffffffc06af765:	75 26                	jne    ffffffffc06af78d <sfs_create+0xdd>
		d_instantiate_new(dentry, inode);
ffffffffc06af767:	48 89 de             	mov    %rbx,%rsi
ffffffffc06af76a:	4c 89 e7             	mov    %r12,%rdi
ffffffffc06af76d:	e8 00 00 00 00       	callq  ffffffffc06af772 <sfs_create+0xc2>
{
ffffffffc06af772:	5b                   	pop    %rbx
ffffffffc06af773:	44 89 e8             	mov    %r13d,%eax
ffffffffc06af776:	41 5c                	pop    %r12
ffffffffc06af778:	41 5d                	pop    %r13
ffffffffc06af77a:	5d                   	pop    %rbp
ffffffffc06af77b:	c3                   	retq   
	if (IS_ERR(inode))
ffffffffc06af77c:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06af783:	e8 00 00 00 00       	callq  ffffffffc06af788 <sfs_create+0xd8>
ffffffffc06af788:	e9 53 ff ff ff       	jmpq   ffffffffc06af6e0 <sfs_create+0x30>
	printk(KERN_ERR "jy: add_nondir1\n");
ffffffffc06af78d:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06af794:	e8 00 00 00 00       	callq  ffffffffc06af799 <sfs_create+0xe9>
	drop_nlink(inode);
ffffffffc06af799:	48 89 df             	mov    %rbx,%rdi
ffffffffc06af79c:	e8 00 00 00 00       	callq  ffffffffc06af7a1 <sfs_create+0xf1>
	__mark_inode_dirty(inode, I_DIRTY);
ffffffffc06af7a1:	be 07 00 00 00       	mov    $0x7,%esi
ffffffffc06af7a6:	48 89 df             	mov    %rbx,%rdi
ffffffffc06af7a9:	e8 00 00 00 00       	callq  ffffffffc06af7ae <sfs_create+0xfe>
	printk(KERN_ERR "jy: add_nondir2\n");
ffffffffc06af7ae:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06af7b5:	e8 00 00 00 00       	callq  ffffffffc06af7ba <sfs_create+0x10a>
	discard_new_inode(inode);
ffffffffc06af7ba:	48 89 df             	mov    %rbx,%rdi
ffffffffc06af7bd:	e8 00 00 00 00       	callq  ffffffffc06af7c2 <sfs_create+0x112>
	printk(KERN_ERR "jy: add_nondir3\n");
ffffffffc06af7c2:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06af7c9:	e8 00 00 00 00       	callq  ffffffffc06af7ce <sfs_create+0x11e>
ffffffffc06af7ce:	eb a2                	jmp    ffffffffc06af772 <sfs_create+0xc2>

ffffffffc06af7d0 <sfs_make_empty>:
	struct sfs_dir_entry *de;
ffffffffc06af7d0:	e8 00 00 00 00       	callq  ffffffffc06af7d5 <sfs_make_empty+0x5>
ffffffffc06af7d5:	55                   	push   %rbp
	return pagecache_get_page(mapping, offset,
ffffffffc06af7d6:	ba 07 00 00 00       	mov    $0x7,%edx
ffffffffc06af7db:	48 89 e5             	mov    %rsp,%rbp
ffffffffc06af7de:	41 57                	push   %r15
ffffffffc06af7e0:	41 56                	push   %r14
ffffffffc06af7e2:	41 55                	push   %r13
ffffffffc06af7e4:	41 54                	push   %r12
ffffffffc06af7e6:	49 89 fc             	mov    %rdi,%r12
ffffffffc06af7e9:	53                   	push   %rbx
	void *kaddr;
ffffffffc06af7ea:	48 8b 7f 30          	mov    0x30(%rdi),%rdi
	struct sfs_dir_entry *de;
ffffffffc06af7ee:	49 89 f6             	mov    %rsi,%r14
ffffffffc06af7f1:	31 f6                	xor    %esi,%esi
ffffffffc06af7f3:	8b 4f 18             	mov    0x18(%rdi),%ecx
ffffffffc06af7f6:	e8 00 00 00 00       	callq  ffffffffc06af7fb <sfs_make_empty+0x2b>

ffffffffc06af7fb:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06af802:	48 89 c3             	mov    %rax,%rbx
ffffffffc06af805:	e8 00 00 00 00       	callq  ffffffffc06af80a <sfs_make_empty+0x3a>
	printk(KERN_ERR "jy: make_empty0\n");
ffffffffc06af80a:	48 85 db             	test   %rbx,%rbx
ffffffffc06af80d:	75 14                	jne    ffffffffc06af823 <sfs_make_empty+0x53>
	err = sfs_prepare_chunk(page, 0, SFS_BLKSIZE);
ffffffffc06af80f:	41 bd f4 ff ff ff    	mov    $0xfffffff4,%r13d
{
ffffffffc06af815:	5b                   	pop    %rbx
ffffffffc06af816:	44 89 e8             	mov    %r13d,%eax
ffffffffc06af819:	41 5c                	pop    %r12
ffffffffc06af81b:	41 5d                	pop    %r13
ffffffffc06af81d:	41 5e                	pop    %r14
ffffffffc06af81f:	41 5f                	pop    %r15
ffffffffc06af821:	5d                   	pop    %rbp
ffffffffc06af822:	c3                   	retq   
		unlock_page(page);
ffffffffc06af823:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06af82a:	e8 00 00 00 00       	callq  ffffffffc06af82f <sfs_make_empty+0x5f>
	return __block_write_begin(page, pos, len, sfs_get_block);
ffffffffc06af82f:	31 f6                	xor    %esi,%esi
ffffffffc06af831:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
ffffffffc06af838:	ba 00 10 00 00       	mov    $0x1000,%edx
ffffffffc06af83d:	48 89 df             	mov    %rbx,%rdi
ffffffffc06af840:	e8 00 00 00 00       	callq  ffffffffc06af845 <sfs_make_empty+0x75>
	}
ffffffffc06af845:	85 c0                	test   %eax,%eax
	return __block_write_begin(page, pos, len, sfs_get_block);
ffffffffc06af847:	41 89 c5             	mov    %eax,%r13d
	}
ffffffffc06af84a:	74 1e                	je     ffffffffc06af86a <sfs_make_empty+0x9a>

ffffffffc06af84c:	48 89 df             	mov    %rbx,%rdi
ffffffffc06af84f:	e8 00 00 00 00       	callq  ffffffffc06af854 <sfs_make_empty+0x84>
}
ffffffffc06af854:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06af85b:	e8 00 00 00 00       	callq  ffffffffc06af860 <sfs_make_empty+0x90>

ffffffffc06af860:	48 89 df             	mov    %rbx,%rdi
ffffffffc06af863:	e8 98 e7 ff ff       	callq  ffffffffc06ae000 <put_page>
static int sfs_mkdir(struct inode *dir, struct dentry *dentry, umode_t mode)
ffffffffc06af868:	eb ab                	jmp    ffffffffc06af815 <sfs_make_empty+0x45>

ffffffffc06af86a:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06af871:	e8 00 00 00 00       	callq  ffffffffc06af876 <sfs_make_empty+0xa6>

DECLARE_PER_CPU(struct task_struct *, current_task);

static __always_inline struct task_struct *get_current(void)
{
	return this_cpu_read_stable(current_task);
ffffffffc06af876:	65 4c 8b 3c 25 00 00 	mov    %gs:0x0,%r15
ffffffffc06af87d:	00 00 
}
#endif

static __always_inline void pagefault_disabled_inc(void)
{
	current->pagefault_disabled++;
ffffffffc06af87f:	41 83 87 18 13 00 00 	addl   $0x1,0x1318(%r15)
ffffffffc06af886:	01 
ffffffffc06af887:	49 89 dd             	mov    %rbx,%r13
ffffffffc06af88a:	4c 2b 2d 00 00 00 00 	sub    0x0(%rip),%r13        # ffffffffc06af891 <sfs_make_empty+0xc1>
	return __builtin_memset(p, c, size);
ffffffffc06af891:	31 c0                	xor    %eax,%eax
ffffffffc06af893:	49 c1 fd 06          	sar    $0x6,%r13
ffffffffc06af897:	49 c1 e5 0c          	shl    $0xc,%r13
ffffffffc06af89b:	4c 03 2d 00 00 00 00 	add    0x0(%rip),%r13        # ffffffffc06af8a2 <sfs_make_empty+0xd2>
ffffffffc06af8a2:	49 8d 7d 08          	lea    0x8(%r13),%rdi
ffffffffc06af8a6:	4c 89 e9             	mov    %r13,%rcx
ffffffffc06af8a9:	49 c7 45 00 00 00 00 	movq   $0x0,0x0(%r13)
ffffffffc06af8b0:	00 
ffffffffc06af8b1:	49 c7 85 f8 0f 00 00 	movq   $0x0,0xff8(%r13)
ffffffffc06af8b8:	00 00 00 00 
ffffffffc06af8bc:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
ffffffffc06af8c0:	48 29 f9             	sub    %rdi,%rcx
ffffffffc06af8c3:	81 c1 00 10 00 00    	add    $0x1000,%ecx
ffffffffc06af8c9:	c1 e9 03             	shr    $0x3,%ecx
ffffffffc06af8cc:	f3 48 ab             	rep stos %rax,%es:(%rdi)
	return __builtin_memcpy(p, q, size);
ffffffffc06af8cf:	8b 05 00 00 00 00    	mov    0x0(%rip),%eax        # ffffffffc06af8d5 <sfs_make_empty+0x105>
	de->inode = cpu_to_le32(inode->i_ino);
ffffffffc06af8d5:	41 c6 45 06 01       	movb   $0x1,0x6(%r13)
	de->file_type = fs_umode_to_ftype(inode->i_mode);
ffffffffc06af8da:	66 41 c7 45 04 0c 00 	movw   $0xc,0x4(%r13)
ffffffffc06af8e1:	41 89 45 08          	mov    %eax,0x8(%r13)
	de = (struct sfs_dir_entry *)(kaddr + SFS_DIR_REC_LEN(1));
ffffffffc06af8e5:	49 8b 44 24 40       	mov    0x40(%r12),%rax
ffffffffc06af8ea:	41 89 45 00          	mov    %eax,0x0(%r13)
	de->name_len = 2;
ffffffffc06af8ee:	41 0f b7 3c 24       	movzwl (%r12),%edi
ffffffffc06af8f3:	e8 00 00 00 00       	callq  ffffffffc06af8f8 <sfs_make_empty+0x128>
ffffffffc06af8f8:	41 88 45 07          	mov    %al,0x7(%r13)
ffffffffc06af8fc:	8b 05 00 00 00 00    	mov    0x0(%rip),%eax        # ffffffffc06af902 <sfs_make_empty+0x132>
	de->inode = cpu_to_le32(dir->i_ino);
ffffffffc06af902:	41 c6 45 12 02       	movb   $0x2,0x12(%r13)
	de->file_type = fs_umode_to_ftype(inode->i_mode);
ffffffffc06af907:	66 41 c7 45 10 f4 0f 	movw   $0xff4,0x10(%r13)
ffffffffc06af90e:	41 89 45 14          	mov    %eax,0x14(%r13)
	printk(KERN_ERR "jy: make_empty2\n");
ffffffffc06af912:	49 8b 46 40          	mov    0x40(%r14),%rax
ffffffffc06af916:	41 89 45 0c          	mov    %eax,0xc(%r13)
	kunmap_atomic(kaddr);
ffffffffc06af91a:	41 0f b7 3c 24       	movzwl (%r12),%edi
ffffffffc06af91f:	e8 00 00 00 00       	callq  ffffffffc06af924 <sfs_make_empty+0x154>
fail:
ffffffffc06af924:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
	kunmap_atomic(kaddr);
ffffffffc06af92b:	41 88 45 13          	mov    %al,0x13(%r13)
fail:
ffffffffc06af92f:	e8 00 00 00 00       	callq  ffffffffc06af934 <sfs_make_empty+0x164>
}

static __always_inline void pagefault_disabled_dec(void)
{
	current->pagefault_disabled--;
ffffffffc06af934:	41 83 af 18 13 00 00 	subl   $0x1,0x1318(%r15)
ffffffffc06af93b:	01 
	put_page(page);
ffffffffc06af93c:	ba 00 10 00 00       	mov    $0x1000,%edx
ffffffffc06af941:	31 f6                	xor    %esi,%esi
ffffffffc06af943:	48 89 df             	mov    %rbx,%rdi
ffffffffc06af946:	e8 00 00 00 00       	callq  ffffffffc06af94b <sfs_make_empty+0x17b>
ffffffffc06af94b:	41 89 c5             	mov    %eax,%r13d
ffffffffc06af94e:	e9 01 ff ff ff       	jmpq   ffffffffc06af854 <sfs_make_empty+0x84>
ffffffffc06af953:	0f 1f 00             	nopl   (%rax)
ffffffffc06af956:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffffc06af95d:	00 00 00 

ffffffffc06af960 <sfs_mkdir>:

ffffffffc06af960:	e8 00 00 00 00       	callq  ffffffffc06af965 <sfs_mkdir+0x5>
ffffffffc06af965:	55                   	push   %rbp
ffffffffc06af966:	48 89 e5             	mov    %rsp,%rbp
ffffffffc06af969:	41 56                	push   %r14
ffffffffc06af96b:	41 55                	push   %r13
ffffffffc06af96d:	41 54                	push   %r12
ffffffffc06af96f:	53                   	push   %rbx
ffffffffc06af970:	49 89 fc             	mov    %rdi,%r12
	inode = sfs_new_inode(dir, S_IFDIR|mode);
ffffffffc06af973:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi

ffffffffc06af97a:	89 d3                	mov    %edx,%ebx
ffffffffc06af97c:	49 89 f5             	mov    %rsi,%r13
	inode = sfs_new_inode(dir, S_IFDIR|mode);
ffffffffc06af97f:	e8 00 00 00 00       	callq  ffffffffc06af984 <sfs_mkdir+0x24>
	inc_nlink(inode);
ffffffffc06af984:	4c 89 e7             	mov    %r12,%rdi
	if (IS_ERR(inode))
ffffffffc06af987:	80 cf 40             	or     $0x40,%bh
ffffffffc06af98a:	e8 00 00 00 00       	callq  ffffffffc06af98f <sfs_mkdir+0x2f>
	__mark_inode_dirty(inode, I_DIRTY);
ffffffffc06af98f:	be 07 00 00 00       	mov    $0x7,%esi
ffffffffc06af994:	4c 89 e7             	mov    %r12,%rdi
ffffffffc06af997:	e8 00 00 00 00       	callq  ffffffffc06af99c <sfs_mkdir+0x3c>
ffffffffc06af99c:	0f b7 f3             	movzwl %bx,%esi
ffffffffc06af99f:	4c 89 e7             	mov    %r12,%rdi
ffffffffc06af9a2:	e8 00 00 00 00       	callq  ffffffffc06af9a7 <sfs_mkdir+0x47>
		goto out_dir;
ffffffffc06af9a7:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
	if (IS_ERR(inode))
ffffffffc06af9ae:	48 89 c3             	mov    %rax,%rbx
		goto out_dir;
ffffffffc06af9b1:	e8 00 00 00 00       	callq  ffffffffc06af9b6 <sfs_mkdir+0x56>
	printk(KERN_ERR "jy: mkdir1\n");
ffffffffc06af9b6:	48 81 fb 00 f0 ff ff 	cmp    $0xfffffffffffff000,%rbx
	
ffffffffc06af9bd:	41 89 de             	mov    %ebx,%r14d
	printk(KERN_ERR "jy: mkdir1\n");
ffffffffc06af9c0:	0f 87 9c 00 00 00    	ja     ffffffffc06afa62 <sfs_mkdir+0x102>
	inode->i_mapping->a_ops = &sfs_aops;
ffffffffc06af9c6:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06af9cd:	e8 00 00 00 00       	callq  ffffffffc06af9d2 <sfs_mkdir+0x72>

ffffffffc06af9d2:	48 8b 43 30          	mov    0x30(%rbx),%rax

ffffffffc06af9d6:	48 c7 43 20 00 00 00 	movq   $0x0,0x20(%rbx)
ffffffffc06af9dd:	00 
	inc_nlink(inode);
ffffffffc06af9de:	48 89 df             	mov    %rbx,%rdi
	inode_inc_link_count(inode);
ffffffffc06af9e1:	48 c7 83 68 01 00 00 	movq   $0x0,0x168(%rbx)
ffffffffc06af9e8:	00 00 00 00 

ffffffffc06af9ec:	48 c7 40 70 00 00 00 	movq   $0x0,0x70(%rax)
ffffffffc06af9f3:	00 
ffffffffc06af9f4:	e8 00 00 00 00       	callq  ffffffffc06af9f9 <sfs_mkdir+0x99>
	__mark_inode_dirty(inode, I_DIRTY);
ffffffffc06af9f9:	be 07 00 00 00       	mov    $0x7,%esi
ffffffffc06af9fe:	48 89 df             	mov    %rbx,%rdi
ffffffffc06afa01:	e8 00 00 00 00       	callq  ffffffffc06afa06 <sfs_mkdir+0xa6>
		goto out_fail;
ffffffffc06afa06:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06afa0d:	e8 00 00 00 00       	callq  ffffffffc06afa12 <sfs_mkdir+0xb2>

ffffffffc06afa12:	4c 89 e6             	mov    %r12,%rsi
ffffffffc06afa15:	48 89 df             	mov    %rbx,%rdi
ffffffffc06afa18:	e8 00 00 00 00       	callq  ffffffffc06afa1d <sfs_mkdir+0xbd>
	printk(KERN_ERR "jy: mkdir3\n");
ffffffffc06afa1d:	85 c0                	test   %eax,%eax

ffffffffc06afa1f:	41 89 c6             	mov    %eax,%r14d
	printk(KERN_ERR "jy: mkdir3\n");
ffffffffc06afa22:	74 6b                	je     ffffffffc06afa8f <sfs_mkdir+0x12f>
	discard_new_inode(inode);
ffffffffc06afa24:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06afa2b:	e8 00 00 00 00       	callq  ffffffffc06afa30 <sfs_mkdir+0xd0>
	drop_nlink(inode);
ffffffffc06afa30:	48 89 df             	mov    %rbx,%rdi
ffffffffc06afa33:	e8 00 00 00 00       	callq  ffffffffc06afa38 <sfs_mkdir+0xd8>
	__mark_inode_dirty(inode, I_DIRTY);
ffffffffc06afa38:	be 07 00 00 00       	mov    $0x7,%esi
ffffffffc06afa3d:	48 89 df             	mov    %rbx,%rdi
ffffffffc06afa40:	e8 00 00 00 00       	callq  ffffffffc06afa45 <sfs_mkdir+0xe5>
	drop_nlink(inode);
ffffffffc06afa45:	48 89 df             	mov    %rbx,%rdi
ffffffffc06afa48:	e8 00 00 00 00       	callq  ffffffffc06afa4d <sfs_mkdir+0xed>
	__mark_inode_dirty(inode, I_DIRTY);
ffffffffc06afa4d:	48 89 df             	mov    %rbx,%rdi
ffffffffc06afa50:	be 07 00 00 00       	mov    $0x7,%esi
ffffffffc06afa55:	e8 00 00 00 00       	callq  ffffffffc06afa5a <sfs_mkdir+0xfa>
	printk(KERN_ERR "jy: mkdir6\n");
ffffffffc06afa5a:	48 89 df             	mov    %rbx,%rdi
ffffffffc06afa5d:	e8 00 00 00 00       	callq  ffffffffc06afa62 <sfs_mkdir+0x102>
}
ffffffffc06afa62:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06afa69:	e8 00 00 00 00       	callq  ffffffffc06afa6e <sfs_mkdir+0x10e>
	drop_nlink(inode);
ffffffffc06afa6e:	4c 89 e7             	mov    %r12,%rdi
ffffffffc06afa71:	e8 00 00 00 00       	callq  ffffffffc06afa76 <sfs_mkdir+0x116>
	__mark_inode_dirty(inode, I_DIRTY);
ffffffffc06afa76:	4c 89 e7             	mov    %r12,%rdi
ffffffffc06afa79:	be 07 00 00 00       	mov    $0x7,%esi
ffffffffc06afa7e:	e8 00 00 00 00       	callq  ffffffffc06afa83 <sfs_mkdir+0x123>
{
ffffffffc06afa83:	44 89 f0             	mov    %r14d,%eax
ffffffffc06afa86:	5b                   	pop    %rbx
ffffffffc06afa87:	41 5c                	pop    %r12
ffffffffc06afa89:	41 5d                	pop    %r13
ffffffffc06afa8b:	41 5e                	pop    %r14
ffffffffc06afa8d:	5d                   	pop    %rbp
ffffffffc06afa8e:	c3                   	retq   
		goto out_fail;
ffffffffc06afa8f:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06afa96:	e8 00 00 00 00       	callq  ffffffffc06afa9b <sfs_mkdir+0x13b>

ffffffffc06afa9b:	48 89 de             	mov    %rbx,%rsi
ffffffffc06afa9e:	4c 89 ef             	mov    %r13,%rdi
ffffffffc06afaa1:	e8 00 00 00 00       	callq  ffffffffc06afaa6 <sfs_mkdir+0x146>
	printk(KERN_ERR "jy: mkdir4\n");
ffffffffc06afaa6:	85 c0                	test   %eax,%eax

ffffffffc06afaa8:	41 89 c6             	mov    %eax,%r14d
	printk(KERN_ERR "jy: mkdir4\n");
ffffffffc06afaab:	0f 85 73 ff ff ff    	jne    ffffffffc06afa24 <sfs_mkdir+0xc4>

ffffffffc06afab1:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06afab8:	e8 00 00 00 00       	callq  ffffffffc06afabd <sfs_mkdir+0x15d>
out_fail:
ffffffffc06afabd:	48 89 de             	mov    %rbx,%rsi
ffffffffc06afac0:	4c 89 ef             	mov    %r13,%rdi
ffffffffc06afac3:	e8 00 00 00 00       	callq  ffffffffc06afac8 <sfs_mkdir+0x168>
{
ffffffffc06afac8:	44 89 f0             	mov    %r14d,%eax
ffffffffc06afacb:	5b                   	pop    %rbx
ffffffffc06afacc:	41 5c                	pop    %r12
ffffffffc06aface:	41 5d                	pop    %r13
ffffffffc06afad0:	41 5e                	pop    %r14
ffffffffc06afad2:	5d                   	pop    %rbp
ffffffffc06afad3:	c3                   	retq   
ffffffffc06afad4:	66 90                	xchg   %ax,%ax
ffffffffc06afad6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffffc06afadd:	00 00 00 

ffffffffc06afae0 <sfs_inode_by_name>:
	struct page *page;
ffffffffc06afae0:	e8 00 00 00 00       	callq  ffffffffc06afae5 <sfs_inode_by_name+0x5>
ffffffffc06afae5:	55                   	push   %rbp
ffffffffc06afae6:	48 89 e5             	mov    %rsp,%rbp
ffffffffc06afae9:	41 54                	push   %r12
ffffffffc06afaeb:	53                   	push   %rbx
ffffffffc06afaec:	48 89 fb             	mov    %rdi,%rbx
		printk(KERN_ERR "jy: inode_by_name0\n");
ffffffffc06afaef:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
	struct page *page;
ffffffffc06afaf6:	49 89 f4             	mov    %rsi,%r12
ffffffffc06afaf9:	48 83 ec 10          	sub    $0x10,%rsp
ffffffffc06afafd:	65 48 8b 04 25 28 00 	mov    %gs:0x28,%rax
ffffffffc06afb04:	00 00 
ffffffffc06afb06:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffffc06afb0a:	31 c0                	xor    %eax,%eax
		printk(KERN_ERR "jy: inode_by_name0\n");
ffffffffc06afb0c:	e8 00 00 00 00       	callq  ffffffffc06afb11 <sfs_inode_by_name+0x31>
		ret = le32_to_cpu(de->inode);
ffffffffc06afb11:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
ffffffffc06afb15:	4c 89 e6             	mov    %r12,%rsi
ffffffffc06afb18:	48 89 df             	mov    %rbx,%rdi
ffffffffc06afb1b:	e8 00 00 00 00       	callq  ffffffffc06afb20 <sfs_inode_by_name+0x40>
		sfs_put_page(page);
ffffffffc06afb20:	48 85 c0             	test   %rax,%rax
ffffffffc06afb23:	75 29                	jne    ffffffffc06afb4e <sfs_inode_by_name+0x6e>

ffffffffc06afb25:	31 db                	xor    %ebx,%ebx

ffffffffc06afb27:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06afb2e:	e8 00 00 00 00       	callq  ffffffffc06afb33 <sfs_inode_by_name+0x53>
{
ffffffffc06afb33:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffffc06afb37:	65 48 33 0c 25 28 00 	xor    %gs:0x28,%rcx
ffffffffc06afb3e:	00 00 
ffffffffc06afb40:	48 89 d8             	mov    %rbx,%rax
ffffffffc06afb43:	75 25                	jne    ffffffffc06afb6a <sfs_inode_by_name+0x8a>
ffffffffc06afb45:	48 83 c4 10          	add    $0x10,%rsp
ffffffffc06afb49:	5b                   	pop    %rbx
ffffffffc06afb4a:	41 5c                	pop    %r12
ffffffffc06afb4c:	5d                   	pop    %rbp
ffffffffc06afb4d:	c3                   	retq   
	}
ffffffffc06afb4e:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06afb55:	48 89 c3             	mov    %rax,%rbx
ffffffffc06afb58:	e8 00 00 00 00       	callq  ffffffffc06afb5d <sfs_inode_by_name+0x7d>
	put_page(page);
ffffffffc06afb5d:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
	printk(KERN_ERR "jy: inode_by_name1\n");
ffffffffc06afb61:	8b 1b                	mov    (%rbx),%ebx
	put_page(page);
ffffffffc06afb63:	e8 98 e4 ff ff       	callq  ffffffffc06ae000 <put_page>
ffffffffc06afb68:	eb bd                	jmp    ffffffffc06afb27 <sfs_inode_by_name+0x47>
{
ffffffffc06afb6a:	e8 00 00 00 00       	callq  ffffffffc06afb6f <sfs_inode_by_name+0x8f>
ffffffffc06afb6f:	90                   	nop

ffffffffc06afb70 <sfs_getattr>:
	generic_fillattr(inode, stat);
ffffffffc06afb70:	e8 00 00 00 00       	callq  ffffffffc06afb75 <sfs_getattr+0x5>
ffffffffc06afb75:	55                   	push   %rbp

ffffffffc06afb76:	48 8b 47 08          	mov    0x8(%rdi),%rax
	generic_fillattr(inode, stat);
ffffffffc06afb7a:	48 89 e5             	mov    %rsp,%rbp
}
ffffffffc06afb7d:	48 8b 78 30          	mov    0x30(%rax),%rdi
ffffffffc06afb81:	e8 00 00 00 00       	callq  ffffffffc06afb86 <sfs_getattr+0x16>
{
ffffffffc06afb86:	31 c0                	xor    %eax,%eax
ffffffffc06afb88:	5d                   	pop    %rbp
ffffffffc06afb89:	c3                   	retq   
ffffffffc06afb8a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffffc06afb90 <sfs_iget>:
	struct inode *inode;
ffffffffc06afb90:	e8 00 00 00 00       	callq  ffffffffc06afb95 <sfs_iget+0x5>
ffffffffc06afb95:	55                   	push   %rbp
ffffffffc06afb96:	48 89 e5             	mov    %rsp,%rbp
ffffffffc06afb99:	41 57                	push   %r15
ffffffffc06afb9b:	41 56                	push   %r14
ffffffffc06afb9d:	41 55                	push   %r13
ffffffffc06afb9f:	41 54                	push   %r12
ffffffffc06afba1:	49 89 fd             	mov    %rdi,%r13
ffffffffc06afba4:	53                   	push   %rbx
ffffffffc06afba5:	49 89 f4             	mov    %rsi,%r12
		return ERR_PTR(-ENOMEM);
ffffffffc06afba8:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi

ffffffffc06afbaf:	48 c7 c3 f4 ff ff ff 	mov    $0xfffffffffffffff4,%rbx
		return ERR_PTR(-ENOMEM);
ffffffffc06afbb6:	e8 00 00 00 00       	callq  ffffffffc06afbbb <sfs_iget+0x2b>
	if (!(inode->i_state & I_NEW))
ffffffffc06afbbb:	4c 89 e6             	mov    %r12,%rsi
ffffffffc06afbbe:	4c 89 ef             	mov    %r13,%rdi
ffffffffc06afbc1:	e8 00 00 00 00       	callq  ffffffffc06afbc6 <sfs_iget+0x36>
		return inode;
ffffffffc06afbc6:	48 85 c0             	test   %rax,%rax
ffffffffc06afbc9:	74 0c                	je     ffffffffc06afbd7 <sfs_iget+0x47>
	inode->i_sb = sb;
ffffffffc06afbcb:	f6 80 98 00 00 00 08 	testb  $0x8,0x98(%rax)
ffffffffc06afbd2:	48 89 c3             	mov    %rax,%rbx
ffffffffc06afbd5:	75 0e                	jne    ffffffffc06afbe5 <sfs_iget+0x55>
{
ffffffffc06afbd7:	48 89 d8             	mov    %rbx,%rax
ffffffffc06afbda:	5b                   	pop    %rbx
ffffffffc06afbdb:	41 5c                	pop    %r12
ffffffffc06afbdd:	41 5d                	pop    %r13
ffffffffc06afbdf:	41 5e                	pop    %r14
ffffffffc06afbe1:	41 5f                	pop    %r15
ffffffffc06afbe3:	5d                   	pop    %rbp
ffffffffc06afbe4:	c3                   	retq   
	printk(KERN_ERR "jy: iget0 %lx\n", sfs_inotoba(ino));
ffffffffc06afbe5:	4c 89 68 28          	mov    %r13,0x28(%rax)
		sfs_msg(KERN_ERR, "sfs_iget", "Failed to read inode %d\n", ino);
ffffffffc06afbe9:	49 8b 85 b0 03 00 00 	mov    0x3b0(%r13),%rax
ffffffffc06afbf0:	4d 8d 7c 24 fd       	lea    -0x3(%r12),%r15
	return __bread_gfp(sb->s_bdev, block, sb->s_blocksize, __GFP_MOVABLE);
ffffffffc06afbf5:	49 8b bd d8 00 00 00 	mov    0xd8(%r13),%rdi
ffffffffc06afbfc:	41 8b 55 18          	mov    0x18(%r13),%edx
ffffffffc06afc00:	b9 08 00 00 00       	mov    $0x8,%ecx
ffffffffc06afc05:	8b 70 2c             	mov    0x2c(%rax),%esi
ffffffffc06afc08:	4c 01 fe             	add    %r15,%rsi
ffffffffc06afc0b:	e8 00 00 00 00       	callq  ffffffffc06afc10 <sfs_iget+0x80>
ffffffffc06afc10:	49 89 c6             	mov    %rax,%r14
		goto bad_inode;
ffffffffc06afc13:	49 8b 85 b0 03 00 00 	mov    0x3b0(%r13),%rax
ffffffffc06afc1a:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06afc21:	8b 70 2c             	mov    0x2c(%rax),%esi
ffffffffc06afc24:	4c 01 fe             	add    %r15,%rsi
ffffffffc06afc27:	e8 00 00 00 00       	callq  ffffffffc06afc2c <sfs_iget+0x9c>
	}
ffffffffc06afc2c:	4d 85 f6             	test   %r14,%r14
ffffffffc06afc2f:	0f 84 33 01 00 00    	je     ffffffffc06afd68 <sfs_iget+0x1d8>
	if (err)
ffffffffc06afc35:	4d 8b 66 28          	mov    0x28(%r14),%r12
	i_uid_write(inode, le32_to_cpu(sfs_inode->i_uid));
ffffffffc06afc39:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06afc40:	e8 00 00 00 00       	callq  ffffffffc06afc45 <sfs_iget+0xb5>
	set_nlink(inode, le16_to_cpu(sfs_inode->i_links));
ffffffffc06afc45:	41 0f b7 04 24       	movzwl (%r12),%eax
ffffffffc06afc4a:	66 89 03             	mov    %ax,(%rbx)
	inode->i_uid = make_kuid(inode->i_sb->s_user_ns, uid);
ffffffffc06afc4d:	48 8b 43 28          	mov    0x28(%rbx),%rax
ffffffffc06afc51:	41 8b 74 24 04       	mov    0x4(%r12),%esi
ffffffffc06afc56:	48 8b b8 b8 04 00 00 	mov    0x4b8(%rax),%rdi
ffffffffc06afc5d:	e8 00 00 00 00       	callq  ffffffffc06afc62 <sfs_iget+0xd2>
ffffffffc06afc62:	89 43 04             	mov    %eax,0x4(%rbx)
	inode->i_gid = make_kgid(inode->i_sb->s_user_ns, gid);
ffffffffc06afc65:	48 8b 43 28          	mov    0x28(%rbx),%rax
ffffffffc06afc69:	41 8b 74 24 08       	mov    0x8(%r12),%esi
ffffffffc06afc6e:	48 8b b8 b8 04 00 00 	mov    0x4b8(%rax),%rdi
ffffffffc06afc75:	e8 00 00 00 00       	callq  ffffffffc06afc7a <sfs_iget+0xea>
ffffffffc06afc7a:	89 43 08             	mov    %eax,0x8(%rbx)
	inode->i_ctime.tv_sec = (signed)le32_to_cpu(sfs_inode->i_ctime);
ffffffffc06afc7d:	41 0f b7 74 24 0c    	movzwl 0xc(%r12),%esi
ffffffffc06afc83:	48 89 df             	mov    %rbx,%rdi
ffffffffc06afc86:	e8 00 00 00 00       	callq  ffffffffc06afc8b <sfs_iget+0xfb>
	inode->i_mtime.tv_sec = (signed)le32_to_cpu(sfs_inode->i_mtime);
ffffffffc06afc8b:	41 8b 44 24 10       	mov    0x10(%r12),%eax
ffffffffc06afc90:	49 8d 74 24 4c       	lea    0x4c(%r12),%rsi
ffffffffc06afc95:	b9 0f 00 00 00       	mov    $0xf,%ecx
ffffffffc06afc9a:	48 89 43 50          	mov    %rax,0x50(%rbx)
	inode->i_atime.tv_nsec = inode->i_mtime.tv_nsec = inode->i_ctime.tv_nsec = 0;
ffffffffc06afc9e:	49 63 44 24 20       	movslq 0x20(%r12),%rax
ffffffffc06afca3:	48 89 43 58          	mov    %rax,0x58(%rbx)
	inode->i_blocks = le32_to_cpu(sfs_inode->i_blocks);
ffffffffc06afca7:	49 63 44 24 28       	movslq 0x28(%r12),%rax
ffffffffc06afcac:	48 89 43 78          	mov    %rax,0x78(%rbx)

ffffffffc06afcb0:	49 63 44 24 30       	movslq 0x30(%r12),%rax
	memcpy(si->i_data, sfs_inode->i_daddr, sizeof(si->i_data));
ffffffffc06afcb5:	48 c7 83 80 00 00 00 	movq   $0x0,0x80(%rbx)
ffffffffc06afcbc:	00 00 00 00 
ffffffffc06afcc0:	48 c7 43 70 00 00 00 	movq   $0x0,0x70(%rbx)
ffffffffc06afcc7:	00 
ffffffffc06afcc8:	48 c7 43 60 00 00 00 	movq   $0x0,0x60(%rbx)
ffffffffc06afccf:	00 

ffffffffc06afcd0:	48 89 43 68          	mov    %rax,0x68(%rbx)

ffffffffc06afcd4:	41 8b 44 24 18       	mov    0x18(%r12),%eax
ffffffffc06afcd9:	48 89 83 90 00 00 00 	mov    %rax,0x90(%rbx)
ffffffffc06afce0:	48 8d 43 b8          	lea    -0x48(%rbx),%rax
ffffffffc06afce4:	48 89 c7             	mov    %rax,%rdi
ffffffffc06afce7:	f3 a5                	rep movsl %ds:(%rsi),%es:(%rdi)
		__brelse(bh);
ffffffffc06afce9:	4c 89 f7             	mov    %r14,%rdi
ffffffffc06afcec:	e8 00 00 00 00       	callq  ffffffffc06afcf1 <sfs_iget+0x161>
	smp_mb();
ffffffffc06afcf1:	f0 83 44 24 fc 00    	lock addl $0x0,-0x4(%rsp)
ffffffffc06afcf7:	48 8b 93 48 01 00 00 	mov    0x148(%rbx),%rdx
ffffffffc06afcfe:	48 8d b3 48 01 00 00 	lea    0x148(%rbx),%rsi
		new = (cur & ~I_VERSION_QUERIED) + I_VERSION_INCREMENT;
ffffffffc06afd05:	48 89 d1             	mov    %rdx,%rcx
ffffffffc06afd08:	48 89 d0             	mov    %rdx,%rax
ffffffffc06afd0b:	48 83 e1 fe          	and    $0xfffffffffffffffe,%rcx
ffffffffc06afd0f:	48 83 c1 02          	add    $0x2,%rcx
ffffffffc06afd13:	f0 48 0f b1 0e       	lock cmpxchg %rcx,(%rsi)
		if (likely(old == cur))
ffffffffc06afd18:	48 39 c2             	cmp    %rax,%rdx
ffffffffc06afd1b:	0f 85 9c 00 00 00    	jne    ffffffffc06afdbd <sfs_iget+0x22d>
		inode->i_fop = &sfs_file_operations;
ffffffffc06afd21:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06afd28:	e8 00 00 00 00       	callq  ffffffffc06afd2d <sfs_iget+0x19d>
ffffffffc06afd2d:	0f b7 03             	movzwl (%rbx),%eax
ffffffffc06afd30:	66 25 00 f0          	and    $0xf000,%ax
		inode->i_mapping->a_ops = &sfs_aops;
ffffffffc06afd34:	66 3d 00 80          	cmp    $0x8000,%ax
ffffffffc06afd38:	74 5f                	je     ffffffffc06afd99 <sfs_iget+0x209>
		inode->i_mapping->a_ops = &sfs_aops;
ffffffffc06afd3a:	66 3d 00 40          	cmp    $0x4000,%ax
ffffffffc06afd3e:	0f 85 93 fe ff ff    	jne    ffffffffc06afbd7 <sfs_iget+0x47>

ffffffffc06afd44:	48 8b 43 30          	mov    0x30(%rbx),%rax
	} 
ffffffffc06afd48:	48 c7 43 20 00 00 00 	movq   $0x0,0x20(%rbx)
ffffffffc06afd4f:	00 
}
ffffffffc06afd50:	48 c7 83 68 01 00 00 	movq   $0x0,0x168(%rbx)
ffffffffc06afd57:	00 00 00 00 

ffffffffc06afd5b:	48 c7 40 70 00 00 00 	movq   $0x0,0x70(%rax)
ffffffffc06afd62:	00 
ffffffffc06afd63:	e9 6f fe ff ff       	jmpq   ffffffffc06afbd7 <sfs_iget+0x47>
	sfs_inode = (struct sfs_inode *)bh->b_data;
ffffffffc06afd68:	4c 89 e1             	mov    %r12,%rcx
ffffffffc06afd6b:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
ffffffffc06afd72:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
ffffffffc06afd79:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06afd80:	e8 00 00 00 00       	callq  ffffffffc06afd85 <sfs_iget+0x1f5>

ffffffffc06afd85:	48 89 df             	mov    %rbx,%rdi
static int sfs_fill_super(struct super_block *sb, void *data, int silent)
ffffffffc06afd88:	48 c7 c3 fb ff ff ff 	mov    $0xfffffffffffffffb,%rbx

ffffffffc06afd8f:	e8 00 00 00 00       	callq  ffffffffc06afd94 <sfs_iget+0x204>
static int sfs_fill_super(struct super_block *sb, void *data, int silent)
ffffffffc06afd94:	e9 3e fe ff ff       	jmpq   ffffffffc06afbd7 <sfs_iget+0x47>
		inode->i_fop = &sfs_dir_operations;
ffffffffc06afd99:	48 8b 43 30          	mov    0x30(%rbx),%rax
	} else if (S_ISDIR(inode->i_mode)) {
ffffffffc06afd9d:	48 c7 43 20 00 00 00 	movq   $0x0,0x20(%rbx)
ffffffffc06afda4:	00 
		inode->i_op = &sfs_dir_inode_operations;
ffffffffc06afda5:	48 c7 83 68 01 00 00 	movq   $0x0,0x168(%rbx)
ffffffffc06afdac:	00 00 00 00 
		inode->i_fop = &sfs_dir_operations;
ffffffffc06afdb0:	48 c7 40 70 00 00 00 	movq   $0x0,0x70(%rax)
ffffffffc06afdb7:	00 
ffffffffc06afdb8:	e9 1a fe ff ff       	jmpq   ffffffffc06afbd7 <sfs_iget+0x47>
ffffffffc06afdbd:	48 89 c2             	mov    %rax,%rdx
ffffffffc06afdc0:	e9 40 ff ff ff       	jmpq   ffffffffc06afd05 <sfs_iget+0x175>
ffffffffc06afdc5:	90                   	nop
ffffffffc06afdc6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffffc06afdcd:	00 00 00 

ffffffffc06afdd0 <sfs_lookup>:

ffffffffc06afdd0:	e8 00 00 00 00       	callq  ffffffffc06afdd5 <sfs_lookup+0x5>
ffffffffc06afdd5:	55                   	push   %rbp
		index = kmalloc_index(size);

		if (!index)
			return ZERO_SIZE_PTR;

		return kmem_cache_alloc_trace(
ffffffffc06afdd6:	ba 14 00 00 00       	mov    $0x14,%edx
ffffffffc06afddb:	48 89 e5             	mov    %rsp,%rbp
ffffffffc06afdde:	41 56                	push   %r14
ffffffffc06afde0:	41 55                	push   %r13
ffffffffc06afde2:	49 89 fd             	mov    %rdi,%r13
ffffffffc06afde5:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # ffffffffc06afdec <sfs_lookup+0x1c>
ffffffffc06afdec:	41 54                	push   %r12
ffffffffc06afdee:	53                   	push   %rbx
ffffffffc06afdef:	48 89 f3             	mov    %rsi,%rbx
ffffffffc06afdf2:	be c0 0d 00 00       	mov    $0xdc0,%esi
ffffffffc06afdf7:	e8 00 00 00 00       	callq  ffffffffc06afdfc <sfs_lookup+0x2c>
		return ERR_PTR(-ENAMETOOLONG);
ffffffffc06afdfc:	8b 53 24             	mov    0x24(%rbx),%edx
ffffffffc06afdff:	48 8b 73 28          	mov    0x28(%rbx),%rsi
ffffffffc06afe03:	48 89 c7             	mov    %rax,%rdi
ffffffffc06afe06:	49 89 d4             	mov    %rdx,%r12
ffffffffc06afe09:	e8 00 00 00 00       	callq  ffffffffc06afe0e <sfs_lookup+0x3e>

ffffffffc06afe0e:	44 89 e2             	mov    %r12d,%edx
ffffffffc06afe11:	48 89 c6             	mov    %rax,%rsi
ffffffffc06afe14:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06afe1b:	e8 00 00 00 00       	callq  ffffffffc06afe20 <sfs_lookup+0x50>
	printk(KERN_ERR "jy: lookup0");
ffffffffc06afe20:	81 7b 24 ff 00 00 00 	cmpl   $0xff,0x24(%rbx)
ffffffffc06afe27:	76 10                	jbe    ffffffffc06afe39 <sfs_lookup+0x69>
	ino = sfs_inode_by_name(dir, &dentry->d_name);
ffffffffc06afe29:	48 c7 c0 dc ff ff ff 	mov    $0xffffffffffffffdc,%rax
		u32 request_mask, unsigned int query_flags)
ffffffffc06afe30:	5b                   	pop    %rbx
ffffffffc06afe31:	41 5c                	pop    %r12
ffffffffc06afe33:	41 5d                	pop    %r13
ffffffffc06afe35:	41 5e                	pop    %r14
ffffffffc06afe37:	5d                   	pop    %rbp
ffffffffc06afe38:	c3                   	retq   
		printk(KERN_ERR "jy: lookup1: %ld", ino);
ffffffffc06afe39:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
	char *name = kzalloc(20, GFP_KERNEL);
ffffffffc06afe40:	45 31 f6             	xor    %r14d,%r14d
		printk(KERN_ERR "jy: lookup1: %ld", ino);
ffffffffc06afe43:	e8 00 00 00 00       	callq  ffffffffc06afe48 <sfs_lookup+0x78>
		inode = sfs_iget(dir->i_sb, ino);
ffffffffc06afe48:	48 8d 73 20          	lea    0x20(%rbx),%rsi
ffffffffc06afe4c:	4c 89 ef             	mov    %r13,%rdi
ffffffffc06afe4f:	e8 00 00 00 00       	callq  ffffffffc06afe54 <sfs_lookup+0x84>
	}
ffffffffc06afe54:	48 85 c0             	test   %rax,%rax
		inode = sfs_iget(dir->i_sb, ino);
ffffffffc06afe57:	49 89 c4             	mov    %rax,%r12
	}
ffffffffc06afe5a:	75 19                	jne    ffffffffc06afe75 <sfs_lookup+0xa5>

ffffffffc06afe5c:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06afe63:	e8 00 00 00 00       	callq  ffffffffc06afe68 <sfs_lookup+0x98>
int sfs_getattr(const struct path *path, struct kstat *stat,
ffffffffc06afe68:	48 89 de             	mov    %rbx,%rsi
ffffffffc06afe6b:	4c 89 f7             	mov    %r14,%rdi
ffffffffc06afe6e:	e8 00 00 00 00       	callq  ffffffffc06afe73 <sfs_lookup+0xa3>
ffffffffc06afe73:	eb bb                	jmp    ffffffffc06afe30 <sfs_lookup+0x60>
	printk(KERN_ERR "jy: lookup2");
ffffffffc06afe75:	48 89 c6             	mov    %rax,%rsi
ffffffffc06afe78:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06afe7f:	e8 00 00 00 00       	callq  ffffffffc06afe84 <sfs_lookup+0xb4>
	return d_splice_alias(inode, dentry);
ffffffffc06afe84:	49 8b 7d 28          	mov    0x28(%r13),%rdi
ffffffffc06afe88:	4c 89 e6             	mov    %r12,%rsi
ffffffffc06afe8b:	e8 00 00 00 00       	callq  ffffffffc06afe90 <sfs_lookup+0xc0>
ffffffffc06afe90:	49 89 c6             	mov    %rax,%r14
ffffffffc06afe93:	eb c7                	jmp    ffffffffc06afe5c <sfs_lookup+0x8c>
ffffffffc06afe95:	90                   	nop
ffffffffc06afe96:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffffc06afe9d:	00 00 00 

ffffffffc06afea0 <sfs_fill_super>:
	struct inode *root;
ffffffffc06afea0:	e8 00 00 00 00       	callq  ffffffffc06afea5 <sfs_fill_super+0x5>
ffffffffc06afea5:	55                   	push   %rbp
ffffffffc06afea6:	ba 40 00 00 00       	mov    $0x40,%edx
ffffffffc06afeab:	be c0 0d 00 00       	mov    $0xdc0,%esi
ffffffffc06afeb0:	48 89 e5             	mov    %rsp,%rbp
ffffffffc06afeb3:	41 57                	push   %r15
ffffffffc06afeb5:	41 56                	push   %r14
ffffffffc06afeb7:	41 55                	push   %r13
ffffffffc06afeb9:	41 54                	push   %r12
ffffffffc06afebb:	53                   	push   %rbx
ffffffffc06afebc:	48 89 fb             	mov    %rdi,%rbx
ffffffffc06afebf:	48 83 ec 10          	sub    $0x10,%rsp
ffffffffc06afec3:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # ffffffffc06afeca <sfs_fill_super+0x2a>
ffffffffc06afeca:	e8 00 00 00 00       	callq  ffffffffc06afecf <sfs_fill_super+0x2f>
	sb->s_fs_info = sbi;
ffffffffc06afecf:	48 85 c0             	test   %rax,%rax
ffffffffc06afed2:	74 63                	je     ffffffffc06aff37 <sfs_fill_super+0x97>
	if (!sb_set_blocksize(sb, SFS_BLKSIZE)) {
ffffffffc06afed4:	48 89 83 b0 03 00 00 	mov    %rax,0x3b0(%rbx)
		sfs_msg(KERN_ERR, "sfs_fill_super", "Failed to set blocksize");
ffffffffc06afedb:	48 89 18             	mov    %rbx,(%rax)
	}
ffffffffc06afede:	be 00 10 00 00       	mov    $0x1000,%esi
ffffffffc06afee3:	48 89 df             	mov    %rbx,%rdi
ffffffffc06afee6:	49 89 c5             	mov    %rax,%r13
ffffffffc06afee9:	e8 00 00 00 00       	callq  ffffffffc06afeee <sfs_fill_super+0x4e>
ffffffffc06afeee:	85 c0                	test   %eax,%eax
ffffffffc06afef0:	75 73                	jne    ffffffffc06aff65 <sfs_fill_super+0xc5>

ffffffffc06afef2:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
ffffffffc06afef9:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
ffffffffc06aff00:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi

ffffffffc06aff07:	41 bc fb ff ff ff    	mov    $0xfffffffb,%r12d

ffffffffc06aff0d:	e8 00 00 00 00       	callq  ffffffffc06aff12 <sfs_fill_super+0x72>

ffffffffc06aff12:	4c 89 ef             	mov    %r13,%rdi
ffffffffc06aff15:	e8 00 00 00 00       	callq  ffffffffc06aff1a <sfs_fill_super+0x7a>
failed_nomem:
ffffffffc06aff1a:	48 c7 83 b0 03 00 00 	movq   $0x0,0x3b0(%rbx)
ffffffffc06aff21:	00 00 00 00 
		const char *dev_name, void *data)
ffffffffc06aff25:	48 83 c4 10          	add    $0x10,%rsp
ffffffffc06aff29:	44 89 e0             	mov    %r12d,%eax
ffffffffc06aff2c:	5b                   	pop    %rbx
ffffffffc06aff2d:	41 5c                	pop    %r12
ffffffffc06aff2f:	41 5d                	pop    %r13
ffffffffc06aff31:	41 5e                	pop    %r14
ffffffffc06aff33:	41 5f                	pop    %r15
ffffffffc06aff35:	5d                   	pop    %rbp
ffffffffc06aff36:	c3                   	retq   
}
ffffffffc06aff37:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
static struct dentry *sfs_mount(struct file_system_type *fs_type, int flags,
ffffffffc06aff3e:	41 bc f4 ff ff ff    	mov    $0xfffffff4,%r12d
}
ffffffffc06aff44:	e8 00 00 00 00       	callq  ffffffffc06aff49 <sfs_fill_super+0xa9>

ffffffffc06aff49:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
ffffffffc06aff50:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
ffffffffc06aff57:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06aff5e:	e8 00 00 00 00       	callq  ffffffffc06aff63 <sfs_fill_super+0xc3>
static struct dentry *sfs_mount(struct file_system_type *fs_type, int flags,
ffffffffc06aff63:	eb c0                	jmp    ffffffffc06aff25 <sfs_fill_super+0x85>
		sfs_msg(KERN_ERR, "sfs_fill_super", "Failed to read superblock");
ffffffffc06aff65:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06aff6c:	e8 00 00 00 00       	callq  ffffffffc06aff71 <sfs_fill_super+0xd1>
ffffffffc06aff71:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # ffffffffc06aff78 <sfs_fill_super+0xd8>
ffffffffc06aff78:	ba 58 00 00 00       	mov    $0x58,%edx
ffffffffc06aff7d:	be c0 0d 00 00       	mov    $0xdc0,%esi
		goto free_sbi;
ffffffffc06aff82:	4d 8b 7d 00          	mov    0x0(%r13),%r15
ffffffffc06aff86:	e8 00 00 00 00       	callq  ffffffffc06aff8b <sfs_fill_super+0xeb>
	for (block = 0; block < 2; block++) {
ffffffffc06aff8b:	48 85 c0             	test   %rax,%rax
ffffffffc06aff8e:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
ffffffffc06aff92:	0f 84 f8 00 00 00    	je     ffffffffc06b0090 <sfs_fill_super+0x1f0>
ffffffffc06aff98:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
ffffffffc06aff9f:	00 
	if (!sbi)
ffffffffc06affa0:	45 31 f6             	xor    %r14d,%r14d
	if (!super)
ffffffffc06affa3:	45 31 e4             	xor    %r12d,%r12d
	return __bread_gfp(sb->s_bdev, block, sb->s_blocksize, __GFP_MOVABLE);
ffffffffc06affa6:	49 8b bf d8 00 00 00 	mov    0xd8(%r15),%rdi
ffffffffc06affad:	41 8b 57 18          	mov    0x18(%r15),%edx
ffffffffc06affb1:	b9 08 00 00 00       	mov    $0x8,%ecx
ffffffffc06affb6:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
ffffffffc06affba:	e8 00 00 00 00       	callq  ffffffffc06affbf <sfs_fill_super+0x11f>
ffffffffc06affbf:	8b 4d d0             	mov    -0x30(%rbp),%ecx
ffffffffc06affc2:	83 c1 01             	add    $0x1,%ecx
			continue;
ffffffffc06affc5:	48 85 c0             	test   %rax,%rax
ffffffffc06affc8:	74 77                	je     ffffffffc06b0041 <sfs_fill_super+0x1a1>
			*raw_super = super;
ffffffffc06affca:	4d 85 f6             	test   %r14,%r14
ffffffffc06affcd:	75 1a                	jne    ffffffffc06affe9 <sfs_fill_super+0x149>
		}
ffffffffc06affcf:	48 8b 48 28          	mov    0x28(%rax),%rcx
ffffffffc06affd3:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
ffffffffc06affd7:	4c 8b 75 c8          	mov    -0x38(%rbp),%r14
ffffffffc06affdb:	48 8d b1 00 04 00 00 	lea    0x400(%rcx),%rsi
ffffffffc06affe2:	b9 16 00 00 00       	mov    $0x16,%ecx
ffffffffc06affe7:	f3 a5                	rep movsl %ds:(%rsi),%es:(%rdi)
		__brelse(bh);
ffffffffc06affe9:	48 89 c7             	mov    %rax,%rdi
ffffffffc06affec:	e8 00 00 00 00       	callq  ffffffffc06afff1 <sfs_fill_super+0x151>
			sfs_msg(KERN_ERR, "read_raw_super_block", "Failed to read %th superblock", block + 1);
ffffffffc06afff1:	48 83 7d d0 01       	cmpq   $0x1,-0x30(%rbp)
ffffffffc06afff6:	75 3c                	jne    ffffffffc06b0034 <sfs_fill_super+0x194>
		err = 0;
ffffffffc06afff8:	4d 85 f6             	test   %r14,%r14
ffffffffc06afffb:	74 66                	je     ffffffffc06b0063 <sfs_fill_super+0x1c3>
	}
ffffffffc06afffd:	41 81 3e f5 05 20 20 	cmpl   $0x202005f5,(%r14)
ffffffffc06b0004:	0f 84 8e 00 00 00    	je     ffffffffc06b0098 <sfs_fill_super+0x1f8>

ffffffffc06b000a:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
ffffffffc06b0011:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
ffffffffc06b0018:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
		goto free_sbi;
ffffffffc06b001f:	45 31 e4             	xor    %r12d,%r12d

ffffffffc06b0022:	e8 00 00 00 00       	callq  ffffffffc06b0027 <sfs_fill_super+0x187>
	kvfree(sbi);
ffffffffc06b0027:	4c 89 f7             	mov    %r14,%rdi
ffffffffc06b002a:	e8 00 00 00 00       	callq  ffffffffc06b002f <sfs_fill_super+0x18f>
ffffffffc06b002f:	e9 de fe ff ff       	jmpq   ffffffffc06aff12 <sfs_fill_super+0x72>
			sfs_msg(KERN_ERR, "read_raw_super_block", "Failed to read %th superblock", block + 1);
ffffffffc06b0034:	48 c7 45 d0 01 00 00 	movq   $0x1,-0x30(%rbp)
ffffffffc06b003b:	00 
ffffffffc06b003c:	e9 65 ff ff ff       	jmpq   ffffffffc06affa6 <sfs_fill_super+0x106>
		}
ffffffffc06b0041:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
ffffffffc06b0048:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
ffffffffc06b004f:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06b0056:	e8 00 00 00 00       	callq  ffffffffc06b005b <sfs_fill_super+0x1bb>

ffffffffc06b005b:	41 bc fb ff ff ff    	mov    $0xfffffffb,%r12d
ffffffffc06b0061:	eb 8e                	jmp    ffffffffc06afff1 <sfs_fill_super+0x151>

ffffffffc06b0063:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
ffffffffc06b0067:	e8 00 00 00 00       	callq  ffffffffc06b006c <sfs_fill_super+0x1cc>
	}
ffffffffc06b006c:	45 85 e4             	test   %r12d,%r12d
ffffffffc06b006f:	74 8c                	je     ffffffffc06afffd <sfs_fill_super+0x15d>

ffffffffc06b0071:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
ffffffffc06b0078:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
ffffffffc06b007f:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06b0086:	e8 00 00 00 00       	callq  ffffffffc06b008b <sfs_fill_super+0x1eb>
	if (le32_to_cpu(raw_super->magic) != SFS_SUPER_MAGIC) {
ffffffffc06b008b:	e9 82 fe ff ff       	jmpq   ffffffffc06aff12 <sfs_fill_super+0x72>
		bh = sb_bread(sb, block);
ffffffffc06b0090:	41 bc f4 ff ff ff    	mov    $0xfffffff4,%r12d
ffffffffc06b0096:	eb d9                	jmp    ffffffffc06b0071 <sfs_fill_super+0x1d1>
	sbi->imap_blkaddr = le32_to_cpu(raw_super->imap_blkaddr);
ffffffffc06b0098:	48 c7 43 30 00 00 00 	movq   $0x0,0x30(%rbx)
ffffffffc06b009f:	00 
	sbi->dmap_blkaddr = le32_to_cpu(raw_super->dmap_blkaddr);
ffffffffc06b00a0:	41 8b 06             	mov    (%r14),%eax
		ret = PTR_ERR(root);
ffffffffc06b00a3:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi

ffffffffc06b00aa:	4d 89 75 08          	mov    %r14,0x8(%r13)
	sbi->dmap_blkaddr = le32_to_cpu(raw_super->dmap_blkaddr);
ffffffffc06b00ae:	48 89 43 60          	mov    %rax,0x60(%rbx)
	sbi->data_blkaddr = le32_to_cpu(raw_super->data_blkaddr);
ffffffffc06b00b2:	41 8b 46 1c          	mov    0x1c(%r14),%eax
ffffffffc06b00b6:	41 89 45 20          	mov    %eax,0x20(%r13)
	sbi->blkcnt_imap = le32_to_cpu(raw_super->block_count_imap);
ffffffffc06b00ba:	41 8b 46 20          	mov    0x20(%r14),%eax
ffffffffc06b00be:	41 89 45 24          	mov    %eax,0x24(%r13)
	sbi->blkcnt_dmap = le32_to_cpu(raw_super->block_count_dmap);
ffffffffc06b00c2:	41 8b 46 24          	mov    0x24(%r14),%eax
ffffffffc06b00c6:	41 89 45 2c          	mov    %eax,0x2c(%r13)
	sbi->blkcnt_inode = le32_to_cpu(raw_super->block_count_inodes);
ffffffffc06b00ca:	41 8b 46 28          	mov    0x28(%r14),%eax
ffffffffc06b00ce:	41 89 45 28          	mov    %eax,0x28(%r13)
	sbi->blkcnt_data = le32_to_cpu(raw_super->block_count_data);
ffffffffc06b00d2:	41 8b 46 2c          	mov    0x2c(%r14),%eax
ffffffffc06b00d6:	41 89 45 30          	mov    %eax,0x30(%r13)

ffffffffc06b00da:	41 8b 46 30          	mov    0x30(%r14),%eax
ffffffffc06b00de:	41 89 45 34          	mov    %eax,0x34(%r13)
	//flag operation
ffffffffc06b00e2:	41 8b 46 34          	mov    0x34(%r14),%eax
ffffffffc06b00e6:	41 89 45 38          	mov    %eax,0x38(%r13)

ffffffffc06b00ea:	41 8b 46 38          	mov    0x38(%r14),%eax
ffffffffc06b00ee:	41 89 45 3c          	mov    %eax,0x3c(%r13)
		ret = PTR_ERR(root);
ffffffffc06b00f2:	e8 00 00 00 00       	callq  ffffffffc06b00f7 <sfs_fill_super+0x257>
		goto free_raw_super;
ffffffffc06b00f7:	be 03 00 00 00       	mov    $0x3,%esi
ffffffffc06b00fc:	48 89 df             	mov    %rbx,%rdi
ffffffffc06b00ff:	e8 00 00 00 00       	callq  ffffffffc06b0104 <sfs_fill_super+0x264>
	}
ffffffffc06b0104:	48 3d 00 f0 ff ff    	cmp    $0xfffffffffffff000,%rax
	sb->s_root = d_make_root(root);
ffffffffc06b010a:	41 89 c4             	mov    %eax,%r12d
	}
ffffffffc06b010d:	0f 87 14 ff ff ff    	ja     ffffffffc06b0027 <sfs_fill_super+0x187>
		goto free_raw_super;
ffffffffc06b0113:	48 89 c7             	mov    %rax,%rdi
	kvfree(raw_super);
ffffffffc06b0116:	45 31 e4             	xor    %r12d,%r12d
		goto free_raw_super;
ffffffffc06b0119:	e8 00 00 00 00       	callq  ffffffffc06b011e <sfs_fill_super+0x27e>
	}
ffffffffc06b011e:	48 85 c0             	test   %rax,%rax
		goto free_raw_super;
ffffffffc06b0121:	48 89 43 68          	mov    %rax,0x68(%rbx)
	}
ffffffffc06b0125:	0f 85 fa fd ff ff    	jne    ffffffffc06aff25 <sfs_fill_super+0x85>

ffffffffc06b012b:	41 bc f4 ff ff ff    	mov    $0xfffffff4,%r12d
ffffffffc06b0131:	e9 f1 fe ff ff       	jmpq   ffffffffc06b0027 <sfs_fill_super+0x187>

Disassembly of section .text.unlikely:

ffffffffc06ae000 <sfs_map>:
{
ffffffffc06ae000:	e8 00 00 00 00       	callq  ffffffffc06ae005 <sfs_map+0x5>
ffffffffc06ae005:	55                   	push   %rbp
ffffffffc06ae006:	48 89 e5             	mov    %rsp,%rbp
ffffffffc06ae009:	41 57                	push   %r15
ffffffffc06ae00b:	41 56                	push   %r14
ffffffffc06ae00d:	41 55                	push   %r13
ffffffffc06ae00f:	41 54                	push   %r12
ffffffffc06ae011:	49 89 f5             	mov    %rsi,%r13
ffffffffc06ae014:	53                   	push   %rbx
ffffffffc06ae015:	48 89 fb             	mov    %rdi,%rbx
ffffffffc06ae018:	41 89 d4             	mov    %edx,%r12d
	if (put_page_testzero(page))
ffffffffc06ae01b:	48 83 ec 70          	sub    $0x70,%rsp
	return (page->flags >> ZONES_PGSHIFT) & ZONES_MASK;
ffffffffc06ae01f:	8b 77 b8             	mov    -0x48(%rdi),%esi
ffffffffc06ae022:	4c 8b 77 28          	mov    0x28(%rdi),%r14
ffffffffc06ae026:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
	if (!is_zone_device_page(page))
ffffffffc06ae02d:	65 48 8b 04 25 28 00 	mov    %gs:0x28,%rax
ffffffffc06ae034:	00 00 
	switch (page->pgmap->type) {
ffffffffc06ae036:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffffc06ae03a:	31 c0                	xor    %eax,%eax
ffffffffc06ae03c:	e8 00 00 00 00       	callq  ffffffffc06ae041 <sfs_map+0x41>
		put_devmap_managed_page(page);
ffffffffc06ae041:	41 8b 45 00          	mov    0x0(%r13),%eax
}
ffffffffc06ae045:	48 c7 45 80 00 00 00 	movq   $0x0,-0x80(%rbp)
ffffffffc06ae04c:	00 
ffffffffc06ae04d:	48 8d 44 83 b8       	lea    -0x48(%rbx,%rax,4),%rax
{
ffffffffc06ae052:	48 8d 9d 70 ff ff ff 	lea    -0x90(%rbp),%rbx
ffffffffc06ae059:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
ffffffffc06ae060:	8b 00                	mov    (%rax),%eax
	printk(KERN_ERR "jy: bmap\n");
ffffffffc06ae062:	85 c0                	test   %eax,%eax
ffffffffc06ae064:	89 85 78 ff ff ff    	mov    %eax,-0x88(%rbp)
ffffffffc06ae06a:	0f 84 bb 00 00 00    	je     ffffffffc06ae12b <sfs_map+0x12b>
	return generic_block_bmap(mapping,block, sfs_get_block);
ffffffffc06ae070:	41 ff cc             	dec    %r12d
ffffffffc06ae073:	49 89 df             	mov    %rbx,%r15
ffffffffc06ae076:	4d 6b e4 18          	imul   $0x18,%r12,%r12
ffffffffc06ae07a:	4a 8d 04 23          	lea    (%rbx,%r12,1),%rax
ffffffffc06ae07e:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
}
ffffffffc06ae085:	4c 3b bd 68 ff ff ff 	cmp    -0x98(%rbp),%r15
ffffffffc06ae08c:	0f 84 87 00 00 00    	je     ffffffffc06ae119 <sfs_map+0x119>
{
ffffffffc06ae092:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
	printk(KERN_ERR "jy: readpage\n");
ffffffffc06ae099:	e8 00 00 00 00       	callq  ffffffffc06ae09e <sfs_map+0x9e>
{
ffffffffc06ae09e:	41 8b 77 08          	mov    0x8(%r15),%esi
ffffffffc06ae0a2:	49 8b be d8 00 00 00 	mov    0xd8(%r14),%rdi
	return block_read_full_page(page, sfs_get_block);
ffffffffc06ae0a9:	b9 08 00 00 00       	mov    $0x8,%ecx
ffffffffc06ae0ae:	41 8b 56 18          	mov    0x18(%r14),%edx
ffffffffc06ae0b2:	e8 00 00 00 00       	callq  ffffffffc06ae0b7 <sfs_map+0xb7>
ffffffffc06ae0b7:	48 85 c0             	test   %rax,%rax
}
ffffffffc06ae0ba:	0f 84 ac 00 00 00    	je     ffffffffc06ae16c <sfs_map+0x16c>
{
ffffffffc06ae0c0:	48 89 da             	mov    %rbx,%rdx
ffffffffc06ae0c3:	48 8b 0a             	mov    (%rdx),%rcx
ffffffffc06ae0c6:	8b 09                	mov    (%rcx),%ecx
ffffffffc06ae0c8:	39 4a 08             	cmp    %ecx,0x8(%rdx)
ffffffffc06ae0cb:	75 0b                	jne    ffffffffc06ae0d8 <sfs_map+0xd8>
ffffffffc06ae0cd:	48 83 c2 18          	add    $0x18,%rdx
ffffffffc06ae0d1:	49 39 d7             	cmp    %rdx,%r15
	printk(KERN_ERR "jy: writepage \n");
ffffffffc06ae0d4:	73 ed                	jae    ffffffffc06ae0c3 <sfs_map+0xc3>
ffffffffc06ae0d6:	eb 05                	jmp    ffffffffc06ae0dd <sfs_map+0xdd>
ffffffffc06ae0d8:	49 39 d7             	cmp    %rdx,%r15
ffffffffc06ae0db:	73 7b                	jae    ffffffffc06ae158 <sfs_map+0x158>
ffffffffc06ae0dd:	49 83 c5 04          	add    $0x4,%r13
	return block_write_full_page(page, sfs_get_block, wbc);
ffffffffc06ae0e1:	41 8b 4d 00          	mov    0x0(%r13),%ecx
ffffffffc06ae0e5:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffffc06ae0e9:	49 83 c7 18          	add    $0x18,%r15
ffffffffc06ae0ed:	49 89 47 10          	mov    %rax,0x10(%r15)
}
ffffffffc06ae0f1:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06ae0f8:	48 8d 34 8a          	lea    (%rdx,%rcx,4),%rsi
ffffffffc06ae0fc:	44 8b 26             	mov    (%rsi),%r12d
ffffffffc06ae0ff:	49 89 37             	mov    %rsi,(%r15)
	int error;
ffffffffc06ae102:	45 89 67 08          	mov    %r12d,0x8(%r15)
ffffffffc06ae106:	e8 00 00 00 00       	callq  ffffffffc06ae10b <sfs_map+0x10b>
ffffffffc06ae10b:	45 85 e4             	test   %r12d,%r12d
ffffffffc06ae10e:	0f 85 71 ff ff ff    	jne    ffffffffc06ae085 <sfs_map+0x85>
ffffffffc06ae114:	45 31 e4             	xor    %r12d,%r12d
ffffffffc06ae117:	eb 2c                	jmp    ffffffffc06ae145 <sfs_map+0x145>

ffffffffc06ae119:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
		return error;
ffffffffc06ae120:	e8 00 00 00 00       	callq  ffffffffc06ae125 <sfs_map+0x125>
ffffffffc06ae125:	45 8b 67 08          	mov    0x8(%r15),%r12d

ffffffffc06ae129:	eb 1a                	jmp    ffffffffc06ae145 <sfs_map+0x145>
ffffffffc06ae12b:	45 31 e4             	xor    %r12d,%r12d
ffffffffc06ae12e:	49 89 df             	mov    %rbx,%r15
ffffffffc06ae131:	eb 12                	jmp    ffffffffc06ae145 <sfs_map+0x145>
	if (ia_valid & ATTR_SIZE && attr->ia_size != inode->i_size) {
ffffffffc06ae133:	49 8b 7f 10          	mov    0x10(%r15),%rdi
}
ffffffffc06ae137:	48 85 ff             	test   %rdi,%rdi
ffffffffc06ae13a:	74 05                	je     ffffffffc06ae141 <sfs_map+0x141>
ffffffffc06ae13c:	e8 00 00 00 00       	callq  ffffffffc06ae141 <sfs_map+0x141>
ffffffffc06ae141:	49 83 ef 18          	sub    $0x18,%r15
	__mark_inode_dirty(inode, I_DIRTY);
ffffffffc06ae145:	49 39 df             	cmp    %rbx,%r15
ffffffffc06ae148:	77 e9                	ja     ffffffffc06ae133 <sfs_map+0x133>
ffffffffc06ae14a:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06ae151:	e8 00 00 00 00       	callq  ffffffffc06ae156 <sfs_map+0x156>
	.lookup         = sfs_lookup,
ffffffffc06ae156:	eb 1a                	jmp    ffffffffc06ae172 <sfs_map+0x172>
ffffffffc06ae158:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06ae15f:	41 bc f5 ff ff ff    	mov    $0xfffffff5,%r12d
}
ffffffffc06ae165:	e8 00 00 00 00       	callq  ffffffffc06ae16a <sfs_map+0x16a>
ffffffffc06ae16a:	eb 06                	jmp    ffffffffc06ae172 <sfs_map+0x172>
ffffffffc06ae16c:	41 bc fb ff ff ff    	mov    $0xfffffffb,%r12d
ffffffffc06ae172:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx

ffffffffc06ae176:	65 48 33 0c 25 28 00 	xor    %gs:0x28,%rcx
ffffffffc06ae17d:	00 00 
ffffffffc06ae17f:	44 89 e0             	mov    %r12d,%eax

ffffffffc06ae182:	74 05                	je     ffffffffc06ae189 <sfs_map+0x189>
ffffffffc06ae184:	e8 00 00 00 00       	callq  ffffffffc06ae189 <sfs_map+0x189>
static const struct super_operations sfs_sops = {
ffffffffc06ae189:	48 83 c4 70          	add    $0x70,%rsp

ffffffffc06ae18d:	5b                   	pop    %rbx
ffffffffc06ae18e:	41 5c                	pop    %r12
ffffffffc06ae190:	41 5d                	pop    %r13
	return __bread_gfp(sb->s_bdev, block, sb->s_blocksize, __GFP_MOVABLE);
ffffffffc06ae192:	41 5e                	pop    %r14
ffffffffc06ae194:	41 5f                	pop    %r15
ffffffffc06ae196:	5d                   	pop    %rbp
ffffffffc06ae197:	c3                   	retq   

ffffffffc06ae198 <sfs_commit_chunk>:
ffffffffc06ae198:	e8 00 00 00 00       	callq  ffffffffc06ae19d <sfs_commit_chunk+0x5>
ffffffffc06ae19d:	55                   	push   %rbp
ffffffffc06ae19e:	48 89 e5             	mov    %rsp,%rbp
ffffffffc06ae1a1:	41 56                	push   %r14
ffffffffc06ae1a3:	49 89 f6             	mov    %rsi,%r14
ffffffffc06ae1a6:	41 55                	push   %r13
ffffffffc06ae1a8:	41 54                	push   %r12
ffffffffc06ae1aa:	49 89 fd             	mov    %rdi,%r13
ffffffffc06ae1ad:	53                   	push   %rbx
ffffffffc06ae1ae:	48 8b 77 18          	mov    0x18(%rdi),%rsi

ffffffffc06ae1b2:	41 89 d4             	mov    %edx,%r12d
ffffffffc06ae1b5:	48 8b 1e             	mov    (%rsi),%rbx
ffffffffc06ae1b8:	f0 83 44 24 fc 00    	lock addl $0x0,-0x4(%rsp)
	sfs_inode->i_uid = cpu_to_le32(i_uid_read(inode));
ffffffffc06ae1be:	48 8b 93 48 01 00 00 	mov    0x148(%rbx),%rdx
	sfs_inode->i_gid = cpu_to_le32(i_gid_read(inode));
ffffffffc06ae1c5:	48 89 d1             	mov    %rdx,%rcx
	sfs_inode->i_size = cpu_to_le64(inode->i_size);
ffffffffc06ae1c8:	48 89 d0             	mov    %rdx,%rax
ffffffffc06ae1cb:	48 83 e1 fe          	and    $0xfffffffffffffffe,%rcx
ffffffffc06ae1cf:	48 83 c1 02          	add    $0x2,%rcx
	return from_kuid(inode->i_sb->s_user_ns, inode->i_uid);
ffffffffc06ae1d3:	f0 48 0f b1 8b 48 01 	lock cmpxchg %rcx,0x148(%rbx)
ffffffffc06ae1da:	00 00 
ffffffffc06ae1dc:	48 39 c2             	cmp    %rax,%rdx
	sfs_inode->i_atime_nsec = cpu_to_le32(inode->i_atime.tv_sec);
ffffffffc06ae1df:	74 05                	je     ffffffffc06ae1e6 <sfs_commit_chunk+0x4e>
ffffffffc06ae1e1:	48 89 c2             	mov    %rax,%rdx
ffffffffc06ae1e4:	eb df                	jmp    ffffffffc06ae1c5 <sfs_commit_chunk+0x2d>
ffffffffc06ae1e6:	6a 00                	pushq  $0x0
	return from_kgid(inode->i_sb->s_user_ns, inode->i_gid);
ffffffffc06ae1e8:	31 ff                	xor    %edi,%edi
ffffffffc06ae1ea:	4d 89 e9             	mov    %r13,%r9
ffffffffc06ae1ed:	45 89 e0             	mov    %r12d,%r8d
ffffffffc06ae1f0:	44 89 e1             	mov    %r12d,%ecx
ffffffffc06ae1f3:	4c 89 f2             	mov    %r14,%rdx
	sfs_inode->i_mtime_nsec = cpu_to_le32(inode->i_mtime.tv_sec);
ffffffffc06ae1f6:	e8 00 00 00 00       	callq  ffffffffc06ae1fb <sfs_commit_chunk+0x63>
ffffffffc06ae1fb:	4b 8d 34 34          	lea    (%r12,%r14,1),%rsi
	sfs_inode->i_blocks = cpu_to_le32(inode->i_blocks);
ffffffffc06ae1ff:	48 3b 73 50          	cmp    0x50(%rbx),%rsi
ffffffffc06ae203:	58                   	pop    %rax
ffffffffc06ae204:	7e 11                	jle    ffffffffc06ae217 <sfs_commit_chunk+0x7f>
	sfs_inode->i_flags = cpu_to_le32(si->i_flags);
ffffffffc06ae206:	48 89 73 50          	mov    %rsi,0x50(%rbx)
ffffffffc06ae20a:	48 89 df             	mov    %rbx,%rdi

ffffffffc06ae20d:	be 07 00 00 00       	mov    $0x7,%esi
ffffffffc06ae212:	e8 00 00 00 00       	callq  ffffffffc06ae217 <sfs_commit_chunk+0x7f>
	if (S_ISCHR(inode->i_mode) || S_ISBLK(inode->i_mode)) {
ffffffffc06ae217:	48 8b 43 28          	mov    0x28(%rbx),%rax
ffffffffc06ae21b:	4c 89 ef             	mov    %r13,%rdi
		sfs_inode->i_daddr[0] = si->i_data[0];
ffffffffc06ae21e:	f6 40 50 90          	testb  $0x90,0x50(%rax)
ffffffffc06ae222:	75 06                	jne    ffffffffc06ae22a <sfs_commit_chunk+0x92>
ffffffffc06ae224:	f6 43 0c 41          	testb  $0x41,0xc(%rbx)
		memcpy(&sfs_inode->i_daddr, si->i_data, sizeof(sfs_inode->i_daddr));
ffffffffc06ae228:	74 18                	je     ffffffffc06ae242 <sfs_commit_chunk+0xaa>
ffffffffc06ae22a:	e8 00 00 00 00       	callq  ffffffffc06ae22f <sfs_commit_chunk+0x97>
ffffffffc06ae22f:	85 c0                	test   %eax,%eax
ffffffffc06ae231:	75 16                	jne    ffffffffc06ae249 <sfs_commit_chunk+0xb1>
	}
ffffffffc06ae233:	be 01 00 00 00       	mov    $0x1,%esi
ffffffffc06ae238:	48 89 df             	mov    %rbx,%rdi

ffffffffc06ae23b:	e8 00 00 00 00       	callq  ffffffffc06ae240 <sfs_commit_chunk+0xa8>
ffffffffc06ae240:	eb 07                	jmp    ffffffffc06ae249 <sfs_commit_chunk+0xb1>
	return __builtin_memset(p, c, size);
ffffffffc06ae242:	e8 00 00 00 00       	callq  ffffffffc06ae247 <sfs_commit_chunk+0xaf>
ffffffffc06ae247:	31 c0                	xor    %eax,%eax
ffffffffc06ae249:	48 8d 65 e0          	lea    -0x20(%rbp),%rsp
ffffffffc06ae24d:	5b                   	pop    %rbx
ffffffffc06ae24e:	41 5c                	pop    %r12
ffffffffc06ae250:	41 5d                	pop    %r13
ffffffffc06ae252:	41 5e                	pop    %r14
ffffffffc06ae254:	5d                   	pop    %rbp
ffffffffc06ae255:	c3                   	retq   

ffffffffc06ae256 <sfs_match.part.15>:
ffffffffc06ae256:	55                   	push   %rbp
ffffffffc06ae257:	48 89 f0             	mov    %rsi,%rax
ffffffffc06ae25a:	48 89 d6             	mov    %rdx,%rsi
ffffffffc06ae25d:	48 83 c6 08          	add    $0x8,%rsi
ffffffffc06ae261:	48 63 d7             	movslq %edi,%rdx
ffffffffc06ae264:	48 89 c7             	mov    %rax,%rdi
ffffffffc06ae267:	48 89 e5             	mov    %rsp,%rbp
ffffffffc06ae26a:	e8 00 00 00 00       	callq  ffffffffc06ae26f <sfs_match.part.15+0x19>
	brelse(bh);
ffffffffc06ae26f:	85 c0                	test   %eax,%eax
ffffffffc06ae271:	0f 94 c0             	sete   %al
ffffffffc06ae274:	0f b6 c0             	movzbl %al,%eax

ffffffffc06ae277:	5d                   	pop    %rbp
ffffffffc06ae278:	c3                   	retq   

Disassembly of section .init.text:

ffffffffc06ae000 <init_module>:
{
ffffffffc06ae000:	e8 00 00 00 00       	callq  ffffffffc06ae005 <init_module+0x5>
ffffffffc06ae005:	55                   	push   %rbp
ffffffffc06ae006:	31 d2                	xor    %edx,%edx
ffffffffc06ae008:	45 31 c0             	xor    %r8d,%r8d
ffffffffc06ae00b:	41 b9 3c 00 00 00    	mov    $0x3c,%r9d
ffffffffc06ae011:	b9 00 00 12 04       	mov    $0x4120000,%ecx
ffffffffc06ae016:	be 98 02 00 00       	mov    $0x298,%esi
	if (put_page_testzero(page))
ffffffffc06ae01b:	48 89 e5             	mov    %rsp,%rbp
}
ffffffffc06ae01e:	53                   	push   %rbx
	return (page->flags >> ZONES_PGSHIFT) & ZONES_MASK;
ffffffffc06ae01f:	68 00 00 00 00       	pushq  $0x0
ffffffffc06ae024:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
	if (!is_zone_device_page(page))
ffffffffc06ae02b:	bb f4 ff ff ff       	mov    $0xfffffff4,%ebx
	switch (page->pgmap->type) {
ffffffffc06ae030:	e8 00 00 00 00       	callq  ffffffffc06ae035 <init_module+0x35>
ffffffffc06ae035:	48 85 c0             	test   %rax,%rax
ffffffffc06ae038:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # ffffffffc06ae03f <init_module+0x3f>
ffffffffc06ae03f:	5a                   	pop    %rdx
		put_devmap_managed_page(page);
ffffffffc06ae040:	74 23                	je     ffffffffc06ae065 <init_module+0x65>
ffffffffc06ae042:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
		__put_page(page);
ffffffffc06ae049:	e8 00 00 00 00       	callq  ffffffffc06ae04e <init_module+0x4e>
}
ffffffffc06ae04e:	85 c0                	test   %eax,%eax
{
ffffffffc06ae050:	89 c3                	mov    %eax,%ebx
ffffffffc06ae052:	74 11                	je     ffffffffc06ae065 <init_module+0x65>
ffffffffc06ae054:	e8 00 00 00 00       	callq  ffffffffc06ae059 <init_module+0x59>
ffffffffc06ae059:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # ffffffffc06ae060 <init_module+0x60>
ffffffffc06ae060:	e8 00 00 00 00       	callq  ffffffffc06ae065 <init_module+0x65>
	printk(KERN_ERR "jy: bmap\n");
ffffffffc06ae065:	89 d8                	mov    %ebx,%eax
ffffffffc06ae067:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
ffffffffc06ae06b:	c9                   	leaveq 
ffffffffc06ae06c:	c3                   	retq   

Disassembly of section .exit.text:

ffffffffc06ae000 <cleanup_module>:
{
ffffffffc06ae000:	55                   	push   %rbp
ffffffffc06ae001:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
ffffffffc06ae008:	48 89 e5             	mov    %rsp,%rbp
ffffffffc06ae00b:	e8 00 00 00 00       	callq  ffffffffc06ae010 <cleanup_module+0x10>
ffffffffc06ae010:	e8 00 00 00 00       	callq  ffffffffc06ae015 <cleanup_module+0x15>
ffffffffc06ae015:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # ffffffffc06ae01c <cleanup_module+0x1c>
	if (put_page_testzero(page))
ffffffffc06ae01c:	e8 00 00 00 00       	callq  ffffffffc06ae021 <cleanup_module+0x21>
	return (page->flags >> ZONES_PGSHIFT) & ZONES_MASK;
ffffffffc06ae021:	5d                   	pop    %rbp
ffffffffc06ae022:	c3                   	retq   
